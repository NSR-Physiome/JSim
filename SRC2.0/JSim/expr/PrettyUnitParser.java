
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 12 11:49:35 PDT 2013
//----------------------------------------------------

package JSim.expr;

import JSim.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 12 11:49:35 PDT 2013
  */
public class PrettyUnitParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PrettyUnitParser() {super();}

  /** Constructor which sets the default scanner. */
  public PrettyUnitParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PrettyUnitParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\005\000\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\010\004\006\012\004\013\007\001\002\000" +
    "\014\002\ufff9\005\ufff9\007\ufff9\010\030\011\ufff9\001\002" +
    "\000\014\002\001\005\001\007\001\010\001\011\001\001" +
    "\002\000\010\004\006\012\004\013\007\001\002\000\014" +
    "\002\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\001\002\000" +
    "\012\002\013\007\014\010\012\011\011\001\002\000\010" +
    "\004\022\006\021\012\020\001\002\000\010\004\006\012" +
    "\004\013\007\001\002\000\004\002\000\001\002\000\010" +
    "\004\006\012\004\013\007\001\002\000\014\002\uffff\005" +
    "\uffff\007\uffff\010\uffff\011\011\001\002\000\014\002\ufffe" +
    "\005\ufffe\007\ufffe\010\ufffe\011\011\001\002\000\014\002" +
    "\ufffd\005\ufffd\007\ufffd\010\ufffd\011\ufffd\001\002\000\014" +
    "\002\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\001\002\000" +
    "\010\004\022\006\021\012\020\001\002\000\010\004\022" +
    "\006\021\012\020\001\002\000\004\005\024\001\002\000" +
    "\014\002\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\001\002" +
    "\000\014\002\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\001" +
    "\002\000\012\005\027\007\014\010\012\011\011\001\002" +
    "\000\014\002\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\001" +
    "\002\000\010\004\006\012\004\013\007\001\002\000\014" +
    "\002\ufffc\005\ufffc\007\ufffc\010\ufffc\011\011\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\006\002\007\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\025\003\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\016\001" +
    "\001\000\006\002\015\003\004\001\001\000\002\001\001" +
    "\000\006\002\014\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\024\001\001\000\004\004\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\030\003\004\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PrettyUnitParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PrettyUnitParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PrettyUnitParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PrettyUnitParser$actions {
  private final PrettyUnitParser parser;

  /** Constructor */
  CUP$PrettyUnitParser$actions(PrettyUnitParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PrettyUnitParser$do_action(
    int                        CUP$PrettyUnitParser$act_num,
    java_cup.runtime.lr_parser CUP$PrettyUnitParser$parser,
    java.util.Stack            CUP$PrettyUnitParser$stack,
    int                        CUP$PrettyUnitParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PrettyUnitParser$result;

      /* select the action based on the action number */
      switch (CUP$PrettyUnitParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pnumber ::= MINUS pnumber 
            {
              Double RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 RESULT = new Double(-p.doubleValue()); 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("pnumber",2, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pnumber ::= LPAREN pnumber RPAREN 
            {
              Double RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).value;
		 RESULT = p; 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("pnumber",2, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pnumber ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 RESULT = new Double(Util.toDouble(n)); 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("pnumber",2, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDENT ::= NUMBER 
            {
              String RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 RESULT = nu; 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("IDENT",1, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENT ::= NAME 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 RESULT = na; 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("IDENT",1, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // unitexpr ::= LPAREN unitexpr RPAREN 
            {
              PrettyUnit RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).right;
		PrettyUnit u = (PrettyUnit)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).value;
		 RESULT = u; 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("unitexpr",0, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // unitexpr ::= NUMBER DIVIDE unitexpr 
            {
              PrettyUnit RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		PrettyUnit b = (PrettyUnit)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 PrettyUnit a = new PrettyUnit(n);
		   RESULT = new PrettyUnit(a, b, false); 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("unitexpr",0, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unitexpr ::= unitexpr POWER pnumber 
            {
              PrettyUnit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).right;
		PrettyUnit a = (PrettyUnit)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 RESULT = new PrettyUnit(a, p.doubleValue()); 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("unitexpr",0, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unitexpr ::= unitexpr DIVIDE unitexpr 
            {
              PrettyUnit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).right;
		PrettyUnit a = (PrettyUnit)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		PrettyUnit b = (PrettyUnit)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 RESULT = new PrettyUnit(a, b, false); 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("unitexpr",0, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unitexpr ::= unitexpr TIMES unitexpr 
            {
              PrettyUnit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).right;
		PrettyUnit a = (PrettyUnit)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		PrettyUnit b = (PrettyUnit)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 RESULT = new PrettyUnit(a, b, true); 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("unitexpr",0, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-2)), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= unitexpr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).right;
		PrettyUnit start_val = (PrettyUnit)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)).value;
		RESULT = start_val;
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.elementAt(CUP$PrettyUnitParser$top-1)), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PrettyUnitParser$parser.done_parsing();
          return CUP$PrettyUnitParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // unitexpr ::= IDENT 
            {
              PrettyUnit RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PrettyUnitParser$stack.peek()).value;
		 RESULT = new PrettyUnit(n); 
              CUP$PrettyUnitParser$result = parser.getSymbolFactory().newSymbol("unitexpr",0, ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PrettyUnitParser$stack.peek()), RESULT);
            }
          return CUP$PrettyUnitParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

