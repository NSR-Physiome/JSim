/*NSRCOPYRIGHT
	Copyright (C) 1999-2011 University of Washington
	Developed by the National Simulation Resource
	Department of Bioengineering,  Box 355061
	University of Washington, Seattle, WA 98195-5061.
	Dr. J. B. Bassingthwaighte, Director
END_NSRCOPYRIGHT*/
 
// XSim configuration file
 
package JSim.xsim;
 
import java.io.*;       // File 
import java.util.*;
 
import JSim.util.*;
import JSim.data.*;
import JSim.mml.*;
import JSim.project.*;
import org.w3c.dom.Document;

public class CF {
	public String cfName;
	public Model unitModel;
	public String modName; // user model name
	public String libName; // native library name
	public int errors;
	public CFItem.List items;
	public CFIvar ivar;
	public PrintWriter out;
	public PrintWriter err;
	public int maxloc; // max P loc used
	public CFItem.List renamedPars;
	public StringList dims; // unique dim1 declarations

	// constructor
	public CF() throws Xcept {
	    cfName = "unknown.cf";
	    modName = "unknown";
	    libName = "unknown";
	    errors = 0;
	    items = new CFItem.List();
	}	    

	// write project
	public void writeProj(Writer pwrt) throws Exception {

	    // write .mod and .rtml
	    File fmml = new File(modName + ".mod");
	    FileWriter fwrt = new FileWriter(fmml);
	    writeMML(fwrt);
	    File frtml = new File(modName + ".rtml");
	    fwrt = new FileWriter(frtml);
	    writeRTML(fwrt);

	    // read back
	    String smml = UtilIO.readText(fmml);
	    String srtml = UtilIO.readText(frtml);

	    // create project/appl
	    PApplication pappl = new PApplication();
	    Project proj = new Project("proj", pappl);
	    PModel pmodel = new PModel(proj, modName);
	    pmodel.modelSource.setVal(smml);
	    pmodel.built.setVal(true);
	    pmodel.customRTMLText.setVal(srtml);
	    pmodel.customBuilt.setVal(true);

	    // add images
	    PImageSet imgSet = pmodel.images();
	    for (int i=0; i<items.size(); i++) {
		if (! (items.item(i) instanceof CFFigure))
		    continue;
		CFFigure f = (CFFigure) items.item(i);
		if (imgSet.nestedChild(f.name) != null) 
		    continue;
		PImage img = new PImage(imgSet, f.name);
		img.load(f.file);
	    } 
	    
	    // write project
	    Document doc = proj.exportXMLDoc();
	    XMLWriter xwrt = new XMLWriter();
	    xwrt.write(doc, pwrt);
	}	    


	// write RTML output
	public void writeRTML(PrintStream o) throws Xcept {
	    writeRTML(new PrintWriter(o, true));
	}
	public void writeRTML(Writer o) throws Xcept {
	    out = (o instanceof PrintWriter) ?
		(PrintWriter) o :
		new PrintWriter(o, true);	    

 	    // print it
	    println(XMLWriter.XMLHDR);
	    println("<JSim version=\"" + Util.version() + "\">");
	    writeMenus();
	    writeGroups(true);
	    writeGroups(false);
	    println("</JSim>");
	}
	public void writeMenus() throws Xcept {
	    for (int i=0; i<items.size(); i++) {
		if (! (items.item(i) instanceof CFMenu))
		    continue;
		CFMenu g = (CFMenu) items.item(i);
		if (! g.top) continue;
		g.writeRTML();
	    }
	}
	public void writeGroups(boolean popup) throws Xcept {
	    for (int i=0; i<items.size(); i++) {
		if (! (items.item(i) instanceof CFGroup))
		    continue;
		CFGroup g = (CFGroup) items.item(i);
		if (g.popup != popup) continue;
		g.writeRTML();
	    }
	}

	// write MML output
	public void writeMML(PrintStream o) throws Xcept {
	    writeMML(new PrintWriter(o, true));
	}
	public void writeMML(Writer o) throws Xcept {
	    out = (o instanceof PrintWriter) ?
		(PrintWriter) o :
		new PrintWriter(o, true);	    

 	    // print it
	    println("JSim v1.1");
	    println("");
	    println("// this file automatically generated by x2jsim");
	    println("//\tfrom file " + cfName);
	    println("");
	    println("import XSim;");
	    println("import nsrunit;");	
	    println("unit conversion off;");
	    println("");
	    println("XSim main {");
	    println("\tlibrary lib(\"" + libName + "\");");
	    ivar.writeMMLVar();
	    for (int i=0; i<dims.size(); i++) {
		String x = "x" + dims.str(i);
		println("\trealDomain " + x + "; " +
		    x + ".min=1; " + 
		    x + ".max=" + dims.str(i) + "; " +
		    x + ".delta=1;");
	    }
	    for (int i=0; i<items.size(); i++) {
		if (items.item(i) == ivar) continue;
		items.item(i).writeMMLVar();
	    }
	    for (int i=0; i<items.size(); i++) 
		items.item(i).writeMMLEqn();
	    println("}");
	}
	
	// get libName from cfName (not used)
	public String libName() {
	    String f = cfName;
	    int i = f.lastIndexOf('/');
	    if (i>0) f = f.substring(i+1);
	    i = f.lastIndexOf('.');
	    if (i < 0) return f;
	    return f.substring(0, i);
	}

	// find par by name
	public CFPar par(String n) {
	    for (int i=0; i<items.size(); i++) {
		if (! (items.item(i) instanceof CFPar))
		    continue;
		CFPar par = (CFPar) items.item(i);
		if (n.equalsIgnoreCase(par.name()))
		    return par;
	    }
	    return null;
	}

	// write output
	public void println(String msg) {
	    out.println(msg);
	}

	// error msg
	public void error(String msg) {
	    err.println("Error: " + msg);
	    errors++;
	}

	// warning msg
	public void warn(String msg) {
	    err.println("Warning: " + msg);
	}
}

