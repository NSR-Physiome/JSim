      SUBROUTINE SNSQEN(FCN,JAC,IOPT,N,X,FVEC,TOL,NPRINT,INFO,WA,LWA)
C***BEGIN PROLOGUE   SNSQE
C***REVISION  OCTOBER 1, 1980
C***CATEGORY NO.  C5A,C5B
C***KEYWORD(S) EASY-TO-USE,NONLINEAR SQUARE SYSTEM, ZERO, POWELL
C       HYBRID METHOD
C***DATE WRITTEN  MARCH 1980
C***AUTHOR  HIEBERT K.L. (SLA)
C***PURPOSE
C       SNSQE IS THE EASY-TO-USE VERSION OF SNSQ WHICH FINDS A ZERO
C       OF A SYSTEM OF N NONLINEAR FUNCTIONS IN N VARIABLES BY A MODI-
C       FICATION OF POWELL HYBRID METHOD.  THIS CODE IS THE COMBINATION
C       OF THE MINPACK CODES (ARGONNE) HYBRD1 AND HYBRJ1.
C***DESCRIPTION
C
C
C 1. PURPOSE.
C
C
C       THE PURPOSE OF SNSQE IS TO FIND A ZERO OF A SYSTEM OF N NON-
C       LINEAR FUNCTIONS IN N VARIABLES BY A MODIFICATION OF THE POWELL
C       HYBRID METHOD.  THIS IS DONE BY USING THE MORE GENERAL NONLINEAR
C       EQUATION SOLVER SNSQ.  THE USER MUST PROVIDE A SUBROUTINE WHICH
C       CALCULATES THE FUNCTIONS.  THE USER HAS THE OPTION OF EITHER TO
C       PROVIDE A SUBROUTINE WHICH CALCULATES THE JACOBIAN OR TO LET THE
C       CODE CALCULATE IT BY A FORWARD-DIFFERENCE APPROXIMATION.  THIS
C       CODE IS THE COMBINATION OF THE MINPACK CODES (ARGONNE) HYBRD1
C       AND HYBRJ1.
C
C
C 2. SUBROUTINE AND TYPE STATEMENTS.
C
C       SUBROUTINE SNSQE(FCN,JAC,IOPT,N,X,FVEC,TOL,NPRINT,INFO,
C      *                  WA,LWA)
C       INTEGER IOPT,N,NPRINT,INFO,LWA
C       REAL TOL
C       REAL X(N),FVEC(N),WA(LWA)
C       EXTERNAL FCN,JAC
C
C
C 3. PARAMETERS.
C
C       PARAMETERS DESIGNATED AS INPUT PARAMETERS MUST BE SPECIFIED ON
C       ENTRY TO SNSQE AND ARE NOT CHANGED ON EXIT, WHILE PARAMETERS
C       DESIGNATED AS OUTPUT PARAMETERS NEED NOT BE SPECIFIED ON ENTRY
C       AND ARE SET TO APPROPRIATE VALUES ON EXIT FROM SNSQE.
C
C       FCN IS THE NAME OF THE USER-SUPPLIED SUBROUTINE WHICH CALCULATES
C         THE FUNCTIONS.  FCN MUST BE DECLARED IN AN EXTERNAL STATEMENT
C         IN THE USER CALLING PROGRAM, AND SHOULD BE WRITTEN AS FOLLOWS.
C
C         SUBROUTINE FCN(N,X,FVEC,IFLAG)
C         INTEGER N,IFLAG
C         REAL X(N),FVEC(N)
C         ----------
C         CALCULATE THE FUNCTIONS AT X AND
C         RETURN THIS VECTOR IN FVEC.
C         ----------
C         RETURN
C         END
C
C         THE VALUE OF IFLAG SHOULD NOT BE CHANGED BY FCN UNLESS THE
C         USER WANTS TO TERMINATE EXECUTION OF SNSQE.  IN THIS CASE SET
C         IFLAG TO A NEGATIVE INTEGER.
C
C       JAC IS THE NAME OF THE USER-SUPPLIED SUBROUTINE WHICH CALCULATES
C         THE JACOBIAN.  IF IOPT=1, THEN JAC MUST BE DECLARED IN AN
C         EXTERNAL STATEMENT IN THE USER CALLING PROGRAM, AND SHOULD BE
C         WRITTEN AS FOLLOWS.
C
C         SUBROUTINE JAC(N,X,FVEC,FJAC,LDFJAC,IFLAG)
C         INTEGER N,LDFJAC,IFLAG
C         REAL X(N),FVEC(N),FJAC(LDFJAC,N)
C         ----------
C         CALCULATE THE JACOBIAN AT X AND RETURN THIS
C         MATRIX IN FJAC.  FVEC CONTAINS THE FUNCTION
C         VALUES AT X AND SHOULD NOT BE ALTERED.
C         ----------
C         RETURN
C         END
C
C         THE VALUE OF IFLAG SHOULD NOT BE CHANGED BY JAC UNLESS THE
C         USER WANTS TO TERMINATE EXECUTION OF SNSQE. IN THIS CASE SET
C         IFLAG TO A NEGATIVE INTEGER.
C
C         IF IOPT=2, JAC CAN BE IGNORED (TREAT IT AS A DUMMY ARGUMENT).
C
C       IOPT IS AN INPUT VARIABLE WHICH SPECIFIES HOW THE JACOBIAN WILL
C         BE CALCULATED.  IF IOPT=1, THEN THE USER MUST SUPPLY THE
C         JACOBIAN THROUGH THE SUBROUTINE JAC.  IF IOPT=2, THEN THE
C         CODE WILL APPROXIMATE THE JACOBIAN BY FORWARD-DIFFERENCING.
C
C       N IS A POSITIVE INTEGER INPUT VARIABLE SET TO THE NUMBER OF
C         FUNCTIONS AND VARIABLES.
C
C       X IS AN ARRAY OF LENGTH N.  ON INPUT X MUST CONTAIN AN INITIAL
C         ESTIMATE OF THE SOLUTION VECTOR.  ON OUTPUT X CONTAINS THE
C         FINAL ESTIMATE OF THE SOLUTION VECTOR.
C
C       FVEC IS AN OUTPUT ARRAY OF LENGTH N WHICH CONTAINS THE FUNCTIONS
C         EVALUATED AT THE OUTPUT X.
C
C       TOL IS A NONNEGATIVE INPUT VARIABLE.  TERMINATION OCCURS WHEN
C         THE ALGORITHM ESTIMATES THAT THE RELATIVE ERROR BETWEEN X AND
C         THE SOLUTION IS AT MOST TOL.  SECTION 4 CONTAINS MORE DETAILS
C         ABOUT TOL.
C
C       NPRINT IS AN INTEGER INPUT VARIABLE THAT ENABLES CONTROLLED
C         PRINTING OF ITERATES IF IT IS POSITIVE.  IN THIS CASE, FCN IS
C         CALLED WITH IFLAG = 0 AT THE BEGINNING OF THE FIRST ITERATION
C         AND EVERY NPRINT ITERATIONS THEREAFTER AND IMMEDIATELY PRIOR
C         TO RETURN, WITH X AND FVEC AVAILABLE FOR PRINTING. APPROPRIATE
C         PRINT STATEMENTS MUST BE ADDED TO FCN(SEE EXAMPLE).  IF NPRINT
C         IS NOT POSITIVE, NO SPECIAL CALLS OF FCN WITH IFLAG = 0 ARE
C         MADE.
C
C       INFO IS AN INTEGER OUTPUT VARIABLE.  IF THE USER HAS TERMINATED
C         EXECUTION, INFO IS SET TO THE (NEGATIVE) VALUE OF IFLAG.  SEE
C         DESCRIPTION OF FCN AND JAC. OTHERWISE, INFO IS SET AS FOLLOWS.
C
C         INFO = 0  IMPROPER INPUT PARAMETERS.
C
C         INFO = 1  ALGORITHM ESTIMATES THAT THE RELATIVE ERROR BETWEEN
C                   X AND THE SOLUTION IS AT MOST TOL.
C
C         INFO = 2  NUMBER OF CALLS TO FCN HAS REACHED OR EXCEEDED
C                   100*(N+1) FOR IOPT=1 OR 200*(N+1) FOR IOPT=2.
C
C         INFO = 3  TOL IS TOO SMALL.  NO FURTHER IMPROVEMENT IN THE
C                   APPROXIMATE SOLUTION X IS POSSIBLE.
C
C         INFO = 4  ITERATION IS NOT MAKING GOOD PROGRESS.
C
C         SECTIONS 4 AND 5 CONTAIN MORE DETAILS ABOUT INFO.
C
C       WA IS A WORK ARRAY OF LENGTH LWA.
C
C       LWA IS A POSITIVE INTEGER INPUT VARIABLE NOT LESS THAN
C         (3*N**2+13*N))/2.
C
C
C 4. SUCCESSFUL COMPLETION.
C
C       THE ACCURACY OF SNSQE IS CONTROLLED BY THE CONVERGENCE PARAME-
C       TER TOL.  THIS PARAMETER IS USED IN A TEST WHICH MAKES A COMPAR-
C       ISON BETWEEN THE APPROXIMATION X AND A SOLUTION XSOL.  SNSQE
C       TERMINATES WHEN THE TEST IS SATISFIED.  IF TOL IS LESS THAN THE
C       MACHINE PRECISION (AS DEFINED BY THE  FUNCTION R1MACH(4)), THEN
C       SNSQE ONLY ATTEMPTS TO SATISFY THE TEST DEFINED BY THE MACHINE
C       PRECISION.  FURTHER PROGRESS IS NOT USUALLY POSSIBLE.  UNLESS
C       HIGH PRECISION SOLUTIONS ARE REQUIRED, THE RECOMMENDED VALUE
C       FOR TOL IS THE SQUARE ROOT OF THE MACHINE PRECISION.
C
C       THE TEST ASSUMES THAT THE FUNCTIONS ARE REASONABLY WELL BEHAVED,
C       AND, IF THE JACOBIAN IS SUPPLIED BY THE USER, THAT THE FUNCTIONS
C       AND THE JACOBIAN ARE CODED CONSISTENTLY. IF THESE CONDITIONS ARE
C       NOT SATISFIED, THEN SNSQE MAY INCORRECTLY INDICATE CONVERGENCE.
C       THE CODING OF THE JACOBIAN CAN BE CHECKED BY THE SUBROUTINE
C       CHKDER.  IF THE JACOBIAN IS CODED CORRECTLY OR IOPT=2, THEN
C       THE VALIDITY OF THE ANSWER CAN BE CHECKED, FOR EXAMPLE, BY
C       RERUNNING SNSQE WITH A TIGHTER TOLERANCE.
C
C       CONVERGENCE TEST.  IF ENORM(Z) DENOTES THE EUCLIDEAN NORM OF A
C         VECTOR Z, THEN THIS TEST ATTEMPTS TO GUARANTEE THAT
C
C               ENORM(X-XSOL) .LE. TOL*ENORM(XSOL).
C
C         IF THIS CONDITION IS SATISFIED WITH TOL = 10**(-K), THEN THE
C         LARGER COMPONENTS OF X HAVE K SIGNIFICANT DECIMAL DIGITS AND
C         INFO IS SET TO 1.  THERE IS A DANGER THAT THE SMALLER COMPO-
C         NENTS OF X MAY HAVE LARGE RELATIVE ERRORS, BUT THE FAST RATE
C         OF CONVERGENCE OF SNSQE USUALLY AVOIDS THIS POSSIBILITY.
C
C
C 5. UNSUCCESSFUL COMPLETION.
C
C       UNSUCCESSFUL TERMINATION OF SNSQE CAN BE DUE TO IMPROPER INPUT
C       PARAMETERS, ARITHMETIC INTERRUPTS, AN EXCESSIVE NUMBER OF FUNC-
C       TION EVALUATIONS, ERRORS IN THE FUNCTIONS, OR LACK OF GOOD PROG-
C       RESS.
C
C       IMPROPER INPUT PARAMETERS.  INFO IS SET TO 0 IF IOPT .LT. 1, OR
C         IOPT .GT. 2, OR N .LE. 0, OR TOL .LT. 0.E0, OR
C         LWA .LT. (3*N**2+13*N)/2.
C
C       ARITHMETIC INTERRUPTS.  IF THESE INTERRUPTS OCCUR IN THE FCN
C         SUBROUTINE DURING AN EARLY STAGE OF THE COMPUTATION, THEY MAY
C         BE CAUSED BY AN UNACCEPTABLE CHOICE OF X BY SNSQE.  IN THIS
C         CASE, IT MAY BE POSSIBLE TO REMEDY THE SITUATION BY NOT EVALU-
C         ATING THE FUNCTIONS HERE, BUT INSTEAD SETTING THE COMPONENTS
C         OF FVEC TO NUMBERS THAT EXCEED THOSE IN THE INITIAL FVEC.
C
C       EXCESSIVE NUMBER OF FUNCTION EVALUATIONS.  IF THE NUMBER OF
C         CALLS TO FCN REACHES 100*(N+1) FOR IOPT=1 OR 200*(N+1) FOR
C         IOPT=2, THEN THIS INDICATES THAT THE ROUTINE IS CONVERGING
C         VERY SLOWLY AS MEASURED BY THE PROGRESS OF FVEC, AND INFO IS
C         SET TO 2.  THIS SITUATION SHOULD BE UNUSUAL BECAUSE, AS
C         INDICATED BELOW, LACK OF GOOD PROGRESS IS USUALLY DIAGNOSED
C         EARLIER BY SNSQE, CAUSING TERMINATION WITH INFO = 4.
C
C       ERRORS IN THE FUNCTIONS.  WHEN IOPT=2, THE CHOICE OF STEP LENGTH
C         IN THE FORWARD-DIFFERENCE APPROXIMATION TO THE JACOBIAN
C         ASSUMES THAT THE RELATIVE ERRORS IN THE FUNCTIONS ARE OF THE
C         ORDER OF THE MACHINE PRECISION.  IF THIS IS NOT THE CASE,
C         SNSQE MAY FAIL (USUALLY WITH INFO = 4).  THE USER SHOULD
C         THEN EITHER USE SNSQ AND SET THE STEP LENGTH OR USE IOPT=1
C         AND SUPPLY THE JACOBIAN.
C
C       LACK OF GOOD PROGRESS.  SNSQE SEARCHES FOR A ZERO OF THE SYSTEM
C         BY MINIMIZING THE SUM OF THE SQUARES OF THE FUNCTIONS.  IN SO
C         DOING, IT CAN BECOME TRAPPED IN A REGION WHERE THE MINIMUM
C         DOES NOT CORRESPOND TO A ZERO OF THE SYSTEM AND, IN THIS SITU-
C         ATION, THE ITERATION EVENTUALLY FAILS TO MAKE GOOD PROGRESS.
C         IN PARTICULAR, THIS WILL HAPPEN IF THE SYSTEM DOES NOT HAVE A
C         ZERO.  IF THE SYSTEM HAS A ZERO, RERUNNING SNSQE FROM A DIF-
C         FERENT STARTING POINT MAY BE HELPFUL.
C
C
C 6. CHARACTERISTICS OF THE ALGORITHM.
C
C       SNSQE IS A MODIFICATION OF THE POWELL HYBRID METHOD.  TWO OF
C       ITS MAIN CHARACTERISTICS INVOLVE THE CHOICE OF THE CORRECTION AS
C       A CONVEX COMBINATION OF THE NEWTON AND SCALED GRADIENT DIREC-
C       TIONS, AND THE UPDATING OF THE JACOBIAN BY THE RANK-1 METHOD OF
C       BROYDEN.  THE CHOICE OF THE CORRECTION GUARANTEES (UNDER REASON-
C       ABLE CONDITIONS) GLOBAL CONVERGENCE FOR STARTING POINTS FAR FROM
C       THE SOLUTION AND A FAST RATE OF CONVERGENCE.  THE JACOBIAN IS
C       CALCULATED AT THE STARTING POINT BY EITHER THE USER-SUPPLIED
C       SUBROUTINE OR A FORWARD-DIFFERENCE APPROXIMATION, BUT IT IS NOT
C       RECALCULATED UNTIL THE RANK-1 METHOD FAILS TO PRODUCE SATIS-
C       FACTORY PROGRESS.
C
C       TIMING.  THE TIME REQUIRED BY SNSQE TO SOLVE A GIVEN PROBLEM
C         DEPENDS ON N, THE BEHAVIOR OF THE FUNCTIONS, THE ACCURACY
C         REQUESTED, AND THE STARTING POINT.  THE NUMBER OF ARITHMETIC
C         OPERATIONS NEEDED BY SNSQE IS ABOUT 11.5*(N**2) TO PROCESS
C         EACH EVALUATION OF THE FUNCTIONS (CALL TO FCN) AND 1.3*(N**3)
C         TO PROCESS EACH EVALUATION OF THE JACOBIAN (CALL TO JAC,
C         IF IOPT = 1).  UNLESS FCN AND JAC CAN BE EVALUATED QUICKLY,
C         THE TIMING OF SNSQE WILL BE STRONGLY INFLUENCED BY THE TIME
C         SPENT IN FCN AND JAC.
C
C       STORAGE.  SNSQE REQUIRES (3*N**2 + 17*N)/2 SINGLE PRECISION
C         STORAGE LOCATIONS, IN ADDITION TO THE STORAGE REQUIRED BY THE
C         PROGRAM.  THERE ARE NO INTERNALLY DECLARED STORAGE ARRAYS.
C
C
C 7. EXAMPLE.
C
C       THE PROBLEM IS TO DETERMINE THE VALUES OF X(1), X(2), ..., X(9),
C       WHICH SOLVE THE SYSTEM OF TRIDIAGONAL EQUATIONS
C
C       (3-2*X(1))*X(1)           -2*X(2)                   = -1
C               -X(I-1) + (3-2*X(I))*X(I)         -2*X(I+1) = -1, I=2-8
C                                   -X(8) + (3-2*X(9))*X(9) = -1
C
C       **********
C
C       PROGRAM TEST(INPUT,OUTPUT,TAPE6=OUTPUT)
C C
C C     DRIVER FOR SNSQE EXAMPLE.
C C
C       INTEGER J,N,IOPT,NPRINT,INFO,LWA,NWRITE
C       REAL TOL,FNORM
C       REAL X(9),FVEC(9),WA(180)
C       REAL ENORM,R1MACH
C       EXTERNAL FCN
C       DATA NWRITE /6/
C C
C       IOPT = 2
C       N = 9
C C
C C     THE FOLLOWING STARTING VALUES PROVIDE A ROUGH SOLUTION.
C C
C       DO 10 J = 1, 9
C          X(J) = -1.E0
C    10    CONTINUE
C
C       LWA = 180
C       NPRINT = 0
C C
C C     SET TOL TO THE SQUARE ROOT OF THE MACHINE PRECISION.
C C     UNLESS HIGH PRECISION SOLUTIONS ARE REQUIRED,
C C     THIS IS THE RECOMMENDED SETTING.
C C
C       TOL = SQRT(R1MACH(4))
C C
C       CALL SNSQE(FCN,JAC,IOPT,N,X,FVEC,TOL,NPRINT,INFO,WA,LWA)
C       FNORM = ENORM(N,FVEC)
C       WRITE (NWRITE,1000) FNORM,INFO,(X(J),J=1,N)
C       STOP
C  1000 FORMAT (5X,31H FINAL L2 NORM OF THE RESIDUALS,E15.7 //
C      *        5X,15H EXIT PARAMETER,16X,I10 //
C      *        5X,27H FINAL APPROXIMATE SOLUTION // (5X,3E15.7))
C       END
C       SUBROUTINE FCN(N,X,FVEC,IFLAG)
C       INTEGER N,IFLAG
C       REAL X(N),FVEC(N)
C       INTEGER K
C       REAL ONE,TEMP,TEMP1,TEMP2,THREE,TWO,ZERO
C       DATA ZERO,ONE,TWO,THREE /0.E0,1.E0,2.E0,3.E0/
C C
C       DO 10 K = 1, N
C          TEMP = (THREE - TWO*X(K))*X(K)
C          TEMP1 = ZERO
C          IF (K .NE. 1) TEMP1 = X(K-1)
C          TEMP2 = ZERO
C          IF (K .NE. N) TEMP2 = X(K+1)
C          FVEC(K) = TEMP - TEMP1 - TWO*TEMP2 + ONE
C    10    CONTINUE
C       RETURN
C       END
C
C       RESULTS OBTAINED WITH DIFFERENT COMPILERS OR MACHINES
C       MAY BE SLIGHTLY DIFFERENT.
C
C       FINAL L2 NORM OF THE RESIDUALS  0.1192636E-07
C
C       EXIT PARAMETER                         1
C
C       FINAL APPROXIMATE SOLUTION
C
C       -0.5706545E+00 -0.6816283E+00 -0.7017325E+00
C       -0.7042129E+00 -0.7013690E+00 -0.6918656E+00
C       -0.6657920E+00 -0.5960342E+00 -0.4164121E+00
C
C
C***REFERENCE(S)
C       POWELL, M. J. D.
C       A HYBRID METHOD FOR NONLINEAR EQUATIONS.
C       NUMERICAL METHODS FOR NONLINEAR ALGEBRAIC EQUATIONS,
C       P. RABINOWITZ, EDITOR.  GORDON AND BREACH, 1970.
C***ROUTINES CALLED  SNSQ,XERROR
C***END PROLOGUE
      INTEGER IOPT,N,NPRINT,INFO,LWA
      REAL TOL
      REAL X(N),FVEC(N),WA(LWA)
      EXTERNAL FCN,JAC
      INTEGER INDEX,J,LR,MAXFEV,ML,MODE,MU,NFEV,NJEV
      REAL EPSFCN,FACTOR,ONE,XTOL,ZERO
      DATA FACTOR,ONE,ZERO /1.0E2,1.0E0,0.0E0/
C***FIRST EXECUTABLE STATEMENT    SNSQE
      INFO = 0
C
C     CHECK THE INPUT PARAMETERS FOR ERRORS.
C
      IF (IOPT .LT. 1 .OR. IOPT .GT. 2 .OR. N .LE. 0
     *    .OR. TOL .LT. ZERO .OR. LWA .LT. (3*N**2 +13*N)/2)
     *   GO TO 20
C
C     CALL SNSQ.
C
      MAXFEV = 100*(N + 1)
      IF (IOPT .EQ. 2) MAXFEV = 2*MAXFEV
      XTOL = TOL
      ML = N - 1
      MU = N - 1
      EPSFCN = ZERO
      MODE = 2
      DO 10 J = 1, N
         WA(J) = ONE
   10    CONTINUE
      LR = (N*(N + 1))/2
      INDEX=6*N+LR
      CALL SNSQN(FCN,JAC,IOPT,N,X,FVEC,WA(INDEX+1),N,XTOL,MAXFEV,ML,
     *           MU,EPSFCN,WA(1),MODE,FACTOR,NPRINT,INFO,NFEV,NJEV,
     *           WA(6*N+1),LR,WA(N+1),WA(2*N+1),WA(3*N+1),WA(4*N+1),
     *           WA(5*N+1))
      IF (INFO .EQ. 5) INFO = 4
   20 CONTINUE
      IF (INFO .EQ. 0) CALL XERROR('SNSQE  -- INVALID INPUT PARAMETER.',
     1 34,2,1)
      RETURN
C
C     LAST CARD OF SUBROUTINE SNSQE.
C
      END
C
C ----------------------------------------------------------------------
C
      SUBROUTINE SNSQN(FCN,JAC,IOPT,N,X,FVEC,FJAC,LDFJAC,XTOL,MAXFEV,
     *                 ML,MU,EPSFCN,DIAG,MODE,FACTOR,NPRINT,INFO,NFEV,
     *                 NJEV,R,LR,QTF,WA1,WA2,WA3,WA4)
C***BEGIN PROLOGUE   SNSQ
C***REVISION  OCTOBER 1, 1980
C***CATEGORY NO.  C5A,C5B
C***KEYWORD(S) NONLINEAR SQUARE SYSTEM, ZERO, POWELL HYBRID METHOD
C***DATE WRITTEN  MARCH 1980
C***AUTHOR  HIEBERT K.L. (SLA)
C***PURPOSE
C       SNSQ FINDS TO FIND A ZERO OF A SYSTEM OF N NONLINEAR FUNCTIONS
C       IN N VARIABLES BY A MODIFICATION OF THE POWELL HYBRID METHOD.
C       THIS CODE IS THE COMBINATION OF THE MINPACK CODES (ARGONNE)
C       HYBRD AND HYBRDJ.
C***DESCRIPTION
C
C
C 1. PURPOSE.
C
C       THE PURPOSE OF SNSQ IS TO FIND A ZERO OF A SYSTEM OF N NON-
C       LINEAR FUNCTIONS IN N VARIABLES BY A MODIFICATION OF THE POWELL
C       HYBRID METHOD.  THE USER MUST PROVIDE A SUBROUTINE WHICH CALCU-
C       LATES THE FUNCTIONS.  THE USER HAS THE OPTION OF EITHER TO
C       PROVIDE A SUBROUTINE WHICH CALCULATES THE JACOBIAN OR TO LET THE
C       CODE CALCULATE IT BY A FORWARD-DIFFERENCE APPROXIMATION.
C       THIS CODE IS THE COMBINATION OF THE MINPACK CODES (ARGONNE)
C       HYBRD AND HYBRDJ.
C
C
C 2. SUBROUTINE AND TYPE STATEMENTS.
C
C       SUBROUTINE SNSQ(FCN,JAC,IOPT,N,X,FVEC,FJAC,LDFJAC,XTOL,MAXFEV,
C      *                 ML,MU,EPSFCN,DIAG,MODE,FACTOR,NPRINT,INFO,NFEV,
C      *                 NJEV,R,LR,QTF,WA1,WA2,WA3,WA4)
C       INTEGER IOPT,N,MAXFEV,ML,MU,MODE,NPRINT,INFO,NFEV,LDFJAC,NJEV,LR
C       REAL XTOL,EPSFCN,FACTOR
C       REAL X(N),FVEC(N),DIAG(N),FJAC(LDFJAC,N),R(LR),QTF(N),
C      *     WA1(N),WA2(N),WA3(N),WA4(N)
C       EXTERNAL FCN,JAC
C
C
C 3. PARAMETERS.
C
C       PARAMETERS DESIGNATED AS INPUT PARAMETERS MUST BE SPECIFIED ON
C       ENTRY TO SNSQ AND ARE NOT CHANGED ON EXIT, WHILE PARAMETERS
C       DESIGNATED AS OUTPUT PARAMETERS NEED NOT BE SPECIFIED ON ENTRY
C       AND ARE SET TO APPROPRIATE VALUES ON EXIT FROM SNSQ.
C
C       FCN IS THE NAME OF THE USER-SUPPLIED SUBROUTINE WHICH CALCULATES
C         THE FUNCTIONS.  FCN MUST BE DECLARED IN AN EXTERNAL STATEMENT
C         IN THE USER CALLING PROGRAM, AND SHOULD BE WRITTEN AS FOLLOWS.
C
C         SUBROUTINE FCN(N,X,FVEC,IFLAG)
C         INTEGER N,IFLAG
C         REAL X(N),FVEC(N)
C         ----------
C         CALCULATE THE FUNCTIONS AT X AND
C         RETURN THIS VECTOR IN FVEC.
C         ----------
C         RETURN
C         END
C
C         THE VALUE OF IFLAG SHOULD NOT BE CHANGED BY FCN UNLESS THE
C         USER WANTS TO TERMINATE EXECUTION OF SNSQ.  IN THIS CASE SET
C         IFLAG TO A NEGATIVE INTEGER.
C
C       JAC IS THE NAME OF THE USER-SUPPLIED SUBROUTINE WHICH CALCULATES
C         THE JACOBIAN.  IF IOPT=1, THEN JAC MUST BE DECLARED IN AN
C         EXTERNAL STATEMENT IN THE USER CALLING PROGRAM, AND SHOULD BE
C         WRITTEN AS FOLLOWS.
C
C         SUBROUTINE JAC(N,X,FVEC,FJAC,LDFJAC,IFLAG)
C         INTEGER N,LDFJAC,IFLAG
C         REAL X(N),FVEC(N),FJAC(LDFJAC,N)
C         ----------
C         CALCULATE THE JACOBIAN AT X AND RETURN THIS
C         MATRIX IN FJAC.  FVEC CONTAINS THE FUNCTION
C         VALUES AT X AND SHOULD NOT BE ALTERED.
C         ----------
C         RETURN
C         END
C
C         THE VALUE OF IFLAG SHOULD NOT BE CHANGED BY JAC UNLESS THE
C         USER WANTS TO TERMINATE EXECUTION OF SNSQ.  IN THIS CASE SET
C         IFLAG TO A NEGATIVE INTEGER.
C
C         IF IOPT=2, JAC CAN BE IGNORED (TREAT IT AS A DUMMY ARGUMENT).
C
C       IOPT IS AN INPUT VARIABLE WHICH SPECIFIES HOW THE JACOBIAN WILL
C         BE CALCULATED.  IF IOPT=1, THEN THE USER MUST SUPPLY THE
C         JACOBIAN THROUGH THE SUBROUTINE JAC.  IF IOPT=2, THEN THE
C         CODE WILL APPROXIMATE THE JACOBIAN BY FORWARD-DIFFERENCING.
C
C       N IS A POSITIVE INTEGER INPUT VARIABLE SET TO THE NUMBER OF
C         FUNCTIONS AND VARIABLES.
C
C       X IS AN ARRAY OF LENGTH N.  ON INPUT X MUST CONTAIN AN INITIAL
C         ESTIMATE OF THE SOLUTION VECTOR.  ON OUTPUT X CONTAINS THE
C         FINAL ESTIMATE OF THE SOLUTION VECTOR.
C
C       FVEC IS AN OUTPUT ARRAY OF LENGTH N WHICH CONTAINS THE FUNCTIONS
C         EVALUATED AT THE OUTPUT X.
C
C       FJAC IS AN OUTPUT N BY N ARRAY WHICH CONTAINS THE ORTHOGONAL
C         MATRIX Q PRODUCED BY THE QR FACTORIZATION OF THE FINAL APPROX-
C         IMATE JACOBIAN.
C
C       LDFJAC IS A POSITIVE INTEGER INPUT VARIABLE NOT LESS THAN N
C         WHICH SPECIFIES THE LEADING DIMENSION OF THE ARRAY FJAC.
C
C       XTOL IS A NONNEGATIVE INPUT VARIABLE.  TERMINATION OCCURS WHEN
C         THE RELATIVE ERROR BETWEEN TWO CONSECUTIVE ITERATES IS AT MOST
C         XTOL.  THEREFORE, XTOL MEASURES THE RELATIVE ERROR DESIRED IN
C         THE APPROXIMATE SOLUTION.  SECTION 4 CONTAINS MORE DETAILS
C         ABOUT XTOL.
C
C       MAXFEV IS A POSITIVE INTEGER INPUT VARIABLE.  TERMINATION OCCURS
C         WHEN THE NUMBER OF CALLS TO FCN IS AT LEAST MAXFEV BY THE END
C         OF AN ITERATION.
C
C       ML IS A NONNEGATIVE INTEGER INPUT VARIABLE WHICH SPECIFIES THE
C         NUMBER OF SUBDIAGONALS WITHIN THE BAND OF THE JACOBIAN MATRIX.
C         IF THE JACOBIAN IS NOT BANDED OR IOPT=1, SET ML TO AT
C         LEAST N - 1.
C
C       MU IS A NONNEGATIVE INTEGER INPUT VARIABLE WHICH SPECIFIES THE
C         NUMBER OF SUPERDIAGONALS WITHIN THE BAND OF THE JACOBIAN
C         MATRIX.  IF THE JACOBIAN IS NOT BANDED OR IOPT=1, SET MU TO AT
C         LEAST N - 1.
C
C       EPSFCN IS AN INPUT VARIABLE USED IN DETERMINING A SUITABLE STEP
C         FOR THE FORWARD-DIFFERENCE APPROXIMATION.  THIS APPROXIMATION
C         ASSUMES THAT THE RELATIVE ERRORS IN THE FUNCTIONS ARE OF THE
C         ORDER OF EPSFCN.  IF EPSFCN IS LESS THAN THE MACHINE PRECI-
C         SION, IT IS ASSUMED THAT THE RELATIVE ERRORS IN THE FUNCTIONS
C         ARE OF THE ORDER OF THE MACHINE PRECISION.  IF IOPT=1, THEN
C         EPSFCN CAN BE IGNORED (TREAT IT AS A DUMMY ARGUMENT).
C
C       DIAG IS AN ARRAY OF LENGTH N.  IF MODE = 1 (SEE BELOW), DIAG IS
C         INTERNALLY SET.  IF MODE = 2, DIAG MUST CONTAIN POSITIVE
C         ENTRIES THAT SERVE AS IMPLICIT (MULTIPLICATIVE) SCALE FACTORS
C         FOR THE VARIABLES.
C
C       MODE IS AN INTEGER INPUT VARIABLE.  IF MODE = 1, THE VARIABLES
C         WILL BE SCALED INTERNALLY.  IF MODE = 2, THE SCALING IS SPECI-
C         FIED BY THE INPUT DIAG.  OTHER VALUES OF MODE ARE EQUIVALENT
C         TO MODE = 1.
C
C       FACTOR IS A POSITIVE INPUT VARIABLE USED IN DETERMINING THE INI-
C         TIAL STEP BOUND.  THIS BOUND IS SET TO THE PRODUCT OF FACTOR
C         AND THE EUCLIDEAN NORM OF DIAG*X IF NONZERO, OR ELSE TO FACTOR
C         ITSELF.  IN MOST CASES FACTOR SHOULD LIE IN THE INTERVAL
C         (.1,100.).  100. IS A GENERALLY RECOMMENDED VALUE.
C
C       NPRINT IS AN INTEGER INPUT VARIABLE THAT ENABLES CONTROLLED
C         PRINTING OF ITERATES IF IT IS POSITIVE.  IN THIS CASE, FCN IS
C         CALLED WITH IFLAG = 0 AT THE BEGINNING OF THE FIRST ITERATION
C         AND EVERY NPRINT ITERATIONS THEREAFTER AND IMMEDIATELY PRIOR
C         TO RETURN, WITH X AND FVEC AVAILABLE FOR PRINTING. APPROPRIATE
C         PRINT STATEMENTS MUST BE ADDED TO FCN(SEE EXAMPLE).  IF NPRINT
C         IS NOT POSITIVE, NO SPECIAL CALLS OF FCN WITH IFLAG = 0 ARE
C         MADE.
C
C       INFO IS AN INTEGER OUTPUT VARIABLE.  IF THE USER HAS TERMINATED
C         EXECUTION, INFO IS SET TO THE (NEGATIVE) VALUE OF IFLAG.  SEE
C         DESCRIPTION OF FCN AND JAC. OTHERWISE, INFO IS SET AS FOLLOWS.
C
C         INFO = 0  IMPROPER INPUT PARAMETERS.
C
C         INFO = 1  RELATIVE ERROR BETWEEN TWO CONSECUTIVE ITERATES IS
C                   AT MOST XTOL.
C
C         INFO = 2  NUMBER OF CALLS TO FCN HAS REACHED OR EXCEEDED
C                   MAXFEV.
C
C         INFO = 3  XTOL IS TOO SMALL.  NO FURTHER IMPROVEMENT IN THE
C                   APPROXIMATE SOLUTION X IS POSSIBLE.
C
C         INFO = 4  ITERATION IS NOT MAKING GOOD PROGRESS, AS MEASURED
C                   BY THE IMPROVEMENT FROM THE LAST FIVE JACOBIAN EVAL-
C                   UATIONS.
C
C         INFO = 5  ITERATION IS NOT MAKING GOOD PROGRESS, AS MEASURED
C                   BY THE IMPROVEMENT FROM THE LAST TEN ITERATIONS.
C
C         SECTIONS 4 AND 5 CONTAIN MORE DETAILS ABOUT INFO.
C
C       NFEV IS AN INTEGER OUTPUT VARIABLE SET TO THE NUMBER OF CALLS TO
C         FCN.
C
C       NJEV IS AN INTEGER OUTPUT VARIABLE SET TO THE NUMBER OF CALLS TO
C         JAC. (IF IOPT=2, THEN NJEV IS SET TO ZERO.)
C
C       R IS AN OUTPUT ARRAY OF LENGTH LR WHICH CONTAINS THE UPPER
C         TRIANGULAR MATRIX PRODUCED BY THE QR FACTORIZATION OF THE
C         FINAL APPROXIMATE JACOBIAN, STORED ROWWISE.
C
C       LR IS A POSITIVE INTEGER INPUT VARIABLE NOT LESS THAN
C         (N*(N+1))/2.
C
C       QTF IS AN OUTPUT ARRAY OF LENGTH N WHICH CONTAINS THE VECTOR
C         (Q TRANSPOSE)*FVEC.
C
C       WA1, WA2, WA3, AND WA4 ARE WORK ARRAYS OF LENGTH N.
C
C
C 4. SUCCESSFUL COMPLETION.
C
C       THE ACCURACY OF SNSQ IS CONTROLLED BY THE CONVERGENCE PARAMETER
C       XTOL.  THIS PARAMETER IS USED IN A TEST WHICH MAKES A COMPARISON
C       BETWEEN THE APPROXIMATION X AND A SOLUTION XSOL.  SNSQ TERMI-
C       NATES WHEN THE TEST IS SATISFIED.  IF THE CONVERGENCE PARAMETER
C       IS LESS THAN THE MACHINE PRECISION (AS DEFINED BY THE FUNCTION
C       R1MACH(4)), THEN SNSQ ONLY ATTEMPTS TO SATISFY THE TEST
C       DEFINED BY THE MACHINE PRECISION.  FURTHER PROGRESS IS NOT
C       USUALLY POSSIBLE.
C
C       THE TEST ASSUMES THAT THE FUNCTIONS ARE REASONABLY WELL BEHAVED,
C       AND, IF THE JACOBIAN IS SUPPLIED BY THE USER, THAT THE FUNCTIONS
C       AND THE JACOBIAN ARE CODED CONSISTENTLY.  IF THESE CONDITIONS
C       ARE NOT SATISFIED, THEN SNSQ MAY INCORRECTLY INDICATE CONVER-
C       GENCE.  THE CODING OF THE JACOBIAN CAN BE CHECKED BY THE
C       SUBROUTINE CHKDER. IF THE JACOBIAN IS CODED CORRECTLY OR IOPT=2,
C       THEN THE VALIDITY OF THE ANSWER CAN BE CHECKED, FOR EXAMPLE, BY
C       RERUNNING SNSQ WITH A TIGHTER TOLERANCE.
C
C       CONVERGENCE TEST.  IF ENORM(Z) DENOTES THE EUCLIDEAN NORM OF A
C         VECTOR Z AND D IS THE DIAGONAL MATRIX WHOSE ENTRIES ARE
C         DEFINED BY THE ARRAY DIAG, THEN THIS TEST ATTEMPTS TO GUARAN-
C         TEE THAT
C
C               ENORM(D*(X-XSOL)) .LE. XTOL*ENORM(D*XSOL).
C
C         IF THIS CONDITION IS SATISFIED WITH XTOL = 10**(-K), THEN THE
C         LARGER COMPONENTS OF D*X HAVE K SIGNIFICANT DECIMAL DIGITS AND
C         INFO IS SET TO 1.  THERE IS A DANGER THAT THE SMALLER COMPO-
C         NENTS OF D*X MAY HAVE LARGE RELATIVE ERRORS, BUT THE FAST RATE
C         OF CONVERGENCE OF SNSQ USUALLY AVOIDS THIS POSSIBILITY.
C         UNLESS HIGH PRECISION SOLUTIONS ARE REQUIRED, THE RECOMMENDED
C         VALUE FOR XTOL IS THE SQUARE ROOT OF THE MACHINE PRECISION.
C
C
C 5. UNSUCCESSFUL COMPLETION.
C
C       UNSUCCESSFUL TERMINATION OF SNSQ CAN BE DUE TO IMPROPER INPUT
C       PARAMETERS, ARITHMETIC INTERRUPTS, AN EXCESSIVE NUMBER OF FUNC-
C       TION EVALUATIONS, OR LACK OF GOOD PROGRESS.
C
C       IMPROPER INPUT PARAMETERS.  INFO IS SET TO 0 IF IOPT .LT .1,
C         OR IOPT .GT. 2, OR N .LE. 0, OR LDFJAC .LT. N, OR
C         XTOL .LT. 0.E0, OR MAXFEV .LE. 0, OR ML .LT. 0, OR MU .LT. 0,
C         OR FACTOR .LE. 0.E0, OR LR .LT. (N*(N+1))/2.
C
C       ARITHMETIC INTERRUPTS.  IF THESE INTERRUPTS OCCUR IN THE FCN
C         SUBROUTINE DURING AN EARLY STAGE OF THE COMPUTATION, THEY MAY
C         BE CAUSED BY AN UNACCEPTABLE CHOICE OF X BY SNSQ.  IN THIS
C         CASE, IT MAY BE POSSIBLE TO REMEDY THE SITUATION BY RERUNNING
C         SNSQ WITH A SMALLER VALUE OF FACTOR.
C
C       EXCESSIVE NUMBER OF FUNCTION EVALUATIONS.  A REASONABLE VALUE
C         FOR MAXFEV IS 100*(N+1) FOR IOPT=1 AND 200*(N+1) FOR IOPT=2.
C         IF THE NUMBER OF CALLS TO FCN REACHES MAXFEV, THEN THIS
C         INDICATES THAT THE ROUTINE IS CONVERGING VERY SLOWLY AS
C         MEASURED BY THE PROGRESS OF FVEC, AND INFO IS SET TO 2. THIS
C         SITUATION SHOULD BE UNUSUAL BECAUSE, AS INDICATED BELOW, LACK
C         OF GOOD PROGRESS IS USUALLY DIAGNOSED EARLIER BY SNSQ,
C         CAUSING TERMINATION WITH INFO = 4 OR INFO = 5.
C
C       LACK OF GOOD PROGRESS.  SNSQ SEARCHES FOR A ZERO OF THE SYSTEM
C         BY MINIMIZING THE SUM OF THE SQUARES OF THE FUNCTIONS.  IN SO
C         DOING, IT CAN BECOME TRAPPED IN A REGION WHERE THE MINIMUM
C         DOES NOT CORRESPOND TO A ZERO OF THE SYSTEM AND, IN THIS SITU-
C         ATION, THE ITERATION EVENTUALLY FAILS TO MAKE GOOD PROGRESS.
C         IN PARTICULAR, THIS WILL HAPPEN IF THE SYSTEM DOES NOT HAVE A
C         ZERO.  IF THE SYSTEM HAS A ZERO, RERUNNING SNSQ FROM A DIF-
C         FERENT STARTING POINT MAY BE HELPFUL.
C
C
C 6. CHARACTERISTICS OF THE ALGORITHM.
C
C       SNSQ IS A MODIFICATION OF THE POWELL HYBRID METHOD.  TWO OF ITS
C       MAIN CHARACTERISTICS INVOLVE THE CHOICE OF THE CORRECTION AS A
C       CONVEX COMBINATION OF THE NEWTON AND SCALED GRADIENT DIRECTIONS,
C       AND THE UPDATING OF THE JACOBIAN BY THE RANK-1 METHOD OF BROY-
C       DEN.  THE CHOICE OF THE CORRECTION GUARANTEES (UNDER REASONABLE
C       CONDITIONS) GLOBAL CONVERGENCE FOR STARTING POINTS FAR FROM THE
C       SOLUTION AND A FAST RATE OF CONVERGENCE.  THE JACOBIAN IS
C       CALCULATED AT THE STARTING POINT BY EITHER THE USER-SUPPLIED
C       SUBROUTINE OR A FORWARD-DIFFERENCE APPROXIMATION, BUT IT IS NOT
C       RECALCULATED UNTIL THE RANK-1 METHOD FAILS TO PRODUCE SATIS-
C       FACTORY PROGRESS.
C
C       TIMING.  THE TIME REQUIRED BY SNSQ TO SOLVE A GIVEN PROBLEM
C         DEPENDS ON N, THE BEHAVIOR OF THE FUNCTIONS, THE ACCURACY
C         REQUESTED, AND THE STARTING POINT.  THE NUMBER OF ARITHMETIC
C         OPERATIONS NEEDED BY SNSQ IS ABOUT 11.5*(N**2) TO PROCESS
C         EACH EVALUATION OF THE FUNCTIONS (CALL TO FCN) AND 1.3*(N**3)
C         TO PROCESS EACH EVALUATION OF THE JACOBIAN (CALL TO JAC,
C         IF IOPT = 1).  UNLESS FCN AND JAC CAN BE EVALUATED QUICKLY,
C         THE TIMING OF SNSQ WILL BE STRONGLY INFLUENCED BY THE TIME
C         SPENT IN FCN AND JAC.
C
C       STORAGE.  SNSQ REQUIRES (3*N**2 + 17*N)/2 SINGLE PRECISION
C         STORAGE LOCATIONS, IN ADDITION TO THE STORAGE REQUIRED BY THE
C         PROGRAM.  THERE ARE NO INTERNALLY DECLARED STORAGE ARRAYS.
C
C
C 7. EXAMPLE.
C
C       THE PROBLEM IS TO DETERMINE THE VALUES OF X(1), X(2), ..., X(9),
C       WHICH SOLVE THE SYSTEM OF TRIDIAGONAL EQUATIONS
C
C       (3-2*X(1))*X(1)           -2*X(2)                   = -1
C               -X(I-1) + (3-2*X(I))*X(I)         -2*X(I+1) = -1, I=2-8
C                                   -X(8) + (3-2*X(9))*X(9) = -1
C C     **********
C
C       PROGRAM TEST(INPUT,OUTPUT,TAPE6=OUTPUT)
C C
C C     DRIVER FOR SNSQ EXAMPLE.
C C
C       INTEGER J,IOPT,N,MAXFEV,ML,MU,MODE,NPRINT,INFO,NFEV,LDFJAC,LR,
C      *        NWRITE
C       REAL XTOL,EPSFCN,FACTOR,FNORM
C       REAL X(9),FVEC(9),DIAG(9),FJAC(9,9),R(45),QTF(9),
C      *     WA1(9),WA2(9),WA3(9),WA4(9)
C       REAL ENORM,R1MACH
C       EXTERNAL FCN
C       DATA NWRITE /6/
C C
C       IOPT = 2
C       N = 9
C C
C C     THE FOLLOWING STARTING VALUES PROVIDE A ROUGH SOLUTION.
C C
C       DO 10 J = 1, 9
C          X(J) = -1.E0
C    10    CONTINUE
C C
C       LDFJAC = 9
C       LR = 45
C C
C C     SET XTOL TO THE SQUARE ROOT OF THE MACHINE PRECISION.
C C     UNLESS HIGH PRECISION SOLUTIONS ARE REQUIRED,
C C     THIS IS THE RECOMMENDED SETTING.
C C
C       XTOL = SQRT(R1MACH(4))
C C
C       MAXFEV = 2000
C       ML = 1
C       MU = 1
C       EPSFCN = 0.E0
C       MODE = 2
C       DO 20 J = 1, 9
C          DIAG(J) = 1.E0
C    20    CONTINUE
C       FACTOR = 1.E2
C       NPRINT = 0
C C
C       CALL SNSQ(FCN,JAC,IOPT,N,X,FVEC,FJAC,LDFJAC,XTOL,MAXFEV,ML,MU,
C      *           EPSFCN,DIAG,MODE,FACTOR,NPRINT,INFO,NFEV,NJEV,
C      *           R,LR,QTF,WA1,WA2,WA3,WA4)
C       FNORM = ENORM(N,FVEC)
C       WRITE (NWRITE,1000) FNORM,NFEV,INFO,(X(J),J=1,N)
C       STOP
C  1000 FORMAT (5X,31H FINAL L2 NORM OF THE RESIDUALS,E15.7 //
C      *        5X,31H NUMBER OF FUNCTION EVALUATIONS,I10 //
C      *        5X,15H EXIT PARAMETER,16X,I10 //
C      *        5X,27H FINAL APPROXIMATE SOLUTION // (5X,3E15.7))
C       END
C       SUBROUTINE FCN(N,X,FVEC,IFLAG)
C       INTEGER N,IFLAG
C       REAL X(N),FVEC(N)
C       INTEGER K
C       REAL ONE,TEMP,TEMP1,TEMP2,THREE,TWO,ZERO
C       DATA ZERO,ONE,TWO,THREE /0.E0,1.E0,2.E0,3.E0/
C C
C       IF (IFLAG .NE. 0) GO TO 5
C C
C C     INSERT PRINT STATEMENTS HERE WHEN NPRINT IS POSITIVE.
C C
C       RETURN
C     5 CONTINUE
C       DO 10 K = 1, N
C          TEMP = (THREE - TWO*X(K))*X(K)
C          TEMP1 = ZERO
C          IF (K .NE. 1) TEMP1 = X(K-1)
C          TEMP2 = ZERO
C          IF (K .NE. N) TEMP2 = X(K+1)
C          FVEC(K) = TEMP - TEMP1 - TWO*TEMP2 + ONE
C    10    CONTINUE
C       RETURN
C       END
C
C       RESULTS OBTAINED WITH DIFFERENT COMPILERS OR MACHINES
C       MAY BE SLIGHTLY DIFFERENT.
C
C       FINAL L2 NORM OF THE RESIDUALS  0.1192636E-07
C
C       NUMBER OF FUNCTION EVALUATIONS        14
C
C       EXIT PARAMETER                         1
C
C       FINAL APPROXIMATE SOLUTION
C
C       -0.5706545E+00 -0.6816283E+00 -0.7017325E+00
C       -0.7042129E+00 -0.7013690E+00 -0.6918656E+00
C       -0.6657920E+00 -0.5960342E+00 -0.4164121E+00
C
C
C***REFERENCE(S)
C       POWELL, M. J. D.
C       A HYBRID METHOD FOR NONLINEAR EQUATIONS.
C       NUMERICAL METHODS FOR NONLINEAR ALGEBRAIC EQUATIONS,
C       P. RABINOWITZ, EDITOR.  GORDON AND BREACH, 1970.
C***ROUTINES CALLED  DOGLEG,ENORM,FDJAC1,QFORM,QRFAC,R1MACH,
C                    R1MPYQ,R1UPDT,XERROR
C***END PROLOGUE
      INTEGER IOPT,N,MAXFEV,ML,MU,MODE,NPRINT,INFO,NFEV,LDFJAC,LR,NJEV
      REAL XTOL,EPSFCN,FACTOR
      REAL X(N),FVEC(N),DIAG(N),FJAC(LDFJAC,N),R(LR),QTF(N),WA1(N),
     *     WA2(N),WA3(N),WA4(N)
      EXTERNAL FCN
      INTEGER I,IFLAG,ITER,J,JM1,L,NCFAIL,NCSUC,NSLOW1,NSLOW2
      INTEGER IWA(1)
      LOGICAL JEVAL,SING
      REAL ACTRED,DELTA,EPSMCH,FNORM,FNORM1,ONE,PNORM,PRERED,P1,P5,
     *     P001,P0001,RATIO,SUM,TEMP,XNORM,ZERO
      REAL R1MACH,ENORM
      DATA ONE,P1,P5,P001,P0001,ZERO
     *     /1.0E0,1.0E-1,5.0E-1,1.0E-3,1.0E-4,0.0E0/
C
C***FIRST EXECUTABLE STATEMENT    SNSQ
      EPSMCH = R1MACH(4)
C
      INFO = 0
      IFLAG = 0
      NFEV = 0
      NJEV = 0
C
C     CHECK THE INPUT PARAMETERS FOR ERRORS.
C
      IF (IOPT .LT. 1 .OR. IOPT .GT. 2 .OR.
     *    N .LE. 0 .OR. XTOL .LT. ZERO .OR. MAXFEV .LE. 0
     *    .OR. ML .LT. 0 .OR. MU .LT. 0 .OR. FACTOR .LE. ZERO
     *    .OR. LDFJAC .LT. N .OR. LR .LT. (N*(N + 1))/2) GO TO 300
      IF (MODE .NE. 2) GO TO 20
      DO 10 J = 1, N
         IF (DIAG(J) .LE. ZERO) GO TO 300
   10    CONTINUE
   20 CONTINUE
C
C     EVALUATE THE FUNCTION AT THE STARTING POINT
C     AND CALCULATE ITS NORM.
C
      IFLAG = 1
      CALL FCN(N,X,FVEC,IFLAG)
      NFEV = 1
      IF (IFLAG .LT. 0) GO TO 300
      FNORM = ENORM(N,FVEC)
C
C     INITIALIZE ITERATION COUNTER AND MONITORS.
C
      ITER = 1
      NCSUC = 0
      NCFAIL = 0
      NSLOW1 = 0
      NSLOW2 = 0
C
C     BEGINNING OF THE OUTER LOOP.
C
   30 CONTINUE
         JEVAL = .TRUE.
C
C        CALCULATE THE JACOBIAN MATRIX.
C
         IF (IOPT .EQ. 2) GO TO 31
C
C        USER SUPPLIES JACOBIAN
C
            CALL JAC(N,X,FVEC,FJAC,LDFJAC,IFLAG)
            NJEV = NJEV+1
            GO TO 32
C
C        CODE APPROXIMATES THE JACOBIAN
C
   31       IFLAG = 2
            CALL FDJAC1(FCN,N,X,FVEC,FJAC,LDFJAC,IFLAG,ML,MU,EPSFCN,WA1,
     *               WA2)
            NFEV = NFEV + MIN0(ML+MU+1,N)
C
   32    IF (IFLAG .LT. 0) GO TO 300
C
C        COMPUTE THE QR FACTORIZATION OF THE JACOBIAN.
C
         CALL QRFAC(N,N,FJAC,LDFJAC,.FALSE.,IWA,1,WA1,WA2,WA3)
C
C        ON THE FIRST ITERATION AND IF MODE IS 1, SCALE ACCORDING
C        TO THE NORMS OF THE COLUMNS OF THE INITIAL JACOBIAN.
C
         IF (ITER .NE. 1) GO TO 70
         IF (MODE .EQ. 2) GO TO 50
         DO 40 J = 1, N
            DIAG(J) = WA2(J)
            IF (WA2(J) .EQ. ZERO) DIAG(J) = ONE
   40       CONTINUE
   50    CONTINUE
C
C        ON THE FIRST ITERATION, CALCULATE THE NORM OF THE SCALED X
C        AND INITIALIZE THE STEP BOUND DELTA.
C
         DO 60 J = 1, N
            WA3(J) = DIAG(J)*X(J)
   60       CONTINUE
         XNORM = ENORM(N,WA3)
         DELTA = FACTOR*XNORM
         IF (DELTA .EQ. ZERO) DELTA = FACTOR
   70    CONTINUE
C
C        FORM (Q TRANSPOSE)*FVEC AND STORE IN QTF.
C
         DO 80 I = 1, N
            QTF(I) = FVEC(I)
   80       CONTINUE
         DO 120 J = 1, N
            IF (FJAC(J,J) .EQ. ZERO) GO TO 110
            SUM = ZERO
            DO 90 I = J, N
               SUM = SUM + FJAC(I,J)*QTF(I)
   90          CONTINUE
            TEMP = -SUM/FJAC(J,J)
            DO 100 I = J, N
               QTF(I) = QTF(I) + FJAC(I,J)*TEMP
  100          CONTINUE
  110       CONTINUE
  120       CONTINUE
C
C        COPY THE TRIANGULAR FACTOR OF THE QR FACTORIZATION INTO R.
C
         SING = .FALSE.
         DO 150 J = 1, N
            L = J
            JM1 = J - 1
            IF (JM1 .LT. 1) GO TO 140
            DO 130 I = 1, JM1
               R(L) = FJAC(I,J)
               L = L + N - I
  130          CONTINUE
  140       CONTINUE
            R(L) = WA1(J)
            IF (WA1(J) .EQ. ZERO) SING = .TRUE.
  150       CONTINUE
C
C        ACCUMULATE THE ORTHOGONAL FACTOR IN FJAC.
C
         CALL QFORM(N,N,FJAC,LDFJAC,WA1)
C
C        RESCALE IF NECESSARY.
C
         IF (MODE .EQ. 2) GO TO 170
         DO 160 J = 1, N
            DIAG(J) = AMAX1(DIAG(J),WA2(J))
  160       CONTINUE
  170    CONTINUE
C
C        BEGINNING OF THE INNER LOOP.
C
  180    CONTINUE
C
C           IF REQUESTED, CALL FCN TO ENABLE PRINTING OF ITERATES.
C
            IF (NPRINT .LE. 0) GO TO 190
            IFLAG = 0
            IF (MOD(ITER-1,NPRINT) .EQ. 0) CALL FCN(N,X,FVEC,IFLAG)
            IF (IFLAG .LT. 0) GO TO 300
  190       CONTINUE
C
C           DETERMINE THE DIRECTION P.
C
            CALL DOGLEG(N,R,LR,DIAG,QTF,DELTA,WA1,WA2,WA3)
C
C           STORE THE DIRECTION P AND X + P. CALCULATE THE NORM OF P.
C
            DO 200 J = 1, N
               WA1(J) = -WA1(J)
               WA2(J) = X(J) + WA1(J)
               WA3(J) = DIAG(J)*WA1(J)
  200          CONTINUE
            PNORM = ENORM(N,WA3)
C
C           ON THE FIRST ITERATION, ADJUST THE INITIAL STEP BOUND.
C
            IF (ITER .EQ. 1) DELTA = AMIN1(DELTA,PNORM)
C
C           EVALUATE THE FUNCTION AT X + P AND CALCULATE ITS NORM.
C
            IFLAG = 1
            CALL FCN(N,WA2,WA4,IFLAG)
            NFEV = NFEV + 1
            IF (IFLAG .LT. 0) GO TO 300
            FNORM1 = ENORM(N,WA4)
C
C           COMPUTE THE SCALED ACTUAL REDUCTION.
C
            ACTRED = -ONE
            IF (FNORM1 .LT. FNORM) ACTRED = ONE - (FNORM1/FNORM)**2
C
C           COMPUTE THE SCALED PREDICTED REDUCTION.
C
            L = 1
            DO 220 I = 1, N
               SUM = ZERO
               DO 210 J = I, N
                  SUM = SUM + R(L)*WA1(J)
                  L = L + 1
  210             CONTINUE
               WA3(I) = QTF(I) + SUM
  220          CONTINUE
            TEMP = ENORM(N,WA3)
            PRERED = ZERO
            IF (TEMP .LT. FNORM) PRERED = ONE - (TEMP/FNORM)**2
C
C           COMPUTE THE RATIO OF THE ACTUAL TO THE PREDICTED
C           REDUCTION.
C
            RATIO = ZERO
            IF (PRERED .GT. ZERO) RATIO = ACTRED/PRERED
C
C           UPDATE THE STEP BOUND.
C
            IF (RATIO .GE. P1) GO TO 230
               NCSUC = 0
               NCFAIL = NCFAIL + 1
               DELTA = P5*DELTA
               GO TO 240
  230       CONTINUE
               NCFAIL = 0
               NCSUC = NCSUC + 1
               IF (RATIO .GE. P5 .OR. NCSUC .GT. 1)
     *            DELTA = AMAX1(DELTA,PNORM/P5)
               IF (ABS(RATIO-ONE) .LE. P1) DELTA = PNORM/P5
  240       CONTINUE
C
C           TEST FOR SUCCESSFUL ITERATION.
C
            IF (RATIO .LT. P0001) GO TO 260
C
C           SUCCESSFUL ITERATION. UPDATE X, FVEC, AND THEIR NORMS.
C
            DO 250 J = 1, N
               X(J) = WA2(J)
               WA2(J) = DIAG(J)*X(J)
               FVEC(J) = WA4(J)
  250          CONTINUE
            XNORM = ENORM(N,WA2)
            FNORM = FNORM1
            ITER = ITER + 1
  260       CONTINUE
C
C           DETERMINE THE PROGRESS OF THE ITERATION.
C
            NSLOW1 = NSLOW1 + 1
            IF (ACTRED .GE. P001) NSLOW1 = 0
            IF (JEVAL) NSLOW2 = NSLOW2 + 1
            IF (ACTRED .GE. P1) NSLOW2 = 0
C
C           TEST FOR CONVERGENCE.
C
            IF (DELTA .LE. XTOL*XNORM .OR. FNORM .EQ. ZERO) INFO = 1
            IF (INFO .NE. 0) GO TO 300
C
C           TESTS FOR TERMINATION AND STRINGENT TOLERANCES.
C
            IF (NFEV .GE. MAXFEV) INFO = 2
            IF (P1*AMAX1(P1*DELTA,PNORM) .LE. EPSMCH*XNORM) INFO = 3
            IF (NSLOW2 .EQ. 5) INFO = 4
            IF (NSLOW1 .EQ. 10) INFO = 5
            IF (INFO .NE. 0) GO TO 300
C
C           CRITERION FOR RECALCULATING JACOBIAN
C
            IF (NCFAIL .EQ. 2) GO TO 290
C
C           CALCULATE THE RANK ONE MODIFICATION TO THE JACOBIAN
C           AND UPDATE QTF IF NECESSARY.
C
            DO 280 J = 1, N
               SUM = ZERO
               DO 270 I = 1, N
                  SUM = SUM + FJAC(I,J)*WA4(I)
  270             CONTINUE
               WA2(J) = (SUM - WA3(J))/PNORM
               WA1(J) = DIAG(J)*((DIAG(J)*WA1(J))/PNORM)
               IF (RATIO .GE. P0001) QTF(J) = SUM
  280          CONTINUE
C
C           COMPUTE THE QR FACTORIZATION OF THE UPDATED JACOBIAN.
C
            CALL R1UPDT(N,N,R,LR,WA1,WA2,WA3,SING)
            CALL R1MPYQ(N,N,FJAC,LDFJAC,WA2,WA3)
            CALL R1MPYQ(1,N,QTF,1,WA2,WA3)
C
C           END OF THE INNER LOOP.
C
            JEVAL = .FALSE.
            GO TO 180
  290    CONTINUE
C
C        END OF THE OUTER LOOP.
C
         GO TO 30
  300 CONTINUE
C
C     TERMINATION, EITHER NORMAL OR USER IMPOSED.
C
      IF (IFLAG .LT. 0) INFO = IFLAG
      IFLAG = 0
      IF (NPRINT .GT. 0) CALL FCN(N,X,FVEC,IFLAG)
      IF (INFO .LT. 0) CALL XERROR('SNSQ   -- EXECUTION TERMINATED BECAU
     *SE USER SET IFLAG NEGATIVE.',63,1,1)
      IF (INFO .EQ. 0) CALL XERROR('SNSQ   -- INVALID INPUT PARAMETER. 1
     *',34,2,1)
      IF (INFO .EQ. 2) CALL XERROR('SNSQ   -- TOO MANY FUNCTION EVALUATI
     *ONS.',40,9,1)
c      IF (INFO .EQ. 3) CALL XERROR('SNSQ   -- XTOL TOO SMALL. NO FURTHER
c     * IMPROVEMENT POSSIBLE.',58,3,1)
c      IF (INFO .GT. 4) CALL XERROR('SNSQ   -- ITERATION NOT MAKING GOOD 
c     *PROGRESS.',45,1,1)
      RETURN
C
C     LAST CARD OF SUBROUTINE SNSQ.
C
      END
