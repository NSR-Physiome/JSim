// JSim generated model JS100imp_reuse
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100imp_reuse model
public class JS100imp_reuse extends RTModel {

    // variable declarations
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealNVar JSa;
    public RTRealNVar JSb;
    public RTRealNVar JSb__Dt;
     
    // F&P declarations
    
    // solver declarations
    public Fzero2Problem__0t__a fzero2problem__0t__a;
    public ODE1Problem__b ode1problem__b;
     
    // RT model constructor
    public JS100imp_reuse(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100imp_reuse", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSa = new RTRealNVar(this, "a","dimensionless",3,new RTRealDomain[] {JSt});
        JSb = new RTRealNVar(this, "b","dimensionless",3,new RTRealDomain[] {JSt});
        JSb__Dt = new RTRealNVar(this, "b:t","dimensionless",3,new RTRealDomain[] {JSt});
         
        // input defaults
        JSt__min.setDefault("0");
        JSt__max.setDefault("1");
        JSt__delta.setDefault("1");
        
        // F&P initialization
        
        // solver instantiation
        fzero2problem__0t__a = new Fzero2Problem__0t__a(this);
        ode1problem__b = new ODE1Problem__b(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // Implicit block solving [a]
    public class Fzero2Problem__0t__a extends Fzero2Problem {
        public Fzero2Problem__0t__a(RTModel m) throws Xcept {
            super(m, "Fzero2Problem__0t__a",1);
        }
        public void setBounds(RTContext ctxt,double[] vmin,double[] vmax,double[] vguess) throws Xcept {
            ((XContext) ctxt).setBounds__0t__a(vmin,vmax,vguess);
        }
        public void calcZero(RTContext ctxt,double[] val,double[] zero) throws Xcept {
            ((XContext) ctxt).calcZero__0t__a(val,zero);
            ncallbacks++;
        }
        public void export(RTContext ctxt,double[] val) throws Xcept {
            ((XContext) ctxt).export__0t__a(val);
        }
    }
     
    // ODE problem solving [b]
    public class ODE1Problem__b extends ODE1Problem {
        public ODE1Problem__b(RTModel m) throws Xcept {
            super(m, "ODE1Problem__b");
            setup(JSt, new RTRealNVar[] {JSb});
        }
        public void evaluate(RTContext ctxt, double t, double[] u, double[] udot) throws Xcept {
            ((XContext) ctxt).evaluate__b(t, u, udot);
            interruptCheck(ctxt, t, udot);
            ncallbacks++;
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js2a;
        private double js2t;
        private double js2b;
        private double js2b__Dt;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            setLHBC(JSt);
            fzero2problem__0t__a.solve(this);
            setLHBC(JSt);
            set(JSb,realVal(JSa));
            startPhase(3, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__0t();
            startPhase(4, null);
        }
        
        // ctxt loop iteration for domain t
        public void loop__0t() throws Xcept {
            set(JSb__Dt,realVal(JSb));
            fzero2problem__0t__a.solve(this);
            ode1problem__b.solve(this);
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt methods for Fzero2Problem__0t__a
        public void setBounds__0t__a(double[] vmin,double[] vmax,double[] vguess) throws Xcept {
        }
        public void calcZero__0t__a(double[] vals,double[] zeroes) throws Xcept {
            js2a=vals[0];
            zeroes[0]=(((NatMath.pow(js2a,2)+js2a)-6)-realVal(JSt));
        }
        public void export__0t__a(double[] vals) throws Xcept {
            set(JSa,vals[0]);
        }
        // ctxt ODE evaluate
        public void evaluate__b(double t,double[] u,double[] udot) throws Xcept {
            js2t = t;
            js2b = u[0];
            js2b__Dt = js2b;
            udot[0] = js2b__Dt;
        }
        
        // ctxt methods for F&P
    }
     
}


