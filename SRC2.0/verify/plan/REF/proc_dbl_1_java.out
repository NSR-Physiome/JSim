// JSim generated model JS100proc_dbl_1
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100proc_dbl_1 model
public class JS100proc_dbl_1 extends RTModel {

    // variable declarations
    public RTRealNVar JSu;
    public RTRealNVar JSv;
     
    // F&P declarations
    public RTXFunc JSdouble;
    public RTXFuncCall JSdouble__1;
    
    // solver declarations
     
    // RT model constructor
    public JS100proc_dbl_1(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100proc_dbl_1", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSu = new RTRealNVar(this, "u","dimensionless",1,null);
        JSv = new RTRealNVar(this, "v","dimensionless",2,null);
         
        // input defaults
        JSu.setDefault("1");
        
        // F&P initialization
        JSdouble = new JSdouble__class(this, "double");
        JSdouble__1 = new RTXFuncCall(JSdouble);
        new RTXFuncArg(JSdouble__1, new RTRealDomain[] {}, JSu, true);
        new RTXFuncArg(JSdouble__1, new RTRealDomain[] {}, JSv, false);
        
        // solver instantiation
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        return true;
    }
    
    // JSdouble__class definition
    public static class JSdouble__class extends RTXFunc {
        public JSdouble__class(RTModel m, String n) throws Xcept { super(m, n); }
        public void voidCalculate(RealNData[] jsargs) throws Xcept {
            RealNData a = jsargs[0];
            RealNData b = jsargs[1];
            // copy maincode here
            
	    double aval = a.realVal();
	    b.set(aval*2);
	
            
        }
    }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0u;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0u = realVal(JSu);
            JSdouble__1.voidVal(this);
        }
        
        // ctxt methods for F&P
        protected double JSdouble__1_0_getRealVal() throws Xcept {
            return realVal(JSu);
        }
        protected double JSdouble__1_1_getRealVal() throws Xcept {
            return realVal(JSv);
        }
    }
     
}


