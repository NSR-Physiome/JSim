==== Planner Log ====
Plan options=[maxBuildTime=120, maxImplicitBlock=10, initNaN=false, abortNaN=false, traceNaN=false, traceVars=, ignoreAllOverspec=false, ignoreAllUnderspec=false, splitBlocks=false, parallelize=false]
Loading Variables
  add var: realDomain t
  add var: real t.min
  add var: real t.max
  add var: int t.ct
  add var: real t.delta
  add var: realDomain x
  add var: real x.min
  add var: real x.max
  add var: int x.ct
  add var: real x.delta
  add var: real u(t,x)
  add var: private real sum__call0(t)
  add var: private real sum__call1
  add var: real w
Loading Constraints
  t.min=1 :: [t.min]
  t.max=3 :: [t.max]
  t.delta=1 :: [t.delta]
  x.min=1 :: [x.min]
  x.max=2 :: [x.max]
  x.delta=1 :: [x.delta]
  u=(t+x) :: [u, t, x]
  sum__call0=sum.1[u@x] :: [sum__call0, u(x.min)*, u(x.max)*]
  sum__call1=sum.2[sum(x,x.min,x.max,u)@t] :: [sum__call1, sum__call0(t.min)*, sum__call0(t.max)*]
  w=sum(t,t.min,t.max,sum(x,x.min,x.max,u)) :: [w, sum__call1]
Input      phase completed with 0 errors, 0 warnings.

Toolbox phase starting ...
  add tool: domain t
  add tool: domain x
Toolbox phase - cycle 1:
  check eqn: t.min=1; [t.min]
  add tool: t.min=1
  check eqn: t.max=3; [t.max]
  add tool: t.max=3
  check eqn: t.delta=1; [t.delta]
  add tool: t.delta=1
  add tool: t.ct=(t.max-t.min)/t.delta+1.5
  check eqn: x.min=1; [x.min]
  add tool: x.min=1
  check eqn: x.max=2; [x.max]
  add tool: x.max=2
  check eqn: x.delta=1; [x.delta]
  add tool: x.delta=1
  add tool: x.ct=(x.max-x.min)/x.delta+1.5
  check eqn: u=(t+x); [u]
  add tool: u=t+x
  check eqn: sum__call0=sum.1[u@x]; [sum__call0]
  add tool: sum__call0=sum.1[u@x]
  check eqn: sum__call1=sum.2[sum(x,x.min,x.max,u)@t]; [sum__call1]
  add tool: sum__call1=sum.2[sum(x,x.min,x.max,u)@t]
  check eqn: w=sum(t,t.min,t.max,sum(x,x.min,x.max,u)); [w]
  add tool: w=sum(t,t.min,t.max,sum(x,x.min,x.max,u))
Toolbox phase - all cycles completed
Toolbox    phase completed with 0 errors, 0 warnings.

Sequencing phase starting ...
Tools to sequence:
  w=sum(t,t.min,t.max,sum(x,x.min,x.max,u)) :: [w]<<[sum__call1]
  sum__call1=sum.2[sum(x,x.min,x.max,u)@t] :: [sum__call1]<<[sum__call0(t.min)*, sum__call0(t.max)*]
  @t sum__call0=sum.1[u@x] :: [sum__call0]<<[u(x.min)*, u(x.max)*]
  @t@x u=t+x :: [u]<<[t, x]
  x.delta=1 :: [x.delta]<<[]
  x.ct=(x.max-x.min)/x.delta+1.5 :: [x.ct]<<[x.max, x.min, x.delta]
  x.max=2 :: [x.max]<<[]
  x.min=1 :: [x.min]<<[]
  domain x :: [x]<<[x.min, x.max, x.ct, x.delta]
  t.delta=1 :: [t.delta]<<[]
  t.ct=(t.max-t.min)/t.delta+1.5 :: [t.ct]<<[t.max, t.min, t.delta]
  t.max=3 :: [t.max]<<[]
  t.min=1 :: [t.min]<<[]
  domain t :: [t]<<[t.min, t.max, t.ct, t.delta]
Events to seqence:
Relations to sequence:
Creating vuTools map ...
Adding reuse & query tools ...
  adding reuse tool: when (x=x.min) u=t+x [u(x.min)]<<[t, x(min)]
  adding reuse tool: when (t=t.min) sum__call0=sum.1[u@x] [sum__call0(t.min)]<<[u(t.min,x.min)*, u(t.min,x.max)*]
  adding query tool: query [u(x.max)*]<<[u]
  adding query tool: query [sum__call0(t.max)*]<<[sum__call0]
  adding query tool: query [x(min)]<<[x]
  adding query tool: query [u(t.min,x.min)*]<<[u]
  adding query tool: query [u(t.min,x.max)*]<<[u]
Creating MainGraph ...
loopOrder=[t, x]
  addNode w seqLoops=() phase=main fft=null
  addNode sum__call1 seqLoops=() phase=main fft=null
  addNode sum__call0 seqLoops=(t) phase=t#1 fft=null
  addNode u seqLoops=(t,x) phase=t#1+x#1 fft=null
  addNode x.delta seqLoops=() phase=main fft=null
  addNode x.ct seqLoops=() phase=main fft=null
  addNode x.max seqLoops=() phase=main fft=null
  addNode x.min seqLoops=() phase=main fft=null
  addNode x seqLoops=() phase=main fft=null
  addNode t.delta seqLoops=() phase=main fft=null
  addNode t.ct seqLoops=() phase=main fft=null
  addNode t.max seqLoops=() phase=main fft=null
  addNode t.min seqLoops=() phase=main fft=null
  addNode t seqLoops=() phase=main fft=null
  addNode u(x.min) seqLoops=(t) phase=t#1 fft=null
  addNode sum__call0(t.min) seqLoops=() phase=main fft=null
  addNode u(x.max) seqLoops=(t) phase=t#1 fft=null
  addNode sum__call0(t.max) seqLoops=() phase=main fft=null
  addNode x(min) seqLoops=() phase=main fft=null
  addNode u(t.min,x.min) seqLoops=() phase=main fft=null
  addNode u(t.min,x.max) seqLoops=() phase=main fft=null
Saving graph pullfinder
Building mainline block ...
Mainline block graph:
building block for phase main
  adding x.delta=1 to main
  adding x.max=2 to main
  adding x.min=1 to main
  adding t.delta=1 to main
  adding t.max=3 to main
  adding t.min=1 to main
  adding x.ct=(x.max-x.min)/x.delta+1.5 to main
  adding domain x to main
  adding t.ct=(t.max-t.min)/t.delta+1.5 to main
  adding domain t to main
  adding query [x(min)] to main
  subphase t#1 entryEdge=null
building block for phase t#1
  adding when (x=x.min) u=t+x to loop-t
  subphase t#1+x#1 entryEdge=null
building block for phase t#1+x#1
  adding u=t+x to loop-x
  adding loop-x to loop-t
  adding query [u(x.max)*] to loop-t
  adding sum__call0=sum.1[u@x] to loop-t
  adding loop-t to main
  adding query [sum__call0(t.max)*] to main
  adding query [u(t.min,x.min)*] to main
  adding query [u(t.min,x.max)*] to main
  adding when (t=t.min) sum__call0=sum.1[u@x] to main
  adding sum__call1=sum.2[sum(x,x.min,x.max,u)@t] to main
  adding w=sum(t,t.min,t.max,sum(x,x.min,x.max,u)) to main
Sequencing phase completed with 0 errors, 0 warnings.

==== Main Calculation Block ====
main
  x.delta=1
  x.max=2
  x.min=1
  t.delta=1
  t.max=3
  t.min=1
  x.ct=(x.max-x.min)/x.delta+1.5
  domain x
  t.ct=(t.max-t.min)/t.delta+1.5
  domain t
  query [x(min)]
  loop-t
    when (x=x.min) u=t+x
    loop-x
      u=t+x
    query [u(x.max)*]
    sum__call0=sum.1[u@x]
  query [sum__call0(t.max)*]
  query [u(t.min,x.min)*]
  query [u(t.min,x.max)*]
  when (t=t.min) sum__call0=sum.1[u@x]
  sum__call1=sum.2[sum(x,x.min,x.max,u)@t]
  w=sum(t,t.min,t.max,sum(x,x.min,x.max,u))

