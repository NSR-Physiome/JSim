// JSim generated model JS100proc_when
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100proc_when model
public class JS100proc_when extends RTModel {

    // variable declarations
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealNVar JSu;
    public RTRealNVar JSv;
    public RTRealNVar JSv__Dt;
     
    // F&P declarations
    public RTXFunc JSdouble;
    public RTXFuncCall JSdouble__1;
    
    // solver declarations
    public ODE1Problem__v ode1problem__v;
     
    // RT model constructor
    public JS100proc_when(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100proc_when", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSu = new RTRealNVar(this, "u","dimensionless",3,new RTRealDomain[] {JSt});
        JSv = new RTRealNVar(this, "v","dimensionless",3,new RTRealDomain[] {JSt});
        JSv__Dt = new RTRealNVar(this, "v:t","dimensionless",3,new RTRealDomain[] {JSt});
         
        // input defaults
        JSt__min.setDefault("0");
        JSt__max.setDefault("3");
        JSt__delta.setDefault("1");
        
        // F&P initialization
        JSdouble = new JSdouble__class(this, "double");
        JSdouble__1 = new RTXFuncCall(JSdouble);
        new RTXFuncArg(JSdouble__1, new RTRealDomain[] {}, JSu, true);
        new RTXFuncArg(JSdouble__1, new RTRealDomain[] {}, JSv, false);
        
        // solver instantiation
        ode1problem__v = new ODE1Problem__v(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // JSdouble__class definition
    public static class JSdouble__class extends RTXFunc {
        public JSdouble__class(RTModel m, String n) throws Xcept { super(m, n); }
        public void voidCalculate(RealNData[] jsargs) throws Xcept {
            RealNData a = jsargs[0];
            RealNData b = jsargs[1];
            // copy maincode here
            
	    double aval = a.realVal();
	    b.set(aval*2);
	
            
        }
    }
    
    // ODE problem solving [v]
    public class ODE1Problem__v extends ODE1Problem {
        public ODE1Problem__v(RTModel m) throws Xcept {
            super(m, "ODE1Problem__v");
            setup(JSt, new RTRealNVar[] {JSv});
        }
        public void evaluate(RTContext ctxt, double t, double[] u, double[] udot) throws Xcept {
            ((XContext) ctxt).evaluate__v(t, u, udot);
            interruptCheck(ctxt, t, udot);
            ncallbacks++;
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js2t;
        private double js2v;
        private double js2v__Dt;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            setLHBC(JSt);
            set(JSu,(realVal(JSt)+1));
            setLHBC(JSt);
            JSdouble__1.voidVal(this);
            startPhase(3, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__0t();
            startPhase(4, null);
        }
        
        // ctxt loop iteration for domain t
        public void loop__0t() throws Xcept {
            set(JSv__Dt,(realVal(JSv)*(-1)));
            set(JSu,(realVal(JSt)+1));
            ode1problem__v.solve(this);
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt ODE evaluate
        public void evaluate__v(double t,double[] u,double[] udot) throws Xcept {
            js2t = t;
            js2v = u[0];
            js2v__Dt = (js2v*(-1));
            udot[0] = js2v__Dt;
        }
        
        // ctxt methods for F&P
        protected double JSdouble__1_0_getRealVal() throws Xcept {
            return realVal(JSu);
        }
        protected double JSdouble__1_1_getRealVal() throws Xcept {
            return realVal(JSv);
        }
    }
     
}


