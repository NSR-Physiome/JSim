// JSim generated model JS100ode_nparallel
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100ode_nparallel model
public class JS100ode_nparallel extends RTModel {

    // variable declarations
    public RTIntNVar JSn;
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealDomain JSx;
    public RTRealNVar JSx__min;
    public RTRealNVar JSx__max;
    public RTIntNVar JSx__ct;
    public RTRealNVar JSx__delta;
    public RTRealNVar JSuIn;
    public RTRealNVar JSu;
    public RTRealNVar JSk;
    public RTRealNVar JSsum__call0;
    public RTRealNVar JSuOut;
    public RTRealNVar JSu__Dt;
     
    // F&P declarations
    public RTXFunc JSsum;
    public RTXFuncCall JSsum__1;
    
    // solver declarations
    public ODE1Problem__u ode1problem__u;
     
    // RT model constructor
    public JS100ode_nparallel(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100ode_nparallel", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSn = new RTIntNVar(this, "n","dimensionless",1,null);
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSx__min = new RTRealNVar(this, "x.min","dimensionless",1,null);
        JSx__max = new RTRealNVar(this, "x.max","dimensionless",2,null);
        JSx__ct = new RTIntNVar(this, "x.ct","dimensionless",2,null);
        JSx__delta = new RTRealNVar(this, "x.delta","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSx = new RTRealDomain(this, "x","dimensionless",2,JSx__min,JSx__max,JSx__delta,JSx__ct);
        JSuIn = new RTRealNVar(this, "uIn","dimensionless",5,new RTRealDomain[] {JSt});
        JSu = new RTRealNVar(this, "u","dimensionless",5,new RTRealDomain[] {JSt,JSx});
        JSk = new RTRealNVar(this, "k","dimensionless",3,new RTRealDomain[] {JSx});
        JSsum__call0 = new RTRealNVar(this, "sum__call0","dimensionless",5,new RTRealDomain[] {JSt});
        JSsum__call0.setPrivate();
        JSuOut = new RTRealNVar(this, "uOut","dimensionless",5,new RTRealDomain[] {JSt});
        JSu__Dt = new RTRealNVar(this, "u:t","dimensionless",5,new RTRealDomain[] {JSt,JSx});
         
        // input defaults
        JSn.setDefault("3");
        JSt__min.setDefault("0");
        JSt__max.setDefault("3");
        JSt__delta.setDefault(".25");
        JSx__min.setDefault("1");
        JSx__delta.setDefault("1");
        
        // F&P initialization
        JSsum = new JSim.jruntime.RTXSum(this, "sum");
        JSsum__1 = new RTXFuncCall(JSsum);
        new RTXFuncArg(JSsum__1, new RTRealDomain[] {JSx}, JSu, true);
        
        // solver instantiation
        ode1problem__u = new ODE1Problem__u(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // ODE problem solving [u]
    public class ODE1Problem__u extends ODE1Problem {
        public ODE1Problem__u(RTModel m) throws Xcept {
            super(m, "ODE1Problem__u");
            setup(JSt, new RTRealNVar[] {JSu});
        }
        public void evaluate(RTContext ctxt, double t, double[] u, double[] udot) throws Xcept {
            ((XContext) ctxt).evaluate__u(t, u, udot);
            interruptCheck(ctxt, t, udot);
            ncallbacks++;
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0n;
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js0x__min;
        private double js0x__delta;
        private double js3t;
        private double js3u;
        private double js3u__Dt;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0x__delta = realVal(JSx__delta);
            js0x__min = realVal(JSx__min);
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            js0n = realVal(JSn);
            set(JSx__max,js0n);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            set(JSx__ct,(((realVal(JSx__max)-js0x__min)/js0x__delta)+1.5));
            set(JSx__max,(js0x__min+(js0x__delta*(realVal(JSx__ct)-1))));
            setDomain(JSx);
            setLHBC(JSt);
            set(JSuIn,realVal(JSt));
            startPhase(3, JSx);
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__0x();
            startPhase(4, null);
            startPhase(5, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__1t();
            startPhase(6, null);
        }
        
        // ctxt loop iteration for domain x
        public void loop__0x() throws Xcept {
            set(JSk,realVal(JSx));
            setLHBC(JSt);
            set(JSu,realVal(JSuIn));
            interruptCheck();
            updatePhase(JSx);
        }
        
        // ctxt loop iteration for domain t
        public void loop__1t() throws Xcept {
            set(JSuIn,realVal(JSt));
            set(JSsum__call0,JSsum__1.realVal(this));
            set(JSuOut,realVal(JSsum__call0));
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__1t__0x();
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt loop iteration for domain x
        public void loop__1t__0x() throws Xcept {
            set(JSu__Dt,((realVal(JSk)*realVal(JSu))*(-1)));
            ode1problem__u.solve(this);
            interruptCheck();
        }
        
        // ctxt ODE evaluate
        public void evaluate__u(double t,double[] u,double[] udot) throws Xcept {
            js3t = t;
            js3u = u[0];
            js3u__Dt = ((realVal(JSk)*js3u)*(-1));
            udot[0] = js3u__Dt;
        }
        
        // ctxt methods for F&P
        protected double JSsum__1_0_getRealVal() throws Xcept {
            return realVal(JSu);
        }
    }
     
}


