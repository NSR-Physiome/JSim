// JSim generated model JS100summ_new
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100summ_new model
public class JS100summ_new extends RTModel {

    // variable declarations
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealNVar JSu;
    public RTRealNVar JSsum__call0;
    public RTRealNVar JSw;
     
    // F&P declarations
    public RTXFunc JSsum;
    public RTXFuncCall JSsum__1;
    
    // solver declarations
     
    // RT model constructor
    public JS100summ_new(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100summ_new", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSsum__call0 = new RTRealNVar(this, "sum__call0","dimensionless",4,null);
        JSsum__call0.setPrivate();
        JSw = new RTRealNVar(this, "w","dimensionless",4,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSu = new RTRealNVar(this, "u","dimensionless",3,new RTRealDomain[] {JSt});
         
        // input defaults
        JSt__min.setDefault("0");
        JSt__max.setDefault("6");
        JSt__delta.setDefault("1");
        
        // F&P initialization
        JSsum = new JSim.jruntime.RTXSum(this, "sum");
        JSsum__1 = new RTXFuncCall(JSsum);
        new RTXFuncArg(JSsum__1, new RTRealDomain[] {JSt}, JSu, true);
        
        // solver instantiation
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        String xname = x.name();
        if (xname.equals("t")) return false;
        return true;
    }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            setLHBC(JSt);
            set(JSu,(realVal(JSt)*realVal(JSt)));
            startPhase(3, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__0t();
            startPhase(4, null);
            set(JSsum__call0,JSsum__1.realVal(this));
            set(JSw,realVal(JSsum__call0));
        }
        
        // ctxt loop iteration for domain t
        public void loop__0t() throws Xcept {
            set(JSu,(realVal(JSt)*realVal(JSt)));
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt methods for F&P
        protected double JSsum__1_0_getRealVal() throws Xcept {
            return realVal(JSu);
        }
    }
     
}


