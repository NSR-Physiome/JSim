==== Planner Log ====
Plan options=[maxBuildTime=120, maxImplicitBlock=10, initNaN=false, abortNaN=false, traceNaN=false, traceVars=, ignoreAllOverspec=false, ignoreAllUnderspec=false]
Loading Variables
  add var: realDomain t
  add var: real t.min
  add var: real t.max
  add var: int t.ct
  add var: real t.delta
  add var: realDomain n
  add var: real n.min
  add var: real n.max
  add var: int n.ct
  add var: real n.delta
  add var: real E(t,n)
  add var: real u(t)
  add var: private real sum__call0(t)
  add var: real u:t(t)
Loading Constraints
  t.min=0 :: [t.min]
  t.max=1 :: [t.max]
  t.delta=.5 :: [t.delta]
  n.min=1 :: [n.min]
  n.max=2 :: [n.max]
  n.delta=1 :: [n.delta]
  E=(t+n) :: [E, t, n]
  when (t=t.min) u=0 :: [u(t.min)]
  sum__call0=sum.1[E@n] :: [sum__call0, E(n.min)*, E(n.max)*]
  u:t=sum(n,n.min,n.max,E) :: [u:t, sum__call0]
Input      phase completed with 0 errors, 0 warnings.

Toolbox phase starting ...
  add tool: domain t
  add tool: domain n
Toolbox phase - cycle 1:
  check eqn: t.min=0; [t.min]
  add tool: t.min=0
  check eqn: t.max=1; [t.max]
  add tool: t.max=1
  check eqn: t.delta=.5; [t.delta]
  add tool: t.delta=.5
  add tool: t.ct=(t.max-t.min)/t.delta+1.5
  check eqn: n.min=1; [n.min]
  add tool: n.min=1
  check eqn: n.max=2; [n.max]
  add tool: n.max=2
  check eqn: n.delta=1; [n.delta]
  add tool: n.delta=1
  add tool: n.ct=(n.max-n.min)/n.delta+1.5
  check eqn: E=(t+n); [E]
  add tool: E=t+n
  check eqn: when (t=t.min) u=0; [u(t.min)]
  add tool: u(t.min)=0
  check eqn: sum__call0=sum.1[E@n]; [sum__call0]
  add tool: sum__call0=sum.1[E@n]
  check eqn: u:t=sum(n,n.min,n.max,E); [u:t]
  add tool: u:t=sum(n,n.min,n.max,E)
  add tool: ODE u: []
  updated ODE(u) with u(t.min)=0
  updated ODE(u) with u:t=sum(n,n.min,n.max,E)
    u is now entirely solved
Toolbox phase - all cycles completed
  add var: real u__init
  add tool: u__init=0
Toolbox    phase completed with 0 errors, 0 warnings.

Sequencing phase starting ...
Tools to sequence:
  u__init=0 :: [u__init]<<[]
  @t u:t=sum(n,n.min,n.max,E) :: [u:t]<<[sum__call0]
  @t sum__call0=sum.1[E@n] :: [sum__call0]<<[E(n.min)*, E(n.max)*]
  @t ODE u: u:t=sum(n,n.min,n.max,E) :: [u, u(t.max)]<<[sum__call0, u(t.min), u:t]
  @t@n E=t+n :: [E]<<[t, n]
  n.delta=1 :: [n.delta]<<[]
  n.ct=(n.max-n.min)/n.delta+1.5 :: [n.ct]<<[n.max, n.min, n.delta]
  n.max=2 :: [n.max]<<[]
  n.min=1 :: [n.min]<<[]
  domain n :: [n]<<[n.min, n.max, n.ct, n.delta]
  t.delta=.5 :: [t.delta]<<[]
  t.ct=(t.max-t.min)/t.delta+1.5 :: [t.ct]<<[t.max, t.min, t.delta]
  t.max=1 :: [t.max]<<[]
  t.min=0 :: [t.min]<<[]
  domain t :: [t]<<[t.min, t.max, t.ct, t.delta]
  u(t.min)=u__init :: [u(t.min)]<<[u__init]
Events to seqence:
Relations to sequence:
Creating vuTools map ...
Adding reuse & query tools ...
  adding reuse tool: when (n=n.min) E=t+n [E(n.min)]<<[t, n(min)]
  adding query tool: query [E(n.max)*]<<[E]
  adding query tool: query [n(min)]<<[n]
Creating MainGraph ...
loopOrder=[t, n]
  addNode u__init seqLoops=() phase=main fft=null
  addNode u:t seqLoops=(t) phase=t#1 fft=null
  addNode sum__call0 seqLoops=(t) phase=t#1 fft=null
  addNode u seqLoops=(t) phase=t#1 fft=t
  addNode E seqLoops=(t,n) phase=t#1+n#1 fft=null
  addNode n.delta seqLoops=() phase=main fft=null
  addNode n.ct seqLoops=() phase=main fft=null
  addNode n.max seqLoops=() phase=main fft=null
  addNode n.min seqLoops=() phase=main fft=null
  addNode n seqLoops=() phase=main fft=null
  addNode t.delta seqLoops=() phase=main fft=null
  addNode t.ct seqLoops=() phase=main fft=null
  addNode t.max seqLoops=() phase=main fft=null
  addNode t.min seqLoops=() phase=main fft=null
  addNode t seqLoops=() phase=main fft=null
  addNode u(t.min) seqLoops=() phase=main fft=null
  addNode E(n.min) seqLoops=(t) phase=t#1 fft=null
  addNode E(n.max) seqLoops=(t) phase=t#1 fft=null
  addNode n(min) seqLoops=() phase=main fft=null
Saving graph pullfinder
Building mainline block ...
Mainline block graph:
building block for phase main
  adding u__init=0 to main
  adding n.delta=1 to main
  adding n.max=2 to main
  adding n.min=1 to main
  adding t.delta=.5 to main
  adding t.max=1 to main
  adding t.min=0 to main
  adding n.ct=(n.max-n.min)/n.delta+1.5 to main
  adding domain n to main
  adding t.ct=(t.max-t.min)/t.delta+1.5 to main
  adding domain t to main
  adding u(t.min)=u__init to main
  adding query [n(min)] to main
  subphase t#1 entryEdge=null
building block for phase t#1
  adding when (n=n.min) E=t+n to loop-t
  subphase t#1+n#1 entryEdge=null
building block for phase t#1+n#1
  adding E=t+n to loop-n
  adding loop-n to loop-t
  adding query [E(n.max)*] to loop-t
  adding sum__call0=sum.1[E@n] to loop-t
  adding u:t=sum(n,n.min,n.max,E) to loop-t
  adding ODE Block-t [u] to loop-t
  adding loop-t to main
Building ODE Block-t [u] ...
Sequencing phase completed with 0 errors, 0 warnings.

==== Main Calculation Block ====
main
  u__init=0
  n.delta=1
  n.max=2
  n.min=1
  t.delta=.5
  t.max=1
  t.min=0
  n.ct=(n.max-n.min)/n.delta+1.5
  domain n
  t.ct=(t.max-t.min)/t.delta+1.5
  domain t
  u(t.min)=u__init
  query [n(min)]
  loop-t
    when (n=n.min) E=t+n
    loop-n
      E=t+n
    query [E(n.max)*]
    sum__call0=sum.1[E@n]
    u:t=sum(n,n.min,n.max,E)
    ODE Block-t vmus=[t, u]

