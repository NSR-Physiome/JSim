==== Planner Log ====
Plan options=[maxBuildTime=120, maxImplicitBlock=10, initNaN=false, abortNaN=false, traceNaN=false, traceVars=, ignoreAllOverspec=false, ignoreAllUnderspec=false]
Loading Variables
  add var: realDomain t
  add var: real t.min
  add var: real t.max
  add var: int t.ct
  add var: real t.delta
  add var: realDomain x
  add var: real x.min
  add var: real x.max
  add var: int x.ct
  add var: real x.delta
  add var: real uIn(t)
  add var: real uOut(t)
  add var: real u(t,x)
  add var: real v(t)
  add var: real u:x(t,x)
  add var: real u:t(t,x)
  add var: real u:x:x(t,x)
  add var: real v:t(t)
Loading Constraints
  t.min=0 :: [t.min]
  t.max=3 :: [t.max]
  t.delta=.1 :: [t.delta]
  x.min=0 :: [x.min]
  x.max=1 :: [x.max]
  x.delta=.05 :: [x.delta]
  uIn=(1-exp(t*(-1))) :: [uIn, t]
  when (t=t.min) u=x :: [u(t.min), x]
  when (t=t.min) v=0 :: [v(t.min)]
  when (x=x.min) u=(uIn+v) :: [u(x.min), uIn, v]
  when (x=x.max) u:x=0 :: [u:x(x.max)]
  when (x=x.max) uOut=u :: [uOut, u(x.max)]
  u:t=(u:x:x-u:x) :: [u:t, u:x:x, u:x]
  v:t=(uOut-v) :: [v:t, uOut, v]
Input      phase completed with 0 errors, 0 warnings.

Toolbox phase starting ...
  add tool: domain t
  add tool: domain x
Toolbox phase - cycle 1:
  check eqn: t.min=0; [t.min]
  add tool: t.min=0
  check eqn: t.max=3; [t.max]
  add tool: t.max=3
  check eqn: t.delta=.1; [t.delta]
  add tool: t.delta=.1
  add tool: t.ct=(t.max-t.min)/t.delta+1.5
  check eqn: x.min=0; [x.min]
  add tool: x.min=0
  check eqn: x.max=1; [x.max]
  add tool: x.max=1
  check eqn: x.delta=.05; [x.delta]
  add tool: x.delta=.05
  add tool: x.ct=(x.max-x.min)/x.delta+1.5
  check eqn: uIn=(1-exp(t*(-1))); [uIn]
  add tool: uIn=1-exp(t*(-1))
  check eqn: when (t=t.min) u=x; [u(t.min)]
  add tool: u(t.min)=x
  check eqn: when (t=t.min) v=0; [v(t.min)]
  add tool: v(t.min)=0
  check eqn: when (x=x.min) u=(uIn+v); [u(x.min), v]
  check eqn: when (x=x.max) u:x=0; [u:x(x.max)]
  add tool: u:x(x.max)=0
  check eqn: when (x=x.max) uOut=u; [uOut, u(x.max)]
  check eqn: u:t=(u:x:x-u:x); [u:t, u:x:x]
  check eqn: v:t=(uOut-v); [v:t, uOut]
  add tool: PDE u: []
  updated PDE(u) with u(t.min)=x
  add tool: ODE v: []
  updated ODE(v) with v(t.min)=0
  updated PDE(u) with u:x(x.max)=0
Toolbox phase - cycle 1:
  check eqn: when (x=x.min) u=(uIn+v); [u(x.min)]
  add tool: u(x.min)=uIn+v
  check eqn: when (x=x.max) uOut=u; [uOut]
  add tool: uOut=when (x=x.max) u
  check eqn: u:t=(u:x:x-u:x); [u:t, u:x:x]
  check eqn: v:t=(uOut-v); [v:t]
  add tool: v:t=uOut-v
  updated PDE(u) with u(x.min)=uIn+v
  updated ODE(v) with v:t=uOut-v
    v is now entirely solved
Toolbox phase - cycle 1:
  check eqn: u:t=(u:x:x-u:x); [u:t, u:x:x]
Toolbox phase - cycle 2:
Toolbox phase - cycle 3:
  updated PDE(u) with u:t=(u:x:x-u:x)
    u is now entirely solved
Toolbox phase - cycle 1:
Toolbox phase - all cycles completed
  add var: real v__init
  add tool: v__init=0
PDE(u) factors:  D=(-1)*(-1) P=u:x*(-1)*(-1)*(-1) B=(-1)*(-1) S=0
  LHBC F1=1 F2=0 F3=(uIn+v)*(-1)*(-1)
  RHBC F1=0 F2=1 F3=0
  Solver LSFEA supported
  Solver MacCormack supported
  Solver Toms731 supported
  checking PDE(u) D=(-1)*(-1) for differentiability ...
  setting Dx=0+0
  Tom731  C=1 Q=u:x R=u:x
  Toms731 LHBC:  Beta=0 Gamma=0
  Toms731 RHBC:  Beta=1 Gamma=1
Toolbox    phase completed with 0 errors, 0 warnings.

Sequencing phase starting ...
Tools to sequence:
  v__init=0 :: [v__init]<<[]
  @t v:t=uOut-v :: [v:t]<<[uOut, v]
  @t ODE v: v:t=uOut-v :: [v, v(t.max)]<<[uOut, v(t.min), v:t]
  @t PDE-1D u: u:t=(u:x:x-u:x) :: [u, u(t.max), u(x.max), u(x.min)]<<[uIn, v, u(t.min)]
  @t uOut=when (x=x.max) u :: [uOut]<<[u(x.max)]
  @t uIn=1-exp(t*(-1)) :: [uIn]<<[t]
  x.delta=.05 :: [x.delta]<<[]
  x.ct=(x.max-x.min)/x.delta+1.5 :: [x.ct]<<[x.max, x.min, x.delta]
  x.max=1 :: [x.max]<<[]
  x.min=0 :: [x.min]<<[]
  domain x :: [x]<<[x.min, x.max, x.ct, x.delta]
  t.delta=.1 :: [t.delta]<<[]
  t.ct=(t.max-t.min)/t.delta+1.5 :: [t.ct]<<[t.max, t.min, t.delta]
  t.max=3 :: [t.max]<<[]
  t.min=0 :: [t.min]<<[]
  domain t :: [t]<<[t.min, t.max, t.ct, t.delta]
  v(t.min)=v__init :: [v(t.min)]<<[v__init]
  @x u(t.min)=x :: [u(t.min)]<<[x]
Events to seqence:
Relations to sequence:
Creating vuTools map ...
Adding reuse & query tools ...
Creating MainGraph ...
loopOrder=[t, x]
  addNode v__init seqLoops=() phase=main fft=null
  addNode v:t seqLoops=(t) phase=t#1 fft=null
  addNode v seqLoops=(t) phase=t#1 fft=t
  addNode u seqLoops=(t) phase=t#1 fft=t
  addNode uOut seqLoops=(t) phase=t#1 fft=null
  addNode uIn seqLoops=(t) phase=t#1 fft=null
  addNode x.delta seqLoops=() phase=main fft=null
  addNode x.ct seqLoops=() phase=main fft=null
  addNode x.max seqLoops=() phase=main fft=null
  addNode x.min seqLoops=() phase=main fft=null
  addNode x seqLoops=() phase=main fft=null
  addNode t.delta seqLoops=() phase=main fft=null
  addNode t.ct seqLoops=() phase=main fft=null
  addNode t.max seqLoops=() phase=main fft=null
  addNode t.min seqLoops=() phase=main fft=null
  addNode t seqLoops=() phase=main fft=null
  addNode v(t.min) seqLoops=() phase=main fft=null
  addNode u(t.min) seqLoops=(x) phase=x#1 fft=null
Saving graph pullfinder
Building mainline block ...
Mainline block graph:
building block for phase main
  adding v__init=0 to main
  adding x.delta=.05 to main
  adding x.max=1 to main
  adding x.min=0 to main
  adding t.delta=.1 to main
  adding t.max=3 to main
  adding t.min=0 to main
  adding x.ct=(x.max-x.min)/x.delta+1.5 to main
  adding domain x to main
  adding t.ct=(t.max-t.min)/t.delta+1.5 to main
  adding domain t to main
  adding v(t.min)=v__init to main
  subphase t#1 entryEdge=u(t.min)->u
  subphase x#1 entryEdge=null
building block for phase x#1
  adding u(t.min)=x to loop-x
  adding loop-x to main
  subphase t#1 entryEdge=null
building block for phase t#1
  adding uOut=when (x=x.max) u to loop-t
  adding uIn=1-exp(t*(-1)) to loop-t
  adding v:t=uOut-v to loop-t
  adding ODE Block-t [v] to loop-t
  adding PDE Block-t(x) [u] to loop-t
  adding loop-t to main
Building ODE Block-t [v] ...
  adding muTool v:t=uOut-v
  adding muVar v:t
  adding v:t=uOut-v to ODE Block-t [v]
Building PDE Block-t(x) [u] ...
PDE solver LSFEA: supported
PDE solver MacCormack: supported
PDE solver Toms731: supported
Building PDE BC x=x.min [u] ...
  adding muTool uIn=1-exp(t*(-1))
  adding muVar uIn
  adding uIn=1-exp(t*(-1)) to PDE BC x=x.min [u]
Building PDE BC x=x.max [u] ...
Sequencing phase completed with 0 errors, 0 warnings.

==== Main Calculation Block ====
main
  v__init=0
  x.delta=.05
  x.max=1
  x.min=0
  t.delta=.1
  t.max=3
  t.min=0
  x.ct=(x.max-x.min)/x.delta+1.5
  domain x
  t.ct=(t.max-t.min)/t.delta+1.5
  domain t
  v(t.min)=v__init
  loop-x
    u(t.min)=x
  loop-t
    uOut=when (x=x.max) u
    uIn=1-exp(t*(-1))
    v:t=uOut-v
    ODE Block-t vmus=[t, v, v:t]
      v:t=uOut-v
    PDE Block-t(x) vmus=[t, x, u]
      PDE BC x=x.min vmus=[t, u, uIn]
        uIn=1-exp(t*(-1))
      PDE BC x=x.max vmus=[t, u]

