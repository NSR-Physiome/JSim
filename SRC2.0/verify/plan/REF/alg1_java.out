// JSim generated model JS100alg1
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100alg1 model
public class JS100alg1 extends RTModel {

    // variable declarations
    public RTRealNVar JSa;
    public RTRealNVar JSb;
    public RTRealNVar JSc;
     
    // F&P declarations
    
    // solver declarations
     
    // RT model constructor
    public JS100alg1(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100alg1", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSa = new RTRealNVar(this, "a","dimensionless",2,null);
        JSb = new RTRealNVar(this, "b","dimensionless",2,null);
        JSc = new RTRealNVar(this, "c","dimensionless",1,null);
         
        // input defaults
        JSc.setDefault("1");
        
        // F&P initialization
        
        // solver instantiation
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0c;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0c = realVal(JSc);
            set(JSb,(js0c*2));
            set(JSa,(realVal(JSb)+js0c));
        }
        
        // ctxt methods for F&P
    }
     
}


