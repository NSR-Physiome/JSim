// JSim generated model JS100pde_2slab
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100pde_2slab model
public class JS100pde_2slab extends RTModel {

    // variable declarations
    public RTRealNVar JSD1;
    public RTRealNVar JSD2;
    public RTRealNVar JSC1_0;
    public RTRealNVar JSC2_0;
    public RTRealNVar JSdelx;
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealDomain JSx;
    public RTRealNVar JSx__min;
    public RTRealNVar JSx__max;
    public RTIntNVar JSx__ct;
    public RTRealNVar JSx__delta;
    public RTRealNVar JSC1;
    public RTRealNVar JSC2;
    public RTRealNVar JSC1del;
    public RTRealNVar JSC1int;
    public RTRealNVar JSC2del;
    public RTRealNVar JSC2int;
    public RTRealNVar JSQ1mid;
    public RTRealNVar JSQ2mid;
     
    // F&P declarations
    
    // solver declarations
    public PDE1Problem__C2 pde1problem__c2;
     
    // RT model constructor
    public JS100pde_2slab(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100pde_2slab", u, m);
         
        // units used in model
        units.addFund("kg");
        units.addFund("m");
        units.addFund("sec");
        units.addFund("amp");
        units.addFund("degK");
        units.addFund("mol");
        units.addFund("candela");
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
        units.add("kg", Unit.parse(this, "1 kg^1"));
        units.add("m", Unit.parse(this, "1 m^1"));
        units.add("sec", Unit.parse(this, "1 sec^1"));
        units.setPrefixable("sec");
        units.add("amp", Unit.parse(this, "1 amp^1"));
        units.setPrefixable("amp");
        units.add("degK", Unit.parse(this, "1 degK^1"));
        units.add("mol", Unit.parse(this, "1 mol^1"));
        units.setPrefixable("mol");
        units.add("candela", Unit.parse(this, "1 candela^1"));
        units.setPrefixable("candela");
        units.add("steradian", Unit.parse(this, "1  dimensionless"));
        units.setPrefixable("steradian");
        units.add("scalar", Unit.parse(this, "1  dimensionless"));
        units.add("percent", Unit.parse(this, ".01  dimensionless"));
        units.add("mole", Unit.parse(this, "1 mol^1"));
        units.setPrefixable("mole");
        units.add("mmol", Unit.parse(this, ".001 mol^1"));
        units.add("umol", Unit.parse(this, "1E-6 mol^1"));
        units.add("nmol", Unit.parse(this, "1E-9 mol^1"));
        units.add("pmol", Unit.parse(this, "1E-12 mol^1"));
        units.add("meter", Unit.parse(this, "1 m^1"));
        units.setPrefixable("meter");
        units.add("metre", Unit.parse(this, "1 m^1"));
        units.setPrefixable("metre");
        units.add("mm", Unit.parse(this, ".001 m^1"));
        units.add("cm", Unit.parse(this, ".01 m^1"));
        units.add("km", Unit.parse(this, "1E3 m^1"));
        units.add("micron", Unit.parse(this, "1E-6 m^1"));
        units.add("um", Unit.parse(this, "1E-6 m^1"));
        units.add("nm", Unit.parse(this, "1E-9 m^1"));
        units.add("angstrom", Unit.parse(this, "1E-10 m^1"));
        units.setPrefixable("angstrom");
        units.add("inch", Unit.parse(this, ".0254 m^1"));
        units.add("foot", Unit.parse(this, ".3048 m^1"));
        units.add("yard", Unit.parse(this, ".9144 m^1"));
        units.add("mile", Unit.parse(this, "1609.344 m^1"));
        units.add("gram", Unit.parse(this, ".001 kg^1"));
        units.setPrefixable("gram");
        units.add("g", Unit.parse(this, ".001 kg^1"));
        units.add("mg", Unit.parse(this, "1E-6 kg^1"));
        units.add("ug", Unit.parse(this, "1E-9 kg^1"));
        units.add("amu", Unit.parse(this, "1.660531E-27 kg^1"));
        units.add("dalton", Unit.parse(this, "1.660531E-27 kg^1"));
        units.setPrefixable("dalton");
        units.add("da", Unit.parse(this, "1.660531E-27 kg^1"));
        units.add("second", Unit.parse(this, "1 sec^1"));
        units.setPrefixable("second");
        units.add("s", Unit.parse(this, "1 sec^1"));
        units.add("min", Unit.parse(this, "60 sec^1"));
        units.add("hour", Unit.parse(this, "3600 sec^1"));
        units.add("hr", Unit.parse(this, "3600 sec^1"));
        units.add("ms", Unit.parse(this, ".001 sec^1"));
        units.add("msec", Unit.parse(this, ".001 sec^1"));
        units.add("usec", Unit.parse(this, "1E-6 sec^1"));
        units.add("hz", Unit.parse(this, "1 sec^(-1)"));
        units.add("hertz", Unit.parse(this, "1 sec^(-1)"));
        units.setPrefixable("hertz");
        units.add("ml", Unit.parse(this, "1E-6 m^3"));
        units.add("liter", Unit.parse(this, ".001 m^3"));
        units.setPrefixable("liter");
        units.add("litre", Unit.parse(this, ".001 m^3"));
        units.setPrefixable("litre");
        units.add("L", Unit.parse(this, ".001 m^3"));
        units.add("dL", Unit.parse(this, "1E-4 m^3"));
        units.add("mL", Unit.parse(this, "1E-6 m^3"));
        units.add("uL", Unit.parse(this, "1E-9 m^3"));
        units.add("N", Unit.parse(this, "1 kg^1*m^1*sec^(-2)"));
        units.setPrefixable("N");
        units.add("newton", Unit.parse(this, "1 kg^1*m^1*sec^(-2)"));
        units.setPrefixable("newton");
        units.add("dyn", Unit.parse(this, "1E-5 kg^1*m^1*sec^(-2)"));
        units.add("dyne", Unit.parse(this, "1E-5 kg^1*m^1*sec^(-2)"));
        units.setPrefixable("dyne");
        units.add("pa", Unit.parse(this, "1 kg^1*m^(-1)*sec^(-2)"));
        units.add("pascal", Unit.parse(this, "1 kg^1*m^(-1)*sec^(-2)"));
        units.setPrefixable("pascal");
        units.add("atm", Unit.parse(this, "101325 kg^1*m^(-1)*sec^(-2)"));
        units.add("mmHg", Unit.parse(this, "1.3332237E2 kg^1*m^(-1)*sec^(-2)"));
        units.add("torr", Unit.parse(this, "1.3332237E2 kg^1*m^(-1)*sec^(-2)"));
        units.setPrefixable("torr");
        units.add("cmH2O", Unit.parse(this, "9.828409E1 kg^1*m^(-1)*sec^(-2)"));
        units.add("bar", Unit.parse(this, "1E5 kg^1*m^(-1)*sec^(-2)"));
        units.add("erg", Unit.parse(this, "1E-7 kg^1*m^2*sec^(-2)"));
        units.setPrefixable("erg");
        units.add("joule", Unit.parse(this, "1 kg^1*m^2*sec^(-2)"));
        units.setPrefixable("joule");
        units.add("J", Unit.parse(this, "1 kg^1*m^2*sec^(-2)"));
        units.add("cal", Unit.parse(this, "4.187 kg^1*m^2*sec^(-2)"));
        units.setPrefixable("cal");
        units.add("calorie", Unit.parse(this, "4.187 kg^1*m^2*sec^(-2)"));
        units.setPrefixable("calorie");
        units.add("watt", Unit.parse(this, "1 kg^1*m^2*sec^(-3)"));
        units.setPrefixable("watt");
        units.add("poise", Unit.parse(this, ".1 kg^1*m^(-1)*sec^(-1)"));
        units.setPrefixable("poise");
        units.add("p", Unit.parse(this, ".1 kg^1*m^(-1)*sec^(-1)"));
        units.add("cp", Unit.parse(this, ".001 kg^1*m^(-1)*sec^(-1)"));
        units.add("P", Unit.parse(this, ".1 kg^1*m^(-1)*sec^(-1)"));
        units.add("cP", Unit.parse(this, ".001 kg^1*m^(-1)*sec^(-1)"));
        units.add("degR", Unit.parse(this, ".55555556 degK^1"));
        units.add("K", Unit.parse(this, "1 degK^1"));
        units.add("kelvin", Unit.parse(this, "1 degK^1"));
        units.setPrefixable("kelvin");
        units.add("A", Unit.parse(this, "1 amp^1"));
        units.setPrefixable("A");
        units.add("mA", Unit.parse(this, ".001 amp^1"));
        units.add("uA", Unit.parse(this, "1E-6 amp^1"));
        units.add("ampere", Unit.parse(this, "1 amp^1"));
        units.setPrefixable("ampere");
        units.add("coulomb", Unit.parse(this, "1 sec^1*amp^1"));
        units.setPrefixable("coulomb");
        units.add("faraday", Unit.parse(this, "96485.341 sec^1*amp^1*mol^(-1)"));
        units.setPrefixable("faraday");
        units.add("volt", Unit.parse(this, "1 kg^1*m^2*sec^(-3)*amp^(-1)"));
        units.setPrefixable("volt");
        units.add("mV", Unit.parse(this, ".001 kg^1*m^2*sec^(-3)*amp^(-1)"));
        units.add("ohm", Unit.parse(this, "1 kg^1*m^2*sec^(-3)*amp^(-2)"));
        units.setPrefixable("ohm");
        units.add("mho", Unit.parse(this, "1 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.setPrefixable("mho");
        units.add("mmho", Unit.parse(this, ".001 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.add("siemens", Unit.parse(this, "1 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.setPrefixable("siemens");
        units.add("mS", Unit.parse(this, ".001 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.add("uS", Unit.parse(this, "1E-6 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.add("farad", Unit.parse(this, "1 kg^(-1)*m^(-2)*sec^4*amp^2"));
        units.setPrefixable("farad");
        units.add("uF", Unit.parse(this, "1E-6 kg^(-1)*m^(-2)*sec^4*amp^2"));
        units.add("weber", Unit.parse(this, "1 kg^1*m^2*sec^(-2)*amp^(-1)"));
        units.setPrefixable("weber");
        units.add("tesla", Unit.parse(this, "1 kg^1*sec^(-2)*amp^(-1)"));
        units.setPrefixable("tesla");
        units.add("henry", Unit.parse(this, "1 kg^1*m^2*sec^(-2)*amp^(-2)"));
        units.setPrefixable("henry");
        units.add("gauss", Unit.parse(this, "1E-4 kg^1*sec^(-2)*amp^(-1)"));
        units.setPrefixable("gauss");
        units.add("mu0", Unit.parse(this, "1.2566371E-6 kg^1*m^1*sec^(-2)*amp^(-2)"));
        units.add("oersted", Unit.parse(this, "79.57747155 m^(-1)*amp^1"));
        units.setPrefixable("oersted");
        units.add("gilbert", Unit.parse(this, ".79577472 amp^1"));
        units.setPrefixable("gilbert");
        units.add("molar", Unit.parse(this, "1E3 m^(-3)*mol^1"));
        units.setPrefixable("molar");
        units.add("Molar", Unit.parse(this, "1E3 m^(-3)*mol^1"));
        units.setPrefixable("Molar");
        units.add("M", Unit.parse(this, "1E3 m^(-3)*mol^1"));
        units.add("mM", Unit.parse(this, "1 m^(-3)*mol^1"));
        units.add("uM", Unit.parse(this, "1E-3 m^(-3)*mol^1"));
        units.add("nM", Unit.parse(this, "1E-6 m^(-3)*mol^1"));
        units.add("pM", Unit.parse(this, "1E-9 m^(-3)*mol^1"));
        units.add("katal", Unit.parse(this, "1 sec^(-1)*mol^1"));
        units.setPrefixable("katal");
        units.add("lumen", Unit.parse(this, "1 candela^1"));
        units.setPrefixable("lumen");
        units.add("lux", Unit.parse(this, "1 m^(-2)*candela^1"));
        units.setPrefixable("lux");
        units.add("becquerel", Unit.parse(this, "1 sec^(-1)"));
        units.setPrefixable("becquerel");
        units.add("gray", Unit.parse(this, "1 m^2*sec^(-2)"));
        units.setPrefixable("gray");
        units.add("sievert", Unit.parse(this, "1 m^2*sec^(-2)"));
        units.setPrefixable("sievert");
        units.addPrefix("yotta", 1E24);
        units.addPrefix("zetta", 1E21);
        units.addPrefix("exa", 1E18);
        units.addPrefix("peta", 1E15);
        units.addPrefix("tera", 1E12);
        units.addPrefix("giga", 1E9);
        units.addPrefix("mega", 1E6);
        units.addPrefix("kilo", 1E3);
        units.addPrefix("hecto", 100);
        units.addPrefix("deka", 10);
        units.addPrefix("deca", 10);
        units.addPrefix("deci", .1);
        units.addPrefix("centi", .01);
        units.addPrefix("milli", .001);
        units.addPrefix("micro", 1E-6);
        units.addPrefix("nano", 1E-9);
        units.addPrefix("pico", 1E-12);
        units.addPrefix("femto", 1E-15);
        units.addPrefix("atto", 1E-18);
        units.addPrefix("zepto", 1E-21);
        units.addPrefix("yocto", 1E-24);
         
        // var instantiation
        JSD1 = new RTRealNVar(this, "D1","cm^2/sec",1,null);
        JSD2 = new RTRealNVar(this, "D2","cm^2/sec",1,null);
        JSC1_0 = new RTRealNVar(this, "C1_0","mM",1,null);
        JSC2_0 = new RTRealNVar(this, "C2_0","mM",1,null);
        JSdelx = new RTRealNVar(this, "delx","cm",1,null);
        JSt__min = new RTRealNVar(this, "t.min","sec",1,null);
        JSt__max = new RTRealNVar(this, "t.max","sec",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","sec",1,null);
        JSx__min = new RTRealNVar(this, "x.min","cm",1,null);
        JSx__max = new RTRealNVar(this, "x.max","cm",1,null);
        JSx__ct = new RTIntNVar(this, "x.ct","dimensionless",2,null);
        JSx__delta = new RTRealNVar(this, "x.delta","cm",1,null);
        JSt = new RTRealDomain(this, "t","sec",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSx = new RTRealDomain(this, "x","cm",2,JSx__min,JSx__max,JSx__delta,JSx__ct);
        JSC1 = new RTRealNVar(this, "C1","mM",5,new RTRealDomain[] {JSx,JSt});
        JSC2 = new RTRealNVar(this, "C2","mM",5,new RTRealDomain[] {JSx,JSt});
        JSC1del = new RTRealNVar(this, "C1del","mM",5,new RTRealDomain[] {JSt});
        JSC1int = new RTRealNVar(this, "C1int","mM",5,new RTRealDomain[] {JSt});
        JSC2del = new RTRealNVar(this, "C2del","mM",5,new RTRealDomain[] {JSt});
        JSC2int = new RTRealNVar(this, "C2int","mM",5,new RTRealDomain[] {JSt});
        JSQ1mid = new RTRealNVar(this, "Q1mid","mM*cm/sec",5,new RTRealDomain[] {JSt});
        JSQ2mid = new RTRealNVar(this, "Q2mid","mM*cm/sec",5,new RTRealDomain[] {JSt});
         
        // input defaults
        JSD1.setDefault(".1");
        JSD2.setDefault(".01");
        JSC1_0.setDefault("10");
        JSC2_0.setDefault("10");
        JSdelx.setDefault(".001");
        JSt__min.setDefault("0");
        JSt__max.setDefault("50");
        JSt__delta.setDefault(".05");
        JSx__min.setDefault("0");
        JSx__max.setDefault("1");
        JSx__delta.setDefault(".01");
        
        // F&P initialization
        
        // solver instantiation
        pde1problem__c2 = new PDE1Problem__C2(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return true; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        String xname = x.name();
        if (xname.equals("x")) return false;
        if (xname.equals("t")) return false;
        return true;
    }
    
    // PDE problem solving [C2, C1]
    public class PDE1Problem__C2 extends PDE1Problem {
        public PDE1Problem__C2(RTModel m) throws Xcept {
            super(m, "PDE1Problem__C2");
            setup(JSt,JSx,0,
                new RTRealNVar[] {JSC2,JSC1},
                new RTRealNVar[] {null,null},
                new RTRealNVar[] {null,null},
                new RTRealNVar[] {null,null},
                new RTRealNVar[] {null,null},
                null, null);
            setSolvedVars(new ASVar[] {JSC2,JSC1});
        }
        public boolean usesPDESolver(int which) {
            switch(which) {
            case ASModel.PDE_LSFEA: return false;
            case ASModel.PDE_MacCormack: return true;
            case ASModel.PDE_Toms731: return true;
            default: return false;
            }
        }
        public void common_LHB(RTContext ctxt,double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            npdeCallbacks[ProfileData.common_LHB]++;
            ((XContext) ctxt).common_LHB__C2(t,us,f1s,f2s,f3s);
        }
        public void common_RHB(RTContext ctxt,double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            npdeCallbacks[ProfileData.common_RHB]++;
            ((XContext) ctxt).common_RHB__C2(t,us,f1s,f2s,f3s);
        }
        public void MacCormack_State(RTContext ctxt,double t,double x,double[] us,double[] cxs,double[] cxxs,double[] srcs) throws Xcept {
            npdeCallbacks[ProfileData.MacCormack_State]++;
            ((XContext) ctxt).MacCormack_State__C2(t,x,us,cxs,cxxs,srcs);
        }
        public void Toms731_State(RTContext ctxt,double t,double x,double[] us,double[] uxs,double[] cs,double[] qs,double[] rs) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_State]++;
            ((XContext) ctxt).Toms731_State__C2(t,x,us,uxs,cs,qs,rs);
        }
        public void Toms731_LHB(RTContext ctxt,double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_LHB]++;
            ((XContext) ctxt).Toms731_LHB__C2(t,us,uxs,betas,gammas);
        }
        public void Toms731_RHB(RTContext ctxt,double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_RHB]++;
            ((XContext) ctxt).Toms731_RHB__C2(t,us,uxs,betas,gammas);
        }
    }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0D1;
        private double js0D2;
        private double js0C1_0;
        private double js0C2_0;
        private double js0delx;
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js0x__min;
        private double js0x__max;
        private double js0x__delta;
        private double js2C2__Dx;
        private double js2C1__Dx;
        private double js2t;
        private double js2x;
        private double js2C2;
        private double js2C1;
        private double js2C1int;
        private double js2Q2mid;
        private double js2C2int;
        private double js2C2del;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0x__delta = realVal(JSx__delta);
            js0x__max = realVal(JSx__max);
            js0x__min = realVal(JSx__min);
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            js0delx = realVal(JSdelx);
            js0C2_0 = realVal(JSC2_0);
            js0C1_0 = realVal(JSC1_0);
            js0D2 = realVal(JSD2);
            js0D1 = realVal(JSD1);
            set(JSx__ct,(((js0x__max-js0x__min)/js0x__delta)+1.5));
            set(JSx__max,js0x__max = (js0x__min+(js0x__delta*(realVal(JSx__ct)-1))));
            setDomain(JSx);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            startPhase(3, JSx);
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__0x();
            startPhase(4, null);
            startPhase(5, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__1t();
            startPhase(6, null);
        }
        
        // ctxt loop iteration for domain x
        public void loop__0x() throws Xcept {
            setLHBC(JSt);
            set(JSC2,(((realVal(JSx)==js0x__min)) ? (js0C2_0) : (0)));
            setLHBC(JSt);
            set(JSC1,(((realVal(JSx)==js0x__min)) ? (js0C1_0) : (0)));
            interruptCheck();
            updatePhase(JSx);
        }
        
        // ctxt loop iteration for domain t
        public void loop__1t() throws Xcept {
            set(JSC2int,realVal(JSC2, new double[] {js0x__max,realVal(JSt)}));
            set(JSC1int,realVal(JSC1, new double[] {js0x__max,realVal(JSt)}));
            set(JSC2del,realVal(JSC2, new double[] {(js0x__max-js0delx),realVal(JSt)}));
            set(JSC1del,realVal(JSC1, new double[] {(js0x__max-js0delx),realVal(JSt)}));
            set(JSQ2mid,((js0D2*(realVal(JSC2int)-realVal(JSC2del)))/js0delx));
            set(JSQ1mid,((js0D1*(realVal(JSC1del)-realVal(JSC1int)))/js0delx));
            pde1problem__c2.solve(this);
            interruptCheck();
            updatePhase(JSt);
        }
        
        public void MacCormack_State__C2(double t,double x,double[] us,double[] cxs,double[] cxxs,double[] srcs) throws Xcept {
            js2t=t;
            js2C2=us[0];
            js2C1=us[1];
            js2x=x;
            interruptCheck();
            cxs[0]=0;
            cxxs[0]=((js0D2*(-1))*(-1));
            srcs[0]=0;
            cxs[1]=0;
            cxxs[1]=((js0D1*(-1))*(-1));
            srcs[1]=0;
        }
        public void Toms731_State__C2(double t,double x,double[] us,double[] uxs,double[] cs,double[] qs,double[] rs) throws Xcept {
            js2t=t;
            js2C2=us[0];
            js2C1=us[1];
            js2x=x;
            js2C2__Dx=uxs[0];
            js2C1__Dx=uxs[1];
            interruptCheck();
            cs[0]=1;
            qs[0]=0;
            rs[0]=(js0D2*js2C2__Dx);
            cs[1]=1;
            qs[1]=0;
            rs[1]=(js0D1*js2C1__Dx);
        }
        public void common_LHB__C2(double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            js2t=t;
            js2C2=us[0];
            js2C1=us[1];
            js2x=js0x__min;
            interruptCheck();
            f1s[0]=1;
            f2s[0]=0;
            f3s[0]=((js0C2_0*(-1))*(-1));
            f1s[1]=1;
            f2s[1]=0;
            f3s[1]=((js0C1_0*(-1))*(-1));
        }
        public void Toms731_LHB__C2(double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            js2t=t;
            js2C2=us[0];
            js2C1=us[1];
            js2C2__Dx=uxs[0];
            js2C1__Dx=uxs[1];
            js2x=js0x__min;
            interruptCheck();
            betas[0]=0;
            gammas[0]=(js2C2-js0C2_0);
            betas[1]=0;
            gammas[1]=(js2C1-js0C1_0);
        }
        public void common_RHB__C2(double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            js2t=t;
            js2C2=us[0];
            js2C1=us[1];
            js2x=js0x__max;
            js2C1int = realVal(JSC1, new double[] {js0x__max,js2t});
            js2C2int = realVal(JSC2, new double[] {js0x__max,js2t});
            js2C2del = realVal(JSC2, new double[] {(js0x__max-js0delx),js2t});
            js2Q2mid = ((js0D2*(js2C2int-js2C2del))/js0delx);
            interruptCheck();
            f1s[0]=1;
            f2s[0]=0;
            f3s[0]=((js2C1int*(-1))*(-1));
            f1s[1]=0;
            f2s[1]=1;
            f3s[1]=((js2Q2mid/js0D1)*(-1));
        }
        public void Toms731_RHB__C2(double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            js2t=t;
            js2C2=us[0];
            js2C1=us[1];
            js2C2__Dx=uxs[0];
            js2C1__Dx=uxs[1];
            js2x=js0x__max;
            js2C1int = realVal(JSC1, new double[] {js0x__max,js2t});
            js2C2int = realVal(JSC2, new double[] {js0x__max,js2t});
            js2C2del = realVal(JSC2, new double[] {(js0x__max-js0delx),js2t});
            js2Q2mid = ((js0D2*(js2C2int-js2C2del))/js0delx);
            interruptCheck();
            betas[0]=0;
            gammas[0]=(js2C2-js2C1int);
            betas[1]=1;
            gammas[1]=((js2C1__Dx-(js2C1__Dx-((js2Q2mid/js0D1)*(-1))))*js0D1);
        }
        
        // ctxt methods for F&P
    }
     
}


