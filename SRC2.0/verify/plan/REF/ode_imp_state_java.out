// JSim generated model JS100ode_imp_state
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100ode_imp_state model
public class JS100ode_imp_state extends RTModel {

    // variable declarations
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealNVar JSa;
    public RTRealNVar JSu;
    public RTRealNVar JSv;
    public RTRealNVar JSu__Dt;
    public RTRealNVar JSv__Dt;
    public RTRealNVar JSu__init;
    public RTRealNVar JSv__init;
     
    // F&P declarations
    
    // solver declarations
    public Fzero1Problem__0t__u__Dt fzero1problem__0t__u__dt;
    public ODE1Problem__v ode1problem__v;
    public Fzero1Problem__v__u__Dt fzero1problem__v__u__dt;
     
    // RT model constructor
    public JS100ode_imp_state(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100ode_imp_state", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSa = new RTRealNVar(this, "a","dimensionless",1,null);
        JSu__init = new RTRealNVar(this, "u__init","dimensionless",1,null);
        JSv__init = new RTRealNVar(this, "v__init","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSu = new RTRealNVar(this, "u","dimensionless",3,new RTRealDomain[] {JSt});
        JSv = new RTRealNVar(this, "v","dimensionless",3,new RTRealDomain[] {JSt});
        JSu__Dt = new RTRealNVar(this, "u:t","dimensionless",3,new RTRealDomain[] {JSt});
        JSv__Dt = new RTRealNVar(this, "v:t","dimensionless",3,new RTRealDomain[] {JSt});
         
        // input defaults
        JSt__min.setDefault("0");
        JSt__max.setDefault("5");
        JSt__delta.setDefault(".2");
        JSa.setDefault("1");
        JSu__init.setDefault("1");
        JSv__init.setDefault("0");
        
        // F&P initialization
        
        // solver instantiation
        fzero1problem__0t__u__dt = new Fzero1Problem__0t__u__Dt(this);
        ode1problem__v = new ODE1Problem__v(this);
        fzero1problem__v__u__dt = new Fzero1Problem__v__u__Dt(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        return true;
    }
    
    // Implicit block solving [u:t, v:t]
    public class Fzero1Problem__0t__u__Dt extends Fzero1Problem {
        public Fzero1Problem__0t__u__Dt(RTModel m) throws Xcept {
            super(m, "Fzero1Problem__0t__u__Dt",2);
        }
        public void setCoef(RTContext ctxt,double[] mat,double[] vec,double[] rec) throws Xcept {
            ((XContext) ctxt).setCoef__0t__u__Dt(mat,vec,rec);
        }
        public void setBounds(RTContext ctxt,double[] vmin,double[] vmax,double[] vguess) throws Xcept {
            ((XContext) ctxt).setBounds__0t__u__Dt(vmin,vmax,vguess);
        }
        public void calcZero(RTContext ctxt,double[] val,double[] zero) throws Xcept {
            ((XContext) ctxt).calcZero__0t__u__Dt(val,zero);
            ncallbacks++;
        }
        public void export(RTContext ctxt,double[] val) throws Xcept {
            ((XContext) ctxt).export__0t__u__Dt(val);
        }
    }
     
    // ODE problem solving [v, u]
    public class ODE1Problem__v extends ODE1Problem {
        public ODE1Problem__v(RTModel m) throws Xcept {
            super(m, "ODE1Problem__v");
            setup(JSt, new RTRealNVar[] {JSv,JSu});
        }
        public void evaluate(RTContext ctxt, double t, double[] u, double[] udot) throws Xcept {
            ((XContext) ctxt).evaluate__v(t, u, udot);
            interruptCheck(ctxt, t, udot);
            ncallbacks++;
        }
    }
     
    // Implicit block solving [u:t, v:t]
    public class Fzero1Problem__v__u__Dt extends Fzero1Problem {
        public Fzero1Problem__v__u__Dt(RTModel m) throws Xcept {
            super(m, "Fzero1Problem__v__u__Dt",2);
        }
        public void setCoef(RTContext ctxt,double[] mat,double[] vec,double[] rec) throws Xcept {
            ((XContext) ctxt).setCoef__v__u__Dt(mat,vec,rec);
        }
        public void setBounds(RTContext ctxt,double[] vmin,double[] vmax,double[] vguess) throws Xcept {
            ((XContext) ctxt).setBounds__v__u__Dt(vmin,vmax,vguess);
        }
        public void calcZero(RTContext ctxt,double[] val,double[] zero) throws Xcept {
            ((XContext) ctxt).calcZero__v__u__Dt(val,zero);
            ncallbacks++;
        }
        public void export(RTContext ctxt,double[] val) throws Xcept {
            ((XContext) ctxt).export__v__u__Dt(val);
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js0a;
        private double js0u__init;
        private double js0v__init;
        private double js2u__Dt;
        private double js2v__Dt;
        private double js2t;
        private double js2v;
        private double js2u;
        private double js3u__Dt;
        private double js3v__Dt;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0v__init = realVal(JSv__init);
            js0u__init = realVal(JSu__init);
            js0a = realVal(JSa);
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            setLHBC(JSt);
            set(JSv,js0v__init);
            setLHBC(JSt);
            set(JSu,js0u__init);
            startPhase(3, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__0t();
            startPhase(4, null);
        }
        
        // ctxt loop iteration for domain t
        public void loop__0t() throws Xcept {
            fzero1problem__0t__u__dt.solve(this);
            ode1problem__v.solve(this);
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt methods for Fzero1Problem__0t__u__Dt
        public void setCoef__0t__u__Dt(double[] mat,double[] vec,double[] rec) throws Xcept {
            mat[0]=1;
            mat[1]=1;
            mat[2]=1;
            mat[3]=(-1);
            vec[0]=(realVal(JSu)*(-1));
            vec[1]=(realVal(JSv)*(-1));
        }
        public void setBounds__0t__u__Dt(double[] vmin,double[] vmax,double[] vguess) throws Xcept {
        }
        public void calcZero__0t__u__Dt(double[] vals,double[] zeroes) throws Xcept {
            js2u__Dt=vals[0];
            js2v__Dt=vals[1];
            zeroes[0]=((js2u__Dt+js2v__Dt)-realVal(JSu));
            zeroes[1]=((js2u__Dt-js2v__Dt)-realVal(JSv));
        }
        public void export__0t__u__Dt(double[] vals) throws Xcept {
            set(JSu__Dt,vals[0]);
            set(JSv__Dt,vals[1]);
        }
        // ctxt ODE evaluate
        public void evaluate__v(double t,double[] u,double[] udot) throws Xcept {
            js2t = t;
            js2v = u[0];
            js2u = u[1];
            fzero1problem__v__u__dt.solve(this);
            udot[0] = js2v__Dt;
            udot[1] = js2u__Dt;
        }
        
        // ctxt methods for Fzero1Problem__v__u__Dt
        public void setCoef__v__u__Dt(double[] mat,double[] vec,double[] rec) throws Xcept {
            mat[0]=1;
            mat[1]=1;
            mat[2]=1;
            mat[3]=(-1);
            vec[0]=(js2u*(-1));
            vec[1]=(js2v*(-1));
        }
        public void setBounds__v__u__Dt(double[] vmin,double[] vmax,double[] vguess) throws Xcept {
        }
        public void calcZero__v__u__Dt(double[] vals,double[] zeroes) throws Xcept {
            js3u__Dt=vals[0];
            js3v__Dt=vals[1];
            zeroes[0]=((js3u__Dt+js3v__Dt)-js2u);
            zeroes[1]=((js3u__Dt-js3v__Dt)-js2v);
        }
        public void export__v__u__Dt(double[] vals) throws Xcept {
            js2u__Dt=vals[0];
            js2v__Dt=vals[1];
        }
        // ctxt methods for F&P
    }
     
}


