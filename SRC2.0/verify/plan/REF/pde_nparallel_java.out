// JSim generated model JS100pde_nparallel
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100pde_nparallel model
public class JS100pde_nparallel extends RTModel {

    // variable declarations
    public RTIntNVar JSn;
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealDomain JSx;
    public RTRealNVar JSx__min;
    public RTRealNVar JSx__max;
    public RTIntNVar JSx__ct;
    public RTRealNVar JSx__delta;
    public RTRealDomain JSi;
    public RTRealNVar JSi__min;
    public RTRealNVar JSi__max;
    public RTIntNVar JSi__ct;
    public RTRealNVar JSi__delta;
    public RTRealNVar JSuIn;
    public RTRealNVar JSu;
    public RTRealNVar JSk;
    public RTRealNVar JSsum__call0;
    public RTRealNVar JSuOut;
    public RTRealNVar JSu__init;
    public RTRealNVar JSk__Dx;
     
    // F&P declarations
    public RTXFunc JSsum;
    public RTXFuncCall JSsum__1;
    
    // solver declarations
    public PDE1Problem__u pde1problem__u;
     
    // RT model constructor
    public JS100pde_nparallel(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100pde_nparallel", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSn = new RTIntNVar(this, "n","dimensionless",1,null);
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSx__min = new RTRealNVar(this, "x.min","dimensionless",1,null);
        JSx__max = new RTRealNVar(this, "x.max","dimensionless",1,null);
        JSx__ct = new RTIntNVar(this, "x.ct","dimensionless",2,null);
        JSx__delta = new RTRealNVar(this, "x.delta","dimensionless",1,null);
        JSi__min = new RTRealNVar(this, "i.min","dimensionless",1,null);
        JSi__max = new RTRealNVar(this, "i.max","dimensionless",2,null);
        JSi__ct = new RTIntNVar(this, "i.ct","dimensionless",2,null);
        JSi__delta = new RTRealNVar(this, "i.delta","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSx = new RTRealDomain(this, "x","dimensionless",2,JSx__min,JSx__max,JSx__delta,JSx__ct);
        JSi = new RTRealDomain(this, "i","dimensionless",2,JSi__min,JSi__max,JSi__delta,JSi__ct);
        JSuIn = new RTRealNVar(this, "uIn","dimensionless",5,new RTRealDomain[] {JSt});
        JSu = new RTRealNVar(this, "u","dimensionless",5,new RTRealDomain[] {JSt,JSx,JSi});
        JSk = new RTRealNVar(this, "k","dimensionless",3,new RTRealDomain[] {JSx});
        JSsum__call0 = new RTRealNVar(this, "sum__call0","dimensionless",5,new RTRealDomain[] {JSt,JSx});
        JSsum__call0.setPrivate();
        JSuOut = new RTRealNVar(this, "uOut","dimensionless",5,new RTRealDomain[] {JSt,JSx});
        JSu__init = new RTRealNVar(this, "u__init","dimensionless",1,new RTRealDomain[] {JSx,JSi});
        JSk__Dx = new RTRealNVar(this, "k:x","dimensionless",3,new RTRealDomain[] {JSx});
         
        // input defaults
        JSn.setDefault("3");
        JSt__min.setDefault("0");
        JSt__max.setDefault("3");
        JSt__delta.setDefault(".25");
        JSx__min.setDefault("0");
        JSx__max.setDefault("1");
        JSx__delta.setDefault(".05");
        JSi__min.setDefault("1");
        JSi__delta.setDefault("1");
        JSu__init.setDefault("0");
        
        // F&P initialization
        JSsum = new JSim.jruntime.RTXSum(this, "sum");
        JSsum__1 = new RTXFuncCall(JSsum);
        new RTXFuncArg(JSsum__1, new RTRealDomain[] {JSi}, JSu, true);
        
        // solver instantiation
        pde1problem__u = new PDE1Problem__u(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // PDE problem solving [u]
    public class PDE1Problem__u extends PDE1Problem {
        public PDE1Problem__u(RTModel m) throws Xcept {
            super(m, "PDE1Problem__u");
            setup(JSt,JSx,0,
                new RTRealNVar[] {JSu},
                new RTRealNVar[] {null},
                new RTRealNVar[] {null},
                new RTRealNVar[] {null},
                new RTRealNVar[] {null},
                null, null);
            setSolvedVars(new ASVar[] {JSu});
            loopDomains = new RTRealDomain[] {JSi};
        }
        public boolean usesPDESolver(int which) {
            switch(which) {
            case ASModel.PDE_LSFEA: return false;
            case ASModel.PDE_MacCormack: return true;
            case ASModel.PDE_Toms731: return true;
            default: return false;
            }
        }
        public void common_LHB(RTContext ctxt,double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            npdeCallbacks[ProfileData.common_LHB]++;
            ((XContext) ctxt).common_LHB__u(t,us,f1s,f2s,f3s);
        }
        public void common_RHB(RTContext ctxt,double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            npdeCallbacks[ProfileData.common_RHB]++;
            ((XContext) ctxt).common_RHB__u(t,us,f1s,f2s,f3s);
        }
        public void MacCormack_State(RTContext ctxt,double t,double x,double[] us,double[] cxs,double[] cxxs,double[] srcs) throws Xcept {
            npdeCallbacks[ProfileData.MacCormack_State]++;
            ((XContext) ctxt).MacCormack_State__u(t,x,us,cxs,cxxs,srcs);
        }
        public void Toms731_State(RTContext ctxt,double t,double x,double[] us,double[] uxs,double[] cs,double[] qs,double[] rs) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_State]++;
            ((XContext) ctxt).Toms731_State__u(t,x,us,uxs,cs,qs,rs);
        }
        public void Toms731_LHB(RTContext ctxt,double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_LHB]++;
            ((XContext) ctxt).Toms731_LHB__u(t,us,uxs,betas,gammas);
        }
        public void Toms731_RHB(RTContext ctxt,double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_RHB]++;
            ((XContext) ctxt).Toms731_RHB__u(t,us,uxs,betas,gammas);
        }
    }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0n;
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js0x__min;
        private double js0x__max;
        private double js0x__delta;
        private double js0i__min;
        private double js0i__delta;
        private double js3u__Dx;
        private double js3t;
        private double js3x;
        private double js3u;
        private double js3k;
        private double js3uIn;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0i__delta = realVal(JSi__delta);
            js0i__min = realVal(JSi__min);
            js0x__delta = realVal(JSx__delta);
            js0x__max = realVal(JSx__max);
            js0x__min = realVal(JSx__min);
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            js0n = realVal(JSn);
            set(JSi__max,js0n);
            set(JSx__ct,(((js0x__max-js0x__min)/js0x__delta)+1.5));
            set(JSx__max,js0x__max = (js0x__min+(js0x__delta*(realVal(JSx__ct)-1))));
            setDomain(JSx);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            set(JSi__ct,(((realVal(JSi__max)-js0i__min)/js0i__delta)+1.5));
            set(JSi__max,(js0i__min+(js0i__delta*(realVal(JSi__ct)-1))));
            setDomain(JSi);
            startPhase(3, JSx);
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__0x();
            startPhase(4, null);
            startPhase(5, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__1t();
            startPhase(6, null);
        }
        
        // ctxt loop iteration for domain x
        public void loop__0x() throws Xcept {
            set(JSk__Dx,1);
            set(JSk,realVal(JSx));
            for (setLHBC(JSi); isSet(JSi); moveRight(JSi)) loop__0x__0i();
            interruptCheck();
            updatePhase(JSx);
        }
        
        // ctxt loop iteration for domain i
        public void loop__0x__0i() throws Xcept {
            // input parm: u__init=0
            setLHBC(JSt);
            set(JSu,realVal(JSu__init));
            interruptCheck();
        }
        
        // ctxt loop iteration for domain t
        public void loop__1t() throws Xcept {
            set(JSuIn,(1-NatMath.exp((realVal(JSt)*(-1)))));
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__1t__0x();
            for (setLHBC(JSi); isSet(JSi); moveRight(JSi)) loop__1t__1i();
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt loop iteration for domain x
        public void loop__1t__0x() throws Xcept {
            set(JSsum__call0,JSsum__1.realVal(this));
            set(JSuOut,realVal(JSsum__call0));
            interruptCheck();
        }
        
        // ctxt loop iteration for domain i
        public void loop__1t__1i() throws Xcept {
            pde1problem__u.solve(this);
            interruptCheck();
        }
        
        public void MacCormack_State__u(double t,double x,double[] us,double[] cxs,double[] cxxs,double[] srcs) throws Xcept {
            js3t=t;
            js3u=us[0];
            js3x=x;
            js3k = js3x;
            interruptCheck();
            cxs[0]=((-1)*(-1));
            cxxs[0]=((js3k*(-1))*(-1));
            srcs[0]=0;
        }
        public void Toms731_State__u(double t,double x,double[] us,double[] uxs,double[] cs,double[] qs,double[] rs) throws Xcept {
            js3t=t;
            js3u=us[0];
            js3x=x;
            js3u__Dx=uxs[0];
            js3k = js3x;
            interruptCheck();
            cs[0]=1;
            qs[0]=((((realVal(JSk__Dx)*(-1))*(-1))*js3u__Dx)-(js3u__Dx*(-1)));
            rs[0]=(js3k*js3u__Dx);
        }
        public void common_LHB__u(double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            js3t=t;
            js3u=us[0];
            js3x=js0x__min;
            js3uIn = (1-NatMath.exp((js3t*(-1))));
            interruptCheck();
            f1s[0]=1;
            f2s[0]=0;
            f3s[0]=((js3uIn*(-1))*(-1));
        }
        public void Toms731_LHB__u(double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            js3t=t;
            js3u=us[0];
            js3u__Dx=uxs[0];
            js3x=js0x__min;
            js3uIn = (1-NatMath.exp((js3t*(-1))));
            interruptCheck();
            betas[0]=0;
            gammas[0]=(js3u-js3uIn);
        }
        public void common_RHB__u(double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            js3t=t;
            js3u=us[0];
            js3x=js0x__max;
            interruptCheck();
            f1s[0]=0;
            f2s[0]=1;
            f3s[0]=0;
        }
        public void Toms731_RHB__u(double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            js3t=t;
            js3u=us[0];
            js3u__Dx=uxs[0];
            js3x=js0x__max;
            interruptCheck();
            betas[0]=1;
            gammas[0]=0;
        }
        
        // ctxt methods for F&P
        protected double JSsum__1_0_getRealVal() throws Xcept {
            return realVal(JSu);
        }
    }
     
}


