// JSim generated model JS100pde_imp_ic
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100pde_imp_ic model
public class JS100pde_imp_ic extends RTModel {

    // variable declarations
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealDomain JSx;
    public RTRealNVar JSx__min;
    public RTRealNVar JSx__max;
    public RTIntNVar JSx__ct;
    public RTRealNVar JSx__delta;
    public RTRealNVar JSa;
    public RTRealNVar JSu;
    public RTRealNVar JSv;
     
    // F&P declarations
    
    // solver declarations
    public Fzero1Problem__0x__u fzero1problem__0x__u;
    public PDE1Problem__v pde1problem__v;
     
    // RT model constructor
    public JS100pde_imp_ic(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100pde_imp_ic", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSx__min = new RTRealNVar(this, "x.min","dimensionless",1,null);
        JSx__max = new RTRealNVar(this, "x.max","dimensionless",1,null);
        JSx__ct = new RTIntNVar(this, "x.ct","dimensionless",2,null);
        JSx__delta = new RTRealNVar(this, "x.delta","dimensionless",1,null);
        JSa = new RTRealNVar(this, "a","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSx = new RTRealDomain(this, "x","dimensionless",2,JSx__min,JSx__max,JSx__delta,JSx__ct);
        JSu = new RTRealNVar(this, "u","dimensionless",5,new RTRealDomain[] {JSt,JSx});
        JSv = new RTRealNVar(this, "v","dimensionless",5,new RTRealDomain[] {JSt,JSx});
         
        // input defaults
        JSt__min.setDefault("0");
        JSt__max.setDefault("5");
        JSt__delta.setDefault(".2");
        JSx__min.setDefault("0");
        JSx__max.setDefault("1");
        JSx__delta.setDefault(".05");
        JSa.setDefault("1");
        
        // F&P initialization
        
        // solver instantiation
        fzero1problem__0x__u = new Fzero1Problem__0x__u(this);
        pde1problem__v = new PDE1Problem__v(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // Implicit block solving [u(t.min), v(t.min)]
    public class Fzero1Problem__0x__u extends Fzero1Problem {
        public Fzero1Problem__0x__u(RTModel m) throws Xcept {
            super(m, "Fzero1Problem__0x__u",2);
        }
        public void setCoef(RTContext ctxt,double[] mat,double[] vec,double[] rec) throws Xcept {
            ((XContext) ctxt).setCoef__0x__u(mat,vec,rec);
        }
        public void setBounds(RTContext ctxt,double[] vmin,double[] vmax,double[] vguess) throws Xcept {
            ((XContext) ctxt).setBounds__0x__u(vmin,vmax,vguess);
        }
        public void calcZero(RTContext ctxt,double[] val,double[] zero) throws Xcept {
            ((XContext) ctxt).calcZero__0x__u(val,zero);
            ncallbacks++;
        }
        public void export(RTContext ctxt,double[] val) throws Xcept {
            ((XContext) ctxt).export__0x__u(val);
        }
    }
     
    // PDE problem solving [v, u]
    public class PDE1Problem__v extends PDE1Problem {
        public PDE1Problem__v(RTModel m) throws Xcept {
            super(m, "PDE1Problem__v");
            setup(JSt,JSx,0,
                new RTRealNVar[] {JSv,JSu},
                new RTRealNVar[] {null,null},
                new RTRealNVar[] {null,null},
                new RTRealNVar[] {null,null},
                new RTRealNVar[] {null,null},
                null, null);
            setSolvedVars(new ASVar[] {JSv,JSu});
        }
        public boolean usesPDESolver(int which) {
            switch(which) {
            case ASModel.PDE_LSFEA: return true;
            case ASModel.PDE_MacCormack: return true;
            case ASModel.PDE_Toms731: return true;
            default: return false;
            }
        }
        public void common_LHB(RTContext ctxt,double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            npdeCallbacks[ProfileData.common_LHB]++;
            ((XContext) ctxt).common_LHB__v(t,us,f1s,f2s,f3s);
        }
        public void common_RHB(RTContext ctxt,double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            npdeCallbacks[ProfileData.common_RHB]++;
            ((XContext) ctxt).common_RHB__v(t,us,f1s,f2s,f3s);
        }
        public void LSFEA_tstep(RTContext ctxt,double t,double x,double[] us,double[] uts) throws Xcept {
            npdeCallbacks[ProfileData.LSFEA_tstep]++;
            ((XContext) ctxt).LSFEA_tstep__v(t,x,us,uts);
        }
        public void LSFEA_xstep(RTContext ctxt,double t,double x,double[] us,double[] uxcoefs,double[] uxxcoefs) throws Xcept {
            npdeCallbacks[ProfileData.LSFEA_xstep]++;
            ((XContext) ctxt).LSFEA_xstep__v(t,x,us,uxcoefs,uxxcoefs);
        }
        public void MacCormack_State(RTContext ctxt,double t,double x,double[] us,double[] cxs,double[] cxxs,double[] srcs) throws Xcept {
            npdeCallbacks[ProfileData.MacCormack_State]++;
            ((XContext) ctxt).MacCormack_State__v(t,x,us,cxs,cxxs,srcs);
        }
        public void Toms731_State(RTContext ctxt,double t,double x,double[] us,double[] uxs,double[] cs,double[] qs,double[] rs) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_State]++;
            ((XContext) ctxt).Toms731_State__v(t,x,us,uxs,cs,qs,rs);
        }
        public void Toms731_LHB(RTContext ctxt,double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_LHB]++;
            ((XContext) ctxt).Toms731_LHB__v(t,us,uxs,betas,gammas);
        }
        public void Toms731_RHB(RTContext ctxt,double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            npdeCallbacks[ProfileData.Toms731_RHB]++;
            ((XContext) ctxt).Toms731_RHB__v(t,us,uxs,betas,gammas);
        }
    }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js0x__min;
        private double js0x__max;
        private double js0x__delta;
        private double js0a;
        private double js2u;
        private double js2v;
        private double js2v__Dx;
        private double js2u__Dx;
        private double js2t;
        private double js2x;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0a = realVal(JSa);
            js0x__delta = realVal(JSx__delta);
            js0x__max = realVal(JSx__max);
            js0x__min = realVal(JSx__min);
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            set(JSx__ct,(((js0x__max-js0x__min)/js0x__delta)+1.5));
            set(JSx__max,js0x__max = (js0x__min+(js0x__delta*(realVal(JSx__ct)-1))));
            setDomain(JSx);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            startPhase(3, JSx);
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__0x();
            startPhase(4, null);
            startPhase(5, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__1t();
            startPhase(6, null);
        }
        
        // ctxt loop iteration for domain x
        public void loop__0x() throws Xcept {
            setLHBC(JSt);
            setLHBC(JSt);
            fzero1problem__0x__u.solve(this);
            interruptCheck();
            updatePhase(JSx);
        }
        
        // ctxt methods for Fzero1Problem__0x__u
        public void setCoef__0x__u(double[] mat,double[] vec,double[] rec) throws Xcept {
            mat[0]=1;
            mat[1]=1;
            mat[2]=1;
            mat[3]=(-1);
            vec[0]=(NatMath.pow(js0a,2)*(-1));
            vec[1]=(js0a*(-1));
        }
        public void setBounds__0x__u(double[] vmin,double[] vmax,double[] vguess) throws Xcept {
        }
        public void calcZero__0x__u(double[] vals,double[] zeroes) throws Xcept {
            js2u=vals[0];
            js2v=vals[1];
            zeroes[0]=((js2u+js2v)-NatMath.pow(js0a,2));
            zeroes[1]=((js2u-js2v)-js0a);
        }
        public void export__0x__u(double[] vals) throws Xcept {
            set(JSu,vals[0]);
            set(JSv,vals[1]);
        }
        // ctxt loop iteration for domain t
        public void loop__1t() throws Xcept {
            pde1problem__v.solve(this);
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt methods for PDE Block-t(x) [v, u]
        public void LSFEA_tstep__v(double t,double x,double[] us,double[] uts) throws Xcept {
            js2t=t;
            js2v=us[0];
            js2u=us[1];
            js2x=x;
            interruptCheck();
            uts[0]=(((js2u-js2v)*(-1))*(-1));
            uts[1]=(((js2v-js2u)*(-1))*(-1));
        }
        public void LSFEA_xstep__v(double t,double x,double[] us,double[] uxcoefs,double[] uxxcoefs) throws Xcept {
            js2t=t;
            js2v=us[0];
            js2u=us[1];
            js2x=x;
            interruptCheck();
            uxcoefs[0]=0;
            uxxcoefs[0]=((-1)*(-1));
            uxcoefs[1]=0;
            uxxcoefs[1]=((-1)*(-1));
        }
        public void MacCormack_State__v(double t,double x,double[] us,double[] cxs,double[] cxxs,double[] srcs) throws Xcept {
            js2t=t;
            js2v=us[0];
            js2u=us[1];
            js2x=x;
            interruptCheck();
            cxs[0]=0;
            cxxs[0]=((-1)*(-1));
            srcs[0]=(((js2u-js2v)*(-1))*(-1));
            cxs[1]=0;
            cxxs[1]=((-1)*(-1));
            srcs[1]=(((js2v-js2u)*(-1))*(-1));
        }
        public void Toms731_State__v(double t,double x,double[] us,double[] uxs,double[] cs,double[] qs,double[] rs) throws Xcept {
            js2t=t;
            js2v=us[0];
            js2u=us[1];
            js2x=x;
            js2v__Dx=uxs[0];
            js2u__Dx=uxs[1];
            interruptCheck();
            cs[0]=1;
            qs[0]=((js2u-js2v)*(-1));
            rs[0]=js2v__Dx;
            cs[1]=1;
            qs[1]=((js2v-js2u)*(-1));
            rs[1]=js2u__Dx;
        }
        public void common_LHB__v(double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            js2t=t;
            js2v=us[0];
            js2u=us[1];
            js2x=js0x__min;
            interruptCheck();
            f1s[0]=0;
            f2s[0]=1;
            f3s[0]=0;
            f1s[1]=0;
            f2s[1]=1;
            f3s[1]=0;
        }
        public void Toms731_LHB__v(double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            js2t=t;
            js2v=us[0];
            js2u=us[1];
            js2v__Dx=uxs[0];
            js2u__Dx=uxs[1];
            js2x=js0x__min;
            interruptCheck();
            betas[0]=1;
            gammas[0]=0;
            betas[1]=1;
            gammas[1]=0;
        }
        public void common_RHB__v(double t,double[] us,double[] f1s,double[] f2s,double[] f3s) throws Xcept {
            js2t=t;
            js2v=us[0];
            js2u=us[1];
            js2x=js0x__max;
            interruptCheck();
            f1s[0]=0;
            f2s[0]=1;
            f3s[0]=0;
            f1s[1]=0;
            f2s[1]=1;
            f3s[1]=0;
        }
        public void Toms731_RHB__v(double t,double[] us,double[] uxs,double[] betas,double[] gammas) throws Xcept {
            js2t=t;
            js2v=us[0];
            js2u=us[1];
            js2v__Dx=uxs[0];
            js2u__Dx=uxs[1];
            js2x=js0x__max;
            interruptCheck();
            betas[0]=1;
            gammas[0]=0;
            betas[1]=1;
            gammas[1]=0;
        }
        
        // ctxt methods for F&P
    }
     
}


