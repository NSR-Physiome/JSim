// JSim generated model JS100imp3
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100imp3 model
public class JS100imp3 extends RTModel {

    // variable declarations
    public RTRealNVar JSa;
    public RTRealNVar JSb;
    public RTRealNVar JSc;
    public RTRealNVar JSd;
    public RTRealNVar JSe;
     
    // F&P declarations
    
    // solver declarations
    public Fzero1Problem__a fzero1problem__a;
     
    // RT model constructor
    public JS100imp3(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100imp3", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSa = new RTRealNVar(this, "a","dimensionless",2,null);
        JSb = new RTRealNVar(this, "b","dimensionless",2,null);
        JSc = new RTRealNVar(this, "c","dimensionless",2,null);
        JSd = new RTRealNVar(this, "d","dimensionless",2,null);
        JSe = new RTRealNVar(this, "e","dimensionless",2,null);
         
        // input defaults
        
        // F&P initialization
        
        // solver instantiation
        fzero1problem__a = new Fzero1Problem__a(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // Implicit block solving [a, b, c]
    public class Fzero1Problem__a extends Fzero1Problem {
        public Fzero1Problem__a(RTModel m) throws Xcept {
            super(m, "Fzero1Problem__a",3);
        }
        public void setCoef(RTContext ctxt,double[] mat,double[] vec,double[] rec) throws Xcept {
            ((XContext) ctxt).setCoef__a(mat,vec,rec);
        }
        public void setBounds(RTContext ctxt,double[] vmin,double[] vmax,double[] vguess) throws Xcept {
            ((XContext) ctxt).setBounds__a(vmin,vmax,vguess);
        }
        public void calcZero(RTContext ctxt,double[] val,double[] zero) throws Xcept {
            ((XContext) ctxt).calcZero__a(val,zero);
            ncallbacks++;
        }
        public void export(RTContext ctxt,double[] val) throws Xcept {
            ((XContext) ctxt).export__a(val);
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js1a;
        private double js1b;
        private double js1c;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            fzero1problem__a.solve(this);
            set(JSe,(4-realVal(JSc)));
            set(JSd,(2-realVal(JSb)));
        }
        
        // ctxt methods for Fzero1Problem__a
        public void setCoef__a(double[] mat,double[] vec,double[] rec) throws Xcept {
            mat[0]=1;
            mat[1]=1;
            mat[2]=1;
            mat[3]=1;
            mat[4]=(-1);
            mat[5]=(-1);
            mat[6]=1;
            mat[7]=(-1);
            mat[8]=1;
            vec[0]=(-1);
            vec[1]=(-3);
            vec[2]=(-5);
        }
        public void setBounds__a(double[] vmin,double[] vmax,double[] vguess) throws Xcept {
        }
        public void calcZero__a(double[] vals,double[] zeroes) throws Xcept {
            js1a=vals[0];
            js1b=vals[1];
            js1c=vals[2];
            zeroes[0]=(((js1a+js1b)+js1c)-1);
            zeroes[1]=(((js1a-js1b)-js1c)-3);
            zeroes[2]=(((js1a-js1b)+js1c)-5);
        }
        public void export__a(double[] vals) throws Xcept {
            set(JSa,vals[0]);
            set(JSb,vals[1]);
            set(JSc,vals[2]);
        }
        // ctxt methods for F&P
    }
     
}


