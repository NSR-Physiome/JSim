// JSim generated model JS100dom2_pull
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100dom2_pull model
public class JS100dom2_pull extends RTModel {

    // variable declarations
    public RTRealDomain JSx;
    public RTRealNVar JSx__min;
    public RTRealNVar JSx__max;
    public RTIntNVar JSx__ct;
    public RTRealNVar JSx__delta;
    public RTRealDomain JSy;
    public RTRealNVar JSy__min;
    public RTRealNVar JSy__max;
    public RTIntNVar JSy__ct;
    public RTRealNVar JSy__delta;
    public RTRealNVar JSa;
    public RTRealNVar JSaf;
    public RTRealNVar JSb;
    public RTRealNVar JSbf;
    public RTRealNVar JSc;
     
    // F&P declarations
    
    // solver declarations
     
    // RT model constructor
    public JS100dom2_pull(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100dom2_pull", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSx__min = new RTRealNVar(this, "x.min","dimensionless",1,null);
        JSx__max = new RTRealNVar(this, "x.max","dimensionless",1,null);
        JSx__ct = new RTIntNVar(this, "x.ct","dimensionless",2,null);
        JSx__delta = new RTRealNVar(this, "x.delta","dimensionless",1,null);
        JSy__min = new RTRealNVar(this, "y.min","dimensionless",1,null);
        JSy__max = new RTRealNVar(this, "y.max","dimensionless",1,null);
        JSy__ct = new RTIntNVar(this, "y.ct","dimensionless",2,null);
        JSy__delta = new RTRealNVar(this, "y.delta","dimensionless",1,null);
        JSaf = new RTRealNVar(this, "af","dimensionless",4,null);
        JSbf = new RTRealNVar(this, "bf","dimensionless",6,null);
        JSx = new RTRealDomain(this, "x","dimensionless",2,JSx__min,JSx__max,JSx__delta,JSx__ct);
        JSy = new RTRealDomain(this, "y","dimensionless",2,JSy__min,JSy__max,JSy__delta,JSy__ct);
        JSa = new RTRealNVar(this, "a","dimensionless",3,new RTRealDomain[] {JSx});
        JSb = new RTRealNVar(this, "b","dimensionless",5,new RTRealDomain[] {JSy});
        JSc = new RTRealNVar(this, "c","dimensionless",7,new RTRealDomain[] {JSx});
         
        // input defaults
        JSx__min.setDefault("0");
        JSx__max.setDefault("1");
        JSx__delta.setDefault("1");
        JSy__min.setDefault("0");
        JSy__max.setDefault("1");
        JSy__delta.setDefault("1");
        
        // F&P initialization
        
        // solver instantiation
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0x__min;
        private double js0x__max;
        private double js0x__delta;
        private double js0y__min;
        private double js0y__max;
        private double js0y__delta;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0y__delta = realVal(JSy__delta);
            js0y__max = realVal(JSy__max);
            js0y__min = realVal(JSy__min);
            js0x__delta = realVal(JSx__delta);
            js0x__max = realVal(JSx__max);
            js0x__min = realVal(JSx__min);
            set(JSy__ct,(((js0y__max-js0y__min)/js0y__delta)+1.5));
            set(JSy__max,js0y__max = (js0y__min+(js0y__delta*(realVal(JSy__ct)-1))));
            setDomain(JSy);
            set(JSx__ct,(((js0x__max-js0x__min)/js0x__delta)+1.5));
            set(JSx__max,js0x__max = (js0x__min+(js0x__delta*(realVal(JSx__ct)-1))));
            setDomain(JSx);
            startPhase(3, JSx);
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__0x();
            startPhase(4, null);
            set(JSaf,realVal(JSa, new double[] {js0x__max}));
            startPhase(5, JSy);
            for (setLHBC(JSy); isSet(JSy); moveRight(JSy)) loop__1y();
            startPhase(6, null);
            set(JSbf,realVal(JSb, new double[] {js0y__max}));
            startPhase(7, JSx);
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__2x();
            startPhase(8, null);
        }
        
        // ctxt loop iteration for domain x
        public void loop__0x() throws Xcept {
            set(JSa,realVal(JSx));
            interruptCheck();
            updatePhase(JSx);
        }
        
        // ctxt loop iteration for domain y
        public void loop__1y() throws Xcept {
            set(JSb,(realVal(JSy)+realVal(JSaf)));
            interruptCheck();
            updatePhase(JSy);
        }
        
        // ctxt loop iteration for domain x
        public void loop__2x() throws Xcept {
            set(JSc,(realVal(JSx)+realVal(JSbf)));
            interruptCheck();
            updatePhase(JSx);
        }
        
        // ctxt methods for F&P
    }
     
}


