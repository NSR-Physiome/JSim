==== Planner Log ====
Plan options=[maxBuildTime=120, maxImplicitBlock=10, initNaN=false, abortNaN=false, traceNaN=false, traceVars=, ignoreAllOverspec=false, ignoreAllUnderspec=false, splitBlocks=false, parallelize=false]
Loading Variables
  add var: realDomain time day
  add var: real time.min day
  add var: extern real time.max day
  add var: int time.ct
  add var: extern real time.delta day
  add var: real phi_I(time) cells_per_mm3
  add var: real alpha dimensionless
  add var: real k1 dimensionless
  add var: real k2 first_order_rate_constant
  add var: real k3 per_cells_per_mm3
  add var: real d1 first_order_rate_constant
  add var: real phi_R(time) cells_per_mm3
  add var: real K_T(time) cells_per_mm3_per_day
  add var: real T(time) pg_per_mm3
  add var: real k4 second_order_rate_constant
  add var: real d2 first_order_rate_constant
  add var: real tau1 mm6_cells_per_pg3_day
  add var: real tau2 mm3_cells_per_pg2_day
  add var: real tau3 cells_per_pg_day
  add var: real tau4 cells_per_mm3_day
  add var: real phi_I:time(time) cells_per_mm3/day
  add var: real phi_R:time(time) cells_per_mm3/day
  add var: real T:time(time) pg_per_mm3/day
Loading Constraints
  time.min=0 :: [time.min]
  when (time=time.min) phi_I=200 :: [phi_I(time.min)]
  alpha=.8 :: [alpha]
  k1=.05 :: [k1]
  k2=.693 :: [k2]
  k3=.002 :: [k3]
  d1=.2 :: [d1]
  when (time=time.min) phi_R=200 :: [phi_R(time.min)]
  when (time=time.min) T=6 :: [T(time.min)]
  k4=.07 :: [k4]
  d2=9.1 :: [d2]
  tau1=(-2.47) :: [tau1]
  tau2=21.94 :: [tau2]
  tau3=6.41 :: [tau3]
  tau4=1.75 :: [tau4]
  phi_I:time=(alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I) :: [phi_I:time, alpha, K_T, k1, k2, phi_I, k3, phi_R, d1]
  phi_R:time=((1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R) :: [phi_R:time, alpha, K_T, k1, k2, phi_R, k3, phi_I, d1]
  T:time=(k4*phi_I-d2*T) :: [T:time, k4, phi_I, d2, T]
  K_T=(tau1*T^3+tau2*T^2+tau3*T+tau4) :: [K_T, tau1, T, tau2, tau3, tau4]
Input      phase completed with 0 errors, 0 warnings.

Toolbox phase starting ...
  add tool: domain time
  add tool: extern time.max
  add tool: extern time.delta
Toolbox phase - cycle 1:
  check eqn: time.min=0; [time.min]
  add tool: time.min=0
  add tool: time.ct=(time.max-time.min)/time.delta+1.5
  check eqn: when (time=time.min) phi_I=200; [phi_I(time.min)]
  add tool: phi_I(time.min)=200
  check eqn: alpha=.8; [alpha]
  add tool: alpha=.8
  check eqn: k1=.05; [k1]
  add tool: k1=.05
  check eqn: k2=.693; [k2]
  add tool: k2=.693
  check eqn: k3=.002; [k3]
  add tool: k3=.002
  check eqn: d1=.2; [d1]
  add tool: d1=.2
  check eqn: when (time=time.min) phi_R=200; [phi_R(time.min)]
  add tool: phi_R(time.min)=200
  check eqn: when (time=time.min) T=6; [T(time.min)]
  add tool: T(time.min)=6
  check eqn: k4=.07; [k4]
  add tool: k4=.07
  check eqn: d2=9.1; [d2]
  add tool: d2=9.1
  check eqn: tau1=(-2.47); [tau1]
  add tool: tau1=-2.47
  check eqn: tau2=21.94; [tau2]
  add tool: tau2=21.94
  check eqn: tau3=6.41; [tau3]
  add tool: tau3=6.41
  check eqn: tau4=1.75; [tau4]
  add tool: tau4=1.75
  check eqn: phi_I:time=(alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I); [phi_I:time, K_T]
  check eqn: phi_R:time=((1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R); [phi_R:time, K_T]
  check eqn: T:time=(k4*phi_I-d2*T); [T:time, phi_I]
  check eqn: K_T=(tau1*T^3+tau2*T^2+tau3*T+tau4); [K_T, T]
  add tool: ODE phi_I: []
  updated ODE(phi_I) with phi_I(time.min)=200
  add tool: ODE phi_R: []
  updated ODE(phi_R) with phi_R(time.min)=200
  add tool: ODE T: []
  updated ODE(T) with T(time.min)=6
Toolbox phase - cycle 1:
  check eqn: phi_I:time=(alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I); [phi_I:time, K_T]
  check eqn: phi_R:time=((1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R); [phi_R:time, K_T]
  check eqn: T:time=(k4*phi_I-d2*T); [T:time]
  add tool: T:time=k4*phi_I-d2*T
  check eqn: K_T=(tau1*T^3+tau2*T^2+tau3*T+tau4); [K_T]
  add tool: K_T=tau1*T^3+tau2*T^2+tau3*T+tau4
  updated ODE(T) with T:time=k4*phi_I-d2*T
    T is now entirely solved
Toolbox phase - cycle 1:
  check eqn: phi_I:time=(alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I); [phi_I:time]
  add tool: phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I
  check eqn: phi_R:time=((1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R); [phi_R:time]
  add tool: phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R
  updated ODE(phi_I) with phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I
    phi_I is now entirely solved
  updated ODE(phi_R) with phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R
    phi_R is now entirely solved
Toolbox phase - all cycles completed
  add var: real phi_I__init cells_per_mm3
  add tool: phi_I__init=200
  add var: real phi_R__init cells_per_mm3
  add tool: phi_R__init=200
  add var: real T__init pg_per_mm3
  add tool: T__init=6
Toolbox    phase completed with 0 errors, 0 warnings.

Sequencing phase starting ...
Tools to sequence:
  T__init=6 :: [T__init]<<[]
  phi_R__init=200 :: [phi_R__init]<<[]
  phi_I__init=200 :: [phi_I__init]<<[]
  @time T:time=k4*phi_I-d2*T :: [T:time]<<[k4, phi_I, d2, T]
  @time phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R :: [phi_R:time]<<[alpha, K_T, k1, k2, phi_R, k3, phi_I, d1]
  @time phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I :: [phi_I:time]<<[alpha, K_T, k1, k2, phi_I, k3, phi_R, d1]
  tau4=1.75 :: [tau4]<<[]
  tau3=6.41 :: [tau3]<<[]
  tau2=21.94 :: [tau2]<<[]
  tau1=-2.47 :: [tau1]<<[]
  d2=9.1 :: [d2]<<[]
  k4=.07 :: [k4]<<[]
  @time ODE T: T:time=k4*phi_I-d2*T :: [T, T(time.max)]<<[k4, phi_I, d2, T(time.min), T:time]
  @time K_T=tau1*T^3+tau2*T^2+tau3*T+tau4 :: [K_T]<<[tau1, T, tau2, tau3, tau4]
  @time ODE phi_R: phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R :: [phi_R, phi_R(time.max)]<<[alpha, K_T, k1, k2, k3, phi_I, d1, phi_R(time.min), phi_R:time]
  d1=.2 :: [d1]<<[]
  k3=.002 :: [k3]<<[]
  k2=.693 :: [k2]<<[]
  k1=.05 :: [k1]<<[]
  alpha=.8 :: [alpha]<<[]
  @time ODE phi_I: phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I :: [phi_I, phi_I(time.max)]<<[alpha, K_T, k1, k2, k3, phi_R, d1, phi_I(time.min), phi_I:time]
  extern time.delta :: [time.delta]<<[]
  time.ct=(time.max-time.min)/time.delta+1.5 :: [time.ct]<<[time.max, time.min, time.delta]
  extern time.max :: [time.max]<<[]
  time.min=0 :: [time.min]<<[]
  domain time :: [time]<<[time.min, time.max, time.ct, time.delta]
  T(time.min)=T__init :: [T(time.min)]<<[T__init]
  phi_R(time.min)=phi_R__init :: [phi_R(time.min)]<<[phi_R__init]
  phi_I(time.min)=phi_I__init :: [phi_I(time.min)]<<[phi_I__init]
Events to seqence:
Relations to sequence:
Creating vuTools map ...
Adding reuse & query tools ...
Creating MainGraph ...
loopOrder=[time]
  addNode T__init seqLoops=() phase=main fft=null
  addNode phi_R__init seqLoops=() phase=main fft=null
  addNode phi_I__init seqLoops=() phase=main fft=null
  addNode T:time seqLoops=(time) phase=time#1 fft=null
  addNode phi_R:time seqLoops=(time) phase=time#1 fft=null
  addNode phi_I:time seqLoops=(time) phase=time#1 fft=null
  addNode tau4 seqLoops=() phase=main fft=null
  addNode tau3 seqLoops=() phase=main fft=null
  addNode tau2 seqLoops=() phase=main fft=null
  addNode tau1 seqLoops=() phase=main fft=null
  addNode d2 seqLoops=() phase=main fft=null
  addNode k4 seqLoops=() phase=main fft=null
  addNode T seqLoops=(time) phase=time#1 fft=time
  addNode K_T seqLoops=(time) phase=time#1 fft=null
  addNode phi_R seqLoops=(time) phase=time#1 fft=time
  addNode d1 seqLoops=() phase=main fft=null
  addNode k3 seqLoops=() phase=main fft=null
  addNode k2 seqLoops=() phase=main fft=null
  addNode k1 seqLoops=() phase=main fft=null
  addNode alpha seqLoops=() phase=main fft=null
  addNode phi_I seqLoops=(time) phase=time#1 fft=time
  addNode time.delta seqLoops=() phase=main fft=null
  addNode time.ct seqLoops=() phase=main fft=null
  addNode time.max seqLoops=() phase=main fft=null
  addNode time.min seqLoops=() phase=main fft=null
  addNode time seqLoops=() phase=main fft=null
  addNode T(time.min) seqLoops=() phase=main fft=null
  addNode phi_R(time.min) seqLoops=() phase=main fft=null
  addNode phi_I(time.min) seqLoops=() phase=main fft=null
Saving graph pullfinder
Building mainline block ...
Mainline block graph:
building block for phase main
  adding T__init=6 to main
  adding phi_R__init=200 to main
  adding phi_I__init=200 to main
  adding tau4=1.75 to main
  adding tau3=6.41 to main
  adding tau2=21.94 to main
  adding tau1=-2.47 to main
  adding d2=9.1 to main
  adding k4=.07 to main
  adding d1=.2 to main
  adding k3=.002 to main
  adding k2=.693 to main
  adding k1=.05 to main
  adding alpha=.8 to main
  adding extern time.delta to main
  adding extern time.max to main
  adding time.min=0 to main
  adding time.ct=(time.max-time.min)/time.delta+1.5 to main
  adding domain time to main
  adding T(time.min)=T__init to main
  adding phi_R(time.min)=phi_R__init to main
  adding phi_I(time.min)=phi_I__init to main
  subphase time#1 entryEdge=null
building block for phase time#1
  adding T:time=k4*phi_I-d2*T to loop-time
  adding K_T=tau1*T^3+tau2*T^2+tau3*T+tau4 to loop-time
  adding phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R to loop-time
  adding phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I to loop-time
  adding ODE Block-time [T, phi_R, phi_I] to loop-time
  adding loop-time to main
Building ODE Block-time [T, phi_R, phi_I] ...
  adding muTool T:time=k4*phi_I-d2*T
  adding muVar T:time
  adding muTool K_T=tau1*T^3+tau2*T^2+tau3*T+tau4
  adding muVar K_T
  adding muTool phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R
  adding muVar phi_R:time
  adding muTool phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I
  adding muVar phi_I:time
  adding T:time=k4*phi_I-d2*T to ODE Block-time [T, phi_R, phi_I]
  adding K_T=tau1*T^3+tau2*T^2+tau3*T+tau4 to ODE Block-time [T, phi_R, phi_I]
  adding phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R to ODE Block-time [T, phi_R, phi_I]
  adding phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I to ODE Block-time [T, phi_R, phi_I]
Sequencing phase completed with 0 errors, 0 warnings.

==== Main Calculation Block ====
main
  T__init=6
  phi_R__init=200
  phi_I__init=200
  tau4=1.75
  tau3=6.41
  tau2=21.94
  tau1=-2.47
  d2=9.1
  k4=.07
  d1=.2
  k3=.002
  k2=.693
  k1=.05
  alpha=.8
  extern time.delta
  extern time.max
  time.min=0
  time.ct=(time.max-time.min)/time.delta+1.5
  domain time
  T(time.min)=T__init
  phi_R(time.min)=phi_R__init
  phi_I(time.min)=phi_I__init
  loop-time
    T:time=k4*phi_I-d2*T
    K_T=tau1*T^3+tau2*T^2+tau3*T+tau4
    phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R
    phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I
    ODE Block-time vmus=[time, T, phi_R, phi_I, T:time, K_T, phi_R:time, phi_I:time]
      T:time=k4*phi_I-d2*T
      K_T=tau1*T^3+tau2*T^2+tau3*T+tau4
      phi_R:time=(1-alpha)*K_T+k1*k2*phi_R*(1-k3*(phi_I+phi_R))-d1*phi_R
      phi_I:time=alpha*K_T+k1*k2*phi_I*(1-k3*(phi_I+phi_R))-d1*phi_I

