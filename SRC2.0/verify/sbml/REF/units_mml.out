// This model generated automatically from SBML

/* Note: This is an units definition note test. */

// unit definitions
import nsrunit;
unit conversion off;

// SBML property definitions
property sbmlRole=string;
property sbmlName=string;
property sbmlCompartment=string;

// SBML reactions
// v1: x0 => s1  
// v2: s1 => s2  
// v3: s2 => x1  

math main {
  realDomain time second;
  time.min=0;
  extern time.max;
  extern time.delta;

  // variable definitions
  real cell = 1 L;
  real vm = 2 mmol/L/s;
  real km = 2 mM;
  real x0(time) mM;
  real x1(time) mM;
  real s1(time) mM;
  real s2(time) mM;
  real v1(time) millikatal; /* <xhtml:p>Kinetic Law Notes: ((vm * s1)/(km + s1))*cell</xhtml:p> */
  real v2(time) millikatal; /* <xhtml:p>Note: ((vm * s2)/(km + s2))*cell</xhtml:p> */
  real v3(time) millikatal; /* <xhtml:p>((vm * x1)/(km + x1))*cell</xhtml:p> */

  // equations
  when (time=time.min) x0 = 1; 
  (x0*cell):time = -1*v1;
  when (time=time.min) x1 = 1; 
  (x1*cell):time = v3;
  when (time=time.min) s1 = 1; 
  (s1*cell):time = v1 + -1*v2;
  when (time=time.min) s2 = 1; 
  (s2*cell):time = v2 + -1*v3;
  v1 = vm*s1/(km+s1)*cell; /* <xhtml:p>Kinetic Law Notes: ((vm * s1)/(km + s1))*cell</xhtml:p> */
  v2 = vm*s2/(km+s2)*cell; /* <xhtml:p>Note: ((vm * s2)/(km + s2))*cell</xhtml:p> */
  v3 = vm*x1/(km+x1)*cell; /* <xhtml:p>((vm * x1)/(km + x1))*cell</xhtml:p> */

  // variable properties
  cell.sbmlRole="compartment";
  vm.sbmlRole="parameter";
  km.sbmlRole="parameter";
  x0.sbmlRole="species";
  x0.sbmlCompartment="cell";
  x1.sbmlRole="species";
  x1.sbmlCompartment="cell";
  s1.sbmlRole="species";
  s1.sbmlCompartment="cell";
  s2.sbmlRole="species";
  s2.sbmlCompartment="cell";
  v1.sbmlRole="rate";
  v2.sbmlRole="rate";
  v3.sbmlRole="rate";
}

