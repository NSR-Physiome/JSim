
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 12 11:49:35 PDT 2013
//----------------------------------------------------

package JSim.expr;

import JSim.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 12 11:49:35 PDT 2013
  */
public class ExprParser extends java_cup.runtime.lr_parser {
  public NameSpace ns ;

  /** Default constructor. */
  public ExprParser() {super();}

  /** Constructor which sets the default scanner. */
  public ExprParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExprParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\003\000\002\002\004\000\002\002" +
    "\006\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\006\000\002\002\011\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\006\005\000\002\006\003\000\002\006" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\005" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\024\004\014\007\010\011\004\025\011\027" +
    "\015\030\007\031\012\032\006\033\005\001\002\000\024" +
    "\004\014\007\010\011\004\025\011\027\015\030\007\031" +
    "\012\032\006\033\005\001\002\000\054\002\ufffb\004\124" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\026\ufffb\032\ufffb\033\ufffb\001" +
    "\002\000\052\002\001\005\001\006\001\007\001\010\001" +
    "\011\001\012\001\013\001\014\001\015\001\016\001\017" +
    "\001\020\001\021\001\022\001\023\001\024\001\026\001" +
    "\032\001\033\001\001\002\000\052\002\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\026\ufffd\032\ufffd\033\ufffd\001\002\000\024" +
    "\004\014\007\010\011\004\025\011\027\015\030\007\031" +
    "\012\032\006\033\005\001\002\000\004\004\115\001\002" +
    "\000\052\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\032" +
    "\ufffc\033\ufffc\001\002\000\040\002\114\007\024\010\017" +
    "\011\036\012\033\013\040\014\034\015\037\016\022\017" +
    "\021\020\030\021\027\022\035\023\020\024\025\001\002" +
    "\000\024\004\014\007\010\011\004\025\011\027\015\030" +
    "\007\031\012\032\006\033\005\001\002\000\052\002\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\026\ufffe\032\ufffe\033\ufffe\001" +
    "\002\000\044\005\026\007\024\010\017\011\036\012\033" +
    "\013\040\014\034\015\037\016\022\017\021\020\030\021" +
    "\027\022\035\023\020\024\025\032\032\033\023\001\002" +
    "\000\024\004\014\007\010\011\004\025\011\027\015\030" +
    "\007\031\012\032\006\033\005\001\002\000\024\004\014" +
    "\007\010\011\004\025\011\027\015\030\007\031\012\032" +
    "\006\033\005\001\002\000\024\004\014\007\010\011\004" +
    "\025\011\027\015\030\007\031\012\032\006\033\005\001" +
    "\002\000\024\004\014\007\010\011\004\025\011\027\015" +
    "\030\007\031\012\032\006\033\005\001\002\000\012\005" +
    "\uffe4\010\uffe4\012\uffe4\013\106\001\002\000\024\004\014" +
    "\007\010\011\004\025\011\027\015\030\007\031\012\032" +
    "\006\033\005\001\002\000\024\004\014\007\010\011\004" +
    "\025\011\027\015\030\007\031\012\032\006\033\005\001" +
    "\002\000\052\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\026\ufff3" +
    "\032\ufff3\033\ufff3\001\002\000\024\004\014\007\010\011" +
    "\004\025\011\027\015\030\007\031\012\032\006\033\005" +
    "\001\002\000\024\004\014\007\010\011\004\025\011\027" +
    "\015\030\007\031\012\032\006\033\005\001\002\000\010" +
    "\005\101\010\054\012\053\001\002\000\004\012\047\001" +
    "\002\000\024\004\014\007\010\011\004\025\011\027\015" +
    "\030\007\031\012\032\006\033\005\001\002\000\024\004" +
    "\014\007\010\011\004\025\011\027\015\030\007\031\012" +
    "\032\006\033\005\001\002\000\024\004\014\007\010\011" +
    "\004\025\011\027\015\030\007\031\012\032\006\033\005" +
    "\001\002\000\024\004\014\007\010\011\004\025\011\027" +
    "\015\030\007\031\012\032\006\033\005\001\002\000\024" +
    "\004\014\007\010\011\004\025\011\027\015\030\007\031" +
    "\012\032\006\033\005\001\002\000\024\004\014\007\010" +
    "\011\004\025\011\027\015\030\007\031\012\032\006\033" +
    "\005\001\002\000\052\002\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\040\014\034\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\026\ufff7\032\ufff7\033\ufff7\001\002\000\052\002\ufff0\005" +
    "\ufff0\006\ufff0\007\024\010\017\011\036\012\033\013\040" +
    "\014\034\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\026\ufff0\032\ufff0\033\ufff0\001\002" +
    "\000\052\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\017\011" +
    "\ufffa\012\033\013\040\014\034\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa\032" +
    "\ufffa\033\ufffa\001\002\000\052\002\uffeb\005\uffeb\006\uffeb" +
    "\007\024\010\017\011\036\012\033\013\040\014\034\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\026\uffeb\032\uffeb\033\uffeb\001\002\000\052\002" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\026\uffe8\032\uffe8\033\uffe8" +
    "\001\002\000\052\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\040\014\034\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\026" +
    "\ufff6\032\ufff6\033\ufff6\001\002\000\010\004\050\032\032" +
    "\033\023\001\002\000\010\004\050\032\032\033\023\001" +
    "\002\000\010\005\uffde\010\uffde\012\uffde\001\002\000\010" +
    "\005\uffdd\010\uffdd\012\uffdd\001\002\000\010\004\050\032" +
    "\032\033\023\001\002\000\010\004\050\032\032\033\023" +
    "\001\002\000\010\005\uffe2\010\uffe2\012\uffe2\001\002\000" +
    "\010\005\uffe1\010\uffe1\012\uffe1\001\002\000\010\005\uffe0" +
    "\010\uffe0\012\uffe0\001\002\000\010\005\uffdf\010\uffdf\012" +
    "\uffdf\001\002\000\010\005\076\010\054\012\053\001\002" +
    "\000\004\005\063\001\002\000\012\005\uffdb\010\uffdb\012" +
    "\uffdb\013\064\001\002\000\012\004\071\007\066\011\070" +
    "\032\067\001\002\000\010\005\uffd9\010\uffd9\012\uffd9\001" +
    "\002\000\012\004\071\007\066\011\070\032\067\001\002" +
    "\000\010\005\uffd8\010\uffd8\012\uffd8\001\002\000\012\004" +
    "\071\007\066\011\070\032\067\001\002\000\012\004\071" +
    "\007\066\011\070\032\067\001\002\000\004\005\073\001" +
    "\002\000\010\005\uffd5\010\uffd5\012\uffd5\001\002\000\010" +
    "\005\uffd7\010\uffd7\012\uffd7\001\002\000\010\005\uffd6\010" +
    "\uffd6\012\uffd6\001\002\000\012\005\uffdc\010\uffdc\012\uffdc" +
    "\013\077\001\002\000\012\004\071\007\066\011\070\032" +
    "\067\001\002\000\010\005\uffda\010\uffda\012\uffda\001\002" +
    "\000\052\002\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\026\uffff\032" +
    "\uffff\033\uffff\001\002\000\052\002\uffed\005\uffed\006\uffed" +
    "\007\024\010\017\011\036\012\033\013\040\014\034\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\026\uffed\032\uffed\033\uffed\001\002\000\052\002" +
    "\uffec\005\uffec\006\uffec\007\024\010\017\011\036\012\033" +
    "\013\040\014\034\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\026\uffec\032\uffec\033\uffec" +
    "\001\002\000\052\002\uffe9\005\uffe9\006\uffe9\007\024\010" +
    "\017\011\036\012\033\013\040\014\034\015\037\016\022" +
    "\017\021\020\030\021\027\022\035\023\uffe9\024\uffe9\026" +
    "\uffe9\032\uffe9\033\uffe9\001\002\000\052\002\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\017\011\ufff9\012\033\013\040\014" +
    "\034\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\026\ufff9\032\ufff9\033\ufff9\001\002\000" +
    "\012\004\071\007\066\011\070\032\067\001\002\000\010" +
    "\005\uffe3\010\uffe3\012\uffe3\001\002\000\052\002\uffef\005" +
    "\uffef\006\uffef\007\024\010\017\011\036\012\033\013\040" +
    "\014\034\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\026\uffef\032\uffef\033\uffef\001\002" +
    "\000\052\002\uffee\005\uffee\006\uffee\007\024\010\017\011" +
    "\036\012\033\013\040\014\034\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\026\uffee\032" +
    "\uffee\033\uffee\001\002\000\052\002\uffea\005\uffea\006\uffea" +
    "\007\024\010\017\011\036\012\033\013\040\014\034\015" +
    "\037\016\022\017\021\020\030\021\027\022\035\023\uffea" +
    "\024\uffea\026\uffea\032\uffea\033\uffea\001\002\000\052\002" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\040\014\034\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\032\ufff8\033\ufff8" +
    "\001\002\000\004\002\000\001\002\000\024\004\014\007" +
    "\010\011\004\025\011\027\015\030\007\031\012\032\006" +
    "\033\005\001\002\000\040\005\117\007\024\010\017\011" +
    "\036\012\033\013\040\014\034\015\037\016\022\017\021" +
    "\020\030\021\027\022\035\023\020\024\025\001\002\000" +
    "\024\004\014\007\010\011\004\025\011\027\015\030\007" +
    "\031\012\032\006\033\005\001\002\000\040\007\024\010" +
    "\017\011\036\012\033\013\040\014\034\015\037\016\022" +
    "\017\021\020\030\021\027\022\035\023\020\024\025\026" +
    "\121\001\002\000\024\004\014\007\010\011\004\025\011" +
    "\027\015\030\007\031\012\032\006\033\005\001\002\000" +
    "\052\002\ufff4\005\ufff4\006\ufff4\007\024\010\017\011\036" +
    "\012\033\013\040\014\034\015\037\016\022\017\021\020" +
    "\030\021\027\022\035\023\020\024\025\026\ufff4\032\ufff4" +
    "\033\ufff4\001\002\000\052\002\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\017\011\ufff1\012\033\013\040\014\034\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\026\ufff1\032\ufff1\033\ufff1\001\002\000\030\004\014" +
    "\005\uffe5\006\uffe5\007\010\011\004\025\011\027\015\030" +
    "\007\031\012\032\006\033\005\001\002\000\006\005\130" +
    "\006\127\001\002\000\042\005\uffe6\006\uffe6\007\024\010" +
    "\017\011\036\012\033\013\040\014\034\015\037\016\022" +
    "\017\021\020\030\021\027\022\035\023\020\024\025\001" +
    "\002\000\024\004\014\007\010\011\004\025\011\027\015" +
    "\030\007\031\012\032\006\033\005\001\002\000\052\002" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\026\ufff5\032\ufff5\033\ufff5" +
    "\001\002\000\042\005\uffe7\006\uffe7\007\024\010\017\011" +
    "\036\012\033\013\040\014\034\015\037\016\022\017\021" +
    "\020\030\021\027\022\035\023\020\024\025\001\002\000" +
    "\052\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\017\011\ufff2" +
    "\012\033\013\040\014\034\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2\032\ufff2" +
    "\033\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\002\012\001\001\000\004\002\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\015\001\001\000\002" +
    "\001\001\000\004\003\030\001\001\000\004\002\112\001" +
    "\001\000\004\002\111\001\001\000\004\002\110\001\001" +
    "\000\004\002\107\001\001\000\002\001\001\000\004\002" +
    "\104\001\001\000\004\002\103\001\001\000\002\001\001" +
    "\000\004\002\102\001\001\000\004\002\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\045\001\001" +
    "\000\004\002\044\001\001\000\004\002\043\001\001\000" +
    "\004\002\042\001\001\000\004\002\041\001\001\000\004" +
    "\002\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\050\004\051\001\001\000\006\003" +
    "\060\004\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\056\004\057\001\001\000\006\003\054\004" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\064\001\001\000\002" +
    "\001\001\000\004\005\074\001\001\000\002\001\001\000" +
    "\004\005\073\001\001\000\004\005\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\115\001\001\000\002\001\001\000\004\002" +
    "\117\001\001\000\002\001\001\000\004\002\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\125\006" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExprParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExprParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExprParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ExprParser$actions {
  private final ExprParser parser;

  /** Constructor */
  CUP$ExprParser$actions(ExprParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ExprParser$do_action(
    int                        CUP$ExprParser$act_num,
    java_cup.runtime.lr_parser CUP$ExprParser$parser,
    java.util.Stack            CUP$ExprParser$stack,
    int                        CUP$ExprParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ExprParser$result;

      /* select the action based on the action number */
      switch (CUP$ExprParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pnumber ::= LPAREN pnumber RPAREN 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT = n; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("pnumber",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pnumber ::= PLUS pnumber 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new Double(n.doubleValue()); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("pnumber",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pnumber ::= MINUS pnumber 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new Double(-n.doubleValue()); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("pnumber",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pnumber ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new Double(Util.toDouble(n)); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("pnumber",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // punitexpr ::= LPAREN punitexpr RPAREN POWER pnumber 
            {
              Unit RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).right;
		Unit u = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = u.power(p); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("punitexpr",2, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // punitexpr ::= LPAREN unitexpr RPAREN POWER pnumber 
            {
              Unit RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).right;
		Unit u = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = u.power(p); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("punitexpr",2, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // punitexpr ::= LPAREN punitexpr RPAREN 
            {
              Unit RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Unit u = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT = u; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("punitexpr",2, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // punitexpr ::= LPAREN unitexpr RPAREN 
            {
              Unit RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Unit u = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT = u; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("punitexpr",2, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unitexpr ::= NUMBER DIVIDE punitexpr 
            {
              Unit RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Unit b = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 Unit a = new Unit(n);
		   RESULT = a.div(b); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("unitexpr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unitexpr ::= NUMBER DIVIDE unitexpr 
            {
              Unit RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Unit b = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 Unit a = new Unit(n);
		   RESULT = a.div(b); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("unitexpr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unitexpr ::= unitexpr DIVIDE punitexpr 
            {
              Unit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Unit a = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Unit b = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = a.div(b); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("unitexpr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unitexpr ::= unitexpr DIVIDE unitexpr 
            {
              Unit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Unit a = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Unit b = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = a.div(b); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("unitexpr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unitexpr ::= unitexpr TIMES punitexpr 
            {
              Unit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Unit a = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Unit b = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = a.mult(b); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("unitexpr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unitexpr ::= unitexpr TIMES unitexpr 
            {
              Unit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Unit a = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Unit b = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = a.mult(b); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("unitexpr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unitexpr ::= IDENT POWER pnumber 
            {
              Unit RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 Unit a  = parser.ns.unitByName(n);
		   RESULT = a.power(p); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("unitexpr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unitexpr ::= IDENT 
            {
              Unit RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = parser.ns.unitByName(n); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("unitexpr",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exprs ::= 
            {
              Expr.List RESULT =null;
		 RESULT=new Expr.List(1); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("exprs",4, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exprs ::= expr 
            {
              Expr.List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 Expr.List l = new Expr.List(1);
		   l.add(e);
		   RESULT=l; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("exprs",4, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exprs ::= exprs COMMA expr 
            {
              Expr.List RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr.List l = (Expr.List)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 l.add(e);
		   RESULT=l; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("exprs",4, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr DERIV expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=parser.ns.makeDeriv(l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new LogicalExpr(IExpr.OR, l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new LogicalExpr(IExpr.AND, l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr GE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new CompareExpr(IExpr.GE, l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new CompareExpr(IExpr.GT, l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr LE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new CompareExpr(IExpr.LE, l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new CompareExpr(IExpr.LT, l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr NE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new CompareExpr(IExpr.NE, l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new CompareExpr(IExpr.EQ, l, r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=e; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=e.mult(Expr.negone); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT=e; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= IF LPAREN expr RPAREN expr ELSE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 int op = IExpr.IF;
		RESULT=new IfExpr(e1, e2, e3); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-6)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= IDENT LPAREN exprs RPAREN 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Expr.List e = (Expr.List)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT=parser.ns.funcCall(f, e); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=l.div(r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr POWER expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=l.pow(r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=l.mult(r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=l.add(r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=l.sub(r); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=parser.ns.compByName(n); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT=Expr.falsex; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT=Expr.truex; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= PI 
            {
              Expr RESULT =null;
		 RESULT=Expr.pi; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= LPAREN expr unitexpr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Unit u = (Unit)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 if (!e.isConst()) throw new Xcept(e, 
		    "constant expression required");
		RESULT=new RealConst(e.constRealVal(), u); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Expr start_val = (Expr)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		RESULT = start_val;
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExprParser$parser.done_parsing();
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= NUMBER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT=new RealConst(n); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

