// JSim generated model JS100ode_t3_bare
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100ode_t3_bare model
public class JS100ode_t3_bare extends RTModel {

    // variable declarations
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealNVar JSu;
    public RTRealNVar JSu__Dt;
    public RTRealNVar JSu__Dt__Dt;
    public RTRealNVar JSu__Dt__Dt__Dt;
    public RTRealNVar JSu__init;
    public RTRealNVar JSu_t__init;
    public RTRealNVar JSu_t_t__init;
     
    // F&P declarations
    
    // solver declarations
    public ODE1Problem__u ode1problem__u;
     
    // RT model constructor
    public JS100ode_t3_bare(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100ode_t3_bare", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",1,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",2,null);
        JSu__init = new RTRealNVar(this, "u__init","dimensionless",1,null);
        JSu_t__init = new RTRealNVar(this, "u_t__init","dimensionless",1,null);
        JSu_t_t__init = new RTRealNVar(this, "u_t_t__init","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSu = new RTRealNVar(this, "u","dimensionless",3,new RTRealDomain[] {JSt});
        JSu__Dt = new RTRealNVar(this, "u:t","dimensionless",3,new RTRealDomain[] {JSt});
        JSu__Dt__Dt = new RTRealNVar(this, "u:t:t","dimensionless",3,new RTRealDomain[] {JSt});
        JSu__Dt__Dt__Dt = new RTRealNVar(this, "u:t:t:t","dimensionless",3,new RTRealDomain[] {JSt});
         
        // input defaults
        JSt__min.setDefault("0");
        JSt__max.setDefault("6.283185307179586");
        JSt__ct.setDefault("13");
        JSu__init.setDefault("1");
        JSu_t__init.setDefault("0");
        JSu_t_t__init.setDefault("-1");
        
        // F&P initialization
        
        // solver instantiation
        ode1problem__u = new ODE1Problem__u(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        return true;
    }
    
    // ODE problem solving [u, u:t, u:t:t]
    public class ODE1Problem__u extends ODE1Problem {
        public ODE1Problem__u(RTModel m) throws Xcept {
            super(m, "ODE1Problem__u");
            setup(JSt, new RTRealNVar[] {JSu,JSu__Dt,JSu__Dt__Dt});
        }
        public void evaluate(RTContext ctxt, double t, double[] u, double[] udot) throws Xcept {
            ((XContext) ctxt).evaluate__u(t, u, udot);
            interruptCheck(ctxt, t, udot);
            ncallbacks++;
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0t__min;
        private double js0t__max;
        private double js0t__ct;
        private double js0u__init;
        private double js0u_t__init;
        private double js0u_t_t__init;
        private double js2t;
        private double js2u;
        private double js2u__Dt;
        private double js2u__Dt__Dt;
        private double js2u__Dt__Dt__Dt;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0u_t_t__init = realVal(JSu_t_t__init);
            js0u_t__init = realVal(JSu_t__init);
            js0u__init = realVal(JSu__init);
            js0t__ct = realVal(JSt__ct);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            set(JSt__delta,((js0t__max-js0t__min)/(js0t__ct-1)));
            set(JSt__max,js0t__max = (js0t__min+(realVal(JSt__delta)*(js0t__ct-1))));
            setDomain(JSt);
            setLHBC(JSt);
            set(JSu,js0u__init);
            setLHBC(JSt);
            set(JSu__Dt,js0u_t__init);
            setLHBC(JSt);
            set(JSu__Dt__Dt,js0u_t_t__init);
            startPhase(3, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__0t();
            startPhase(4, null);
        }
        
        // ctxt loop iteration for domain t
        public void loop__0t() throws Xcept {
            set(JSu__Dt__Dt__Dt,(realVal(JSu)*(-1)));
            ode1problem__u.solve(this);
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt ODE evaluate
        public void evaluate__u(double t,double[] u,double[] udot) throws Xcept {
            js2t = t;
            js2u = u[0];
            js2u__Dt = u[1];
            js2u__Dt__Dt = u[2];
            js2u__Dt__Dt__Dt = (js2u*(-1));
            udot[0] = js2u__Dt;
            udot[1] = js2u__Dt__Dt;
            udot[2] = js2u__Dt__Dt__Dt;
        }
        
        // ctxt methods for F&P
    }
     
}


