// JSim generated model JS100disjoint1t
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100disjoint1t model
public class JS100disjoint1t extends RTModel {

    // variable declarations
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealDomain JSn;
    public RTRealNVar JSn__min;
    public RTRealNVar JSn__max;
    public RTIntNVar JSn__ct;
    public RTRealNVar JSn__delta;
    public RTRealDomain JSm;
    public RTRealNVar JSm__min;
    public RTRealNVar JSm__max;
    public RTIntNVar JSm__ct;
    public RTRealNVar JSm__delta;
    public RTRealNVar JSa;
    public RTRealNVar JSb1;
    public RTRealNVar JSb2;
    public RTRealNVar JSc;
     
    // F&P declarations
    
    // solver declarations
     
    // RT model constructor
    public JS100disjoint1t(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100disjoint1t", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSn__min = new RTRealNVar(this, "n.min","dimensionless",1,null);
        JSn__max = new RTRealNVar(this, "n.max","dimensionless",1,null);
        JSn__ct = new RTIntNVar(this, "n.ct","dimensionless",2,null);
        JSn__delta = new RTRealNVar(this, "n.delta","dimensionless",1,null);
        JSm__min = new RTRealNVar(this, "m.min","dimensionless",1,null);
        JSm__max = new RTRealNVar(this, "m.max","dimensionless",1,null);
        JSm__ct = new RTIntNVar(this, "m.ct","dimensionless",2,null);
        JSm__delta = new RTRealNVar(this, "m.delta","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSn = new RTRealDomain(this, "n","dimensionless",2,JSn__min,JSn__max,JSn__delta,JSn__ct);
        JSm = new RTRealDomain(this, "m","dimensionless",2,JSm__min,JSm__max,JSm__delta,JSm__ct);
        JSa = new RTRealNVar(this, "a","dimensionless",3,new RTRealDomain[] {JSt,JSn});
        JSb1 = new RTRealNVar(this, "b1","dimensionless",3,new RTRealDomain[] {JSt,JSm});
        JSb2 = new RTRealNVar(this, "b2","dimensionless",3,new RTRealDomain[] {JSt,JSm});
        JSc = new RTRealNVar(this, "c","dimensionless",3,new RTRealDomain[] {JSt,JSn});
         
        // input defaults
        JSt__min.setDefault("0");
        JSt__max.setDefault("1");
        JSt__delta.setDefault("1");
        JSn__min.setDefault("0");
        JSn__max.setDefault("1");
        JSn__delta.setDefault("1");
        JSm__min.setDefault("0");
        JSm__max.setDefault("1");
        JSm__delta.setDefault("1");
        
        // F&P initialization
        
        // solver instantiation
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        String xname = x.name();
        if (xname.equals("t")) return false;
        if (xname.equals("n")) return false;
        if (xname.equals("m")) return false;
        return true;
    }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js0n__min;
        private double js0n__max;
        private double js0n__delta;
        private double js0m__min;
        private double js0m__max;
        private double js0m__delta;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0m__delta = realVal(JSm__delta);
            js0m__max = realVal(JSm__max);
            js0m__min = realVal(JSm__min);
            js0n__delta = realVal(JSn__delta);
            js0n__max = realVal(JSn__max);
            js0n__min = realVal(JSn__min);
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            set(JSm__ct,(((js0m__max-js0m__min)/js0m__delta)+1.5));
            set(JSm__max,js0m__max = (js0m__min+(js0m__delta*(realVal(JSm__ct)-1))));
            setDomain(JSm);
            set(JSn__ct,(((js0n__max-js0n__min)/js0n__delta)+1.5));
            set(JSn__max,js0n__max = (js0n__min+(js0n__delta*(realVal(JSn__ct)-1))));
            setDomain(JSn);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            startPhase(3, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__0t();
            startPhase(4, null);
        }
        
        // ctxt loop iteration for domain t
        public void loop__0t() throws Xcept {
            for (setLHBC(JSn); isSet(JSn); moveRight(JSn)) loop__0t__0n();
            for (setLHBC(JSm); isSet(JSm); moveRight(JSm)) loop__0t__1m();
            for (setLHBC(JSm); isSet(JSm); moveRight(JSm)) loop__0t__2m();
            for (setLHBC(JSn); isSet(JSn); moveRight(JSn)) loop__0t__3n();
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt loop iteration for domain n
        public void loop__0t__0n() throws Xcept {
            set(JSa,(realVal(JSt)+realVal(JSn)));
            interruptCheck();
        }
        
        // ctxt loop iteration for domain m
        public void loop__0t__1m() throws Xcept {
            set(JSb2,(realVal(JSt)+realVal(JSm)));
            interruptCheck();
        }
        
        // ctxt loop iteration for domain m
        public void loop__0t__2m() throws Xcept {
            set(JSb1,(realVal(JSa, new double[] {realVal(JSt),js0n__max})+realVal(JSm)));
            interruptCheck();
        }
        
        // ctxt loop iteration for domain n
        public void loop__0t__3n() throws Xcept {
            set(JSc,(realVal(JSb2, new double[] {realVal(JSt),js0m__max})+realVal(JSn)));
            interruptCheck();
        }
        
        // ctxt methods for F&P
    }
     
}


