// JSim generated model JS100ode_nserial_bid
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100ode_nserial_bid model
public class JS100ode_nserial_bid extends RTModel {

    // variable declarations
    public RTIntNVar JSn;
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealDomain JSk;
    public RTRealNVar JSk__min;
    public RTRealNVar JSk__max;
    public RTIntNVar JSk__ct;
    public RTRealNVar JSk__delta;
    public RTRealNVar JSCin;
    public RTRealNVar JSu;
    public RTRealNVar JSD;
    public RTRealNVar JSufwd;
    public RTRealNVar JSubwd;
    public RTRealNVar JSu__Dt;
    public RTRealNVar JSu__init;
     
    // F&P declarations
    
    // solver declarations
    public ODE1Problem__u ode1problem__u;
     
    // RT model constructor
    public JS100ode_nserial_bid(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100ode_nserial_bid", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSn = new RTIntNVar(this, "n","dimensionless",1,null);
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSk__min = new RTRealNVar(this, "k.min","dimensionless",1,null);
        JSk__max = new RTRealNVar(this, "k.max","dimensionless",2,null);
        JSk__ct = new RTIntNVar(this, "k.ct","dimensionless",2,null);
        JSk__delta = new RTRealNVar(this, "k.delta","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSk = new RTRealDomain(this, "k","dimensionless",2,JSk__min,JSk__max,JSk__delta,JSk__ct);
        JSCin = new RTRealNVar(this, "Cin","dimensionless",5,new RTRealDomain[] {JSt});
        JSu = new RTRealNVar(this, "u","dimensionless",5,new RTRealDomain[] {JSt,JSk});
        JSD = new RTRealNVar(this, "D","dimensionless",3,new RTRealDomain[] {JSk});
        JSufwd = new RTRealNVar(this, "ufwd","dimensionless",5,new RTRealDomain[] {JSt,JSk});
        JSubwd = new RTRealNVar(this, "ubwd","dimensionless",5,new RTRealDomain[] {JSt,JSk});
        JSu__Dt = new RTRealNVar(this, "u:t","dimensionless",5,new RTRealDomain[] {JSt,JSk});
        JSu__init = new RTRealNVar(this, "u__init","dimensionless",1,new RTRealDomain[] {JSk});
         
        // input defaults
        JSn.setDefault("3");
        JSt__min.setDefault("0");
        JSt__max.setDefault("3");
        JSt__delta.setDefault(".25");
        JSk__min.setDefault("1");
        JSk__delta.setDefault("1");
        JSu__init.setDefault("0");
        
        // F&P initialization
        
        // solver instantiation
        ode1problem__u = new ODE1Problem__u(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        String xname = x.name();
        if (xname.equals("t")) return false;
        if (xname.equals("k")) return false;
        return true;
    }
    
    // ODE problem solving [u]
    public class ODE1Problem__u extends ODE1Problem {
        public ODE1Problem__u(RTModel m) throws Xcept {
            super(m, "ODE1Problem__u");
            setup(JSt, new RTRealNVar[] {JSu});
        }
        public void evaluate(RTContext ctxt, double t, double[] u, double[] udot) throws Xcept {
            ((XContext) ctxt).evaluate__u(t, u, udot);
            interruptCheck(ctxt, t, udot);
            ncallbacks++;
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0n;
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js0k__min;
        private double js0k__delta;
        private double js3t;
        private double js3u;
        private double js3ufwd;
        private double js3Cin;
        private double js3ubwd;
        private double js3u__Dt;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0k__delta = realVal(JSk__delta);
            js0k__min = realVal(JSk__min);
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            js0n = realVal(JSn);
            set(JSk__max,js0n);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            set(JSk__ct,(((realVal(JSk__max)-js0k__min)/js0k__delta)+1.5));
            set(JSk__max,(js0k__min+(js0k__delta*(realVal(JSk__ct)-1))));
            setDomain(JSk);
            startPhase(3, JSk);
            for (setLHBC(JSk); isSet(JSk); moveRight(JSk)) loop__0k();
            startPhase(4, null);
            startPhase(5, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__1t();
            startPhase(6, null);
        }
        
        // ctxt loop iteration for domain k
        public void loop__0k() throws Xcept {
            // input parm: u__init=0
            set(JSD,realVal(JSk));
            setLHBC(JSt);
            set(JSu,realVal(JSu__init));
            interruptCheck();
            updatePhase(JSk);
        }
        
        // ctxt loop iteration for domain t
        public void loop__1t() throws Xcept {
            set(JSCin,(1-NatMath.exp((realVal(JSt)*(-1)))));
            for (setLHBC(JSk); isSet(JSk); moveRight(JSk)) loop__1t__0k();
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt loop iteration for domain k
        public void loop__1t__0k() throws Xcept {
            set(JSubwd,(((realVal(JSk)==realVal(JSk__max))) ? (0) : (realVal(JSu, new double[] {realVal(JSt),(realVal(JSk)+1)}))));
            set(JSufwd,(((realVal(JSk)==js0k__min)) ? (realVal(JSCin)) : (realVal(JSu, new double[] {realVal(JSt),(realVal(JSk)-1)}))));
            set(JSu__Dt,(realVal(JSD)*((realVal(JSufwd)+realVal(JSubwd))-(realVal(JSu)*2))));
            ode1problem__u.solve(this);
            interruptCheck();
        }
        
        // ctxt ODE evaluate
        public void evaluate__u(double t,double[] u,double[] udot) throws Xcept {
            js3t = t;
            js3u = u[0];
            js3Cin = (1-NatMath.exp((js3t*(-1))));
            js3ufwd = (((realVal(JSk)==js0k__min)) ? (js3Cin) : (realVal(JSu, new double[] {js3t,(realVal(JSk)-1)})));
            js3ubwd = (((realVal(JSk)==realVal(JSk__max))) ? (0) : (realVal(JSu, new double[] {js3t,(realVal(JSk)+1)})));
            js3u__Dt = (realVal(JSD)*((js3ufwd+js3ubwd)-(js3u*2)));
            udot[0] = js3u__Dt;
        }
        
        // ctxt methods for F&P
    }
     
}


