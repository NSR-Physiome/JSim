==== Planner Log ====
Plan options=[maxBuildTime=120, maxImplicitBlock=10, initNaN=false, abortNaN=false, traceNaN=false, traceVars=, ignoreAllOverspec=false, ignoreAllUnderspec=false, splitBlocks=false, parallelize=false]
Loading Variables
  add var: realDomain t
  add var: real t.min
  add var: real t.max
  add var: int t.ct
  add var: real t.delta
  add var: realDomain x
  add var: real x.min
  add var: real x.max
  add var: int x.ct
  add var: real x.delta
  add var: realDomain x2
  add var: real x2.min
  add var: real x2.max
  add var: int x2.ct
  add var: real x2.delta
  add var: real A(t,x)
  add var: real Aout(t)
  add var: real B(t,x2)
  add var: real A:x(t,x)
  add var: real A:t(t,x)
  add var: real A:x:x(t,x)
  add var: real B:x2(t,x2)
  add var: real B:t(t,x2)
  add var: real B:x2:x2(t,x2)
Loading Constraints
  t.min=0 :: [t.min]
  t.max=30 :: [t.max]
  t.delta=.05 :: [t.delta]
  x.min=0 :: [x.min]
  x.max=1 :: [x.max]
  x.ct=2 :: [x.ct]
  x2.min=0 :: [x2.min]
  x2.max=1 :: [x2.max]
  x2.ct=2 :: [x2.ct]
  when (t=t.min) A=0 :: [A(t.min)]
  when (x=x.min) A:x=0 :: [A:x(x.min)]
  when (x=x.max) A:x=0 :: [A:x(x.max)]
  A:t=(A:x:x+B(t,x2.max)) :: [A:t, A:x:x, t, x2.max, B(x2.max)]
  when (x=x.max) Aout=A :: [Aout, A(x.max)]
  when (t=t.min) B=Aout :: [B(t.min), Aout(t.min)]
  when (x2=x2.min) B:x2=0 :: [B:x2(x2.min)]
  when (x2=x2.max) B:x2=0 :: [B:x2(x2.max)]
  B:t=B:x2:x2 :: [B:t, B:x2:x2]
Input      phase completed with 0 errors, 0 warnings.

Toolbox phase starting ...
  add tool: domain t
  add tool: domain x
  add tool: domain x2
Toolbox phase - cycle 1:
  check eqn: t.min=0; [t.min]
  add tool: t.min=0
  check eqn: t.max=30; [t.max]
  add tool: t.max=30
  check eqn: t.delta=.05; [t.delta]
  add tool: t.delta=.05
  add tool: t.ct=(t.max-t.min)/t.delta+1.5
  check eqn: x.min=0; [x.min]
  add tool: x.min=0
  check eqn: x.max=1; [x.max]
  add tool: x.max=1
  check eqn: x.ct=2; [x.ct]
  add tool: x.ct=2
  add tool: x.delta=(x.max-x.min)/(x.ct-1)
  check eqn: x2.min=0; [x2.min]
  add tool: x2.min=0
  check eqn: x2.max=1; [x2.max]
  add tool: x2.max=1
  check eqn: x2.ct=2; [x2.ct]
  add tool: x2.ct=2
  add tool: x2.delta=(x2.max-x2.min)/(x2.ct-1)
  check eqn: when (t=t.min) A=0; [A(t.min)]
  add tool: A(t.min)=0
  check eqn: when (x=x.min) A:x=0; [A:x(x.min)]
  add tool: A:x(x.min)=0
  check eqn: when (x=x.max) A:x=0; [A:x(x.max)]
  add tool: A:x(x.max)=0
  check eqn: A:t=(A:x:x+B(t,x2.max)); [A:t, A:x:x]
  check eqn: when (x=x.max) Aout=A; [Aout, A(x.max)]
  check eqn: when (t=t.min) B=Aout; [B(t.min), Aout(t.min)]
  check eqn: when (x2=x2.min) B:x2=0; [B:x2(x2.min)]
  add tool: B:x2(x2.min)=0
  check eqn: when (x2=x2.max) B:x2=0; [B:x2(x2.max)]
  add tool: B:x2(x2.max)=0
  check eqn: B:t=B:x2:x2; [B:t, B:x2:x2]
  add tool: PDE A: []
  updated PDE(A) with A(t.min)=0
  updated PDE(A) with A:x(x.min)=0
  updated PDE(A) with A:x(x.max)=0
  add tool: PDE B: []
  updated PDE(B) with B:x2(x2.min)=0
  updated PDE(B) with B:x2(x2.max)=0
Toolbox phase - cycle 1:
  check eqn: A:t=(A:x:x+B(t,x2.max)); [A:t, A:x:x]
  check eqn: when (x=x.max) Aout=A; [Aout]
  add tool: Aout=when (x=x.max) A
  check eqn: when (t=t.min) B=Aout; [B(t.min)]
  add tool: B(t.min)=when (t=t.min) Aout
  check eqn: B:t=B:x2:x2; [B:t, B:x2:x2]
  updated PDE(B) with B(t.min)=when (t=t.min) Aout
Toolbox phase - cycle 1:
  check eqn: A:t=(A:x:x+B(t,x2.max)); [A:t, A:x:x]
  check eqn: B:t=B:x2:x2; [B:t, B:x2:x2]
Toolbox phase - cycle 2:
  implicit block (2 2)=1.0
Toolbox phase - cycle 3:
  updated PDE(A) with A:t=(A:x:x+B(t,x2.max))
    A is now entirely solved
  updated PDE(B) with B:t=B:x2:x2
    B is now entirely solved
Toolbox phase - cycle 1:
Toolbox phase - all cycles completed
  add var: real A__init(x)
  add tool: A__init=0
PDE(A) factors:  D=(-1)*(-1) P=B(t,x2.max)*(-1)*(-1) B=0 S=B(t,x2.max)*(-1)*(-1)
  LHBC F1=0 F2=1 F3=0
  RHBC F1=0 F2=1 F3=0
  Solver LSFEA supported
  Solver MacCormack supported
  Solver Toms731 supported
  checking PDE(A) D=(-1)*(-1) for differentiability ...
  setting Dx=0+0
  Tom731  C=1 Q=B(t,x2.max)*(-1) R=A:x
  Toms731 LHBC:  Beta=1 Gamma=1
  Toms731 RHBC:  Beta=1 Gamma=1
PDE(B) factors:  D=1 P=0 B=0 S=0
  LHBC F1=0 F2=1 F3=0
  RHBC F1=0 F2=1 F3=0
  Solver LSFEA supported
  Solver MacCormack supported
  Solver Toms731 supported
  checking PDE(B) D=1 for differentiability ...
  setting Dx=0
  Tom731  C=1 Q=0 R=B:x2
  Toms731 LHBC:  Beta=1 Gamma=1
  Toms731 RHBC:  Beta=1 Gamma=1
Toolbox    phase completed with 0 errors, 0 warnings.

Sequencing phase starting ...
Tools to sequence:
  @x A__init=0 :: [A__init]<<[]
  @t PDE-1D B: B:t=B:x2:x2 :: [B, B(t.max), B(x2.max), B(x2.min)]<<[B(t.min)]
  @t Aout=when (x=x.max) A :: [Aout]<<[A(x.max)]
  @t PDE-1D A: A:t=(A:x:x+B(t,x2.max)) :: [A, A(t.max), A(x.max), A(x.min)]<<[t, x2.max, B(x2.max), A(t.min)]
  x2.delta=(x2.max-x2.min)/(x2.ct-1) :: [x2.delta]<<[x2.max, x2.min, x2.ct]
  x2.ct=2 :: [x2.ct]<<[]
  x2.max=1 :: [x2.max]<<[]
  x2.min=0 :: [x2.min]<<[]
  domain x2 :: [x2]<<[x2.min, x2.max, x2.ct, x2.delta]
  x.delta=(x.max-x.min)/(x.ct-1) :: [x.delta]<<[x.max, x.min, x.ct]
  x.ct=2 :: [x.ct]<<[]
  x.max=1 :: [x.max]<<[]
  x.min=0 :: [x.min]<<[]
  domain x :: [x]<<[x.min, x.max, x.ct, x.delta]
  t.delta=.05 :: [t.delta]<<[]
  t.ct=(t.max-t.min)/t.delta+1.5 :: [t.ct]<<[t.max, t.min, t.delta]
  t.max=30 :: [t.max]<<[]
  t.min=0 :: [t.min]<<[]
  domain t :: [t]<<[t.min, t.max, t.ct, t.delta]
  @x2 B(t.min)=when (t=t.min) Aout :: [B(t.min)]<<[Aout(t.min)]
  @x A(t.min)=A__init :: [A(t.min)]<<[A__init]
Events to seqence:
Relations to sequence:
Creating vuTools map ...
Adding reuse & query tools ...
  adding reuse tool: when (t=t.min) Aout=when (x=x.max) A [Aout(t.min)]<<[A(t.min,x.max)*]
  adding query tool: query [A(t.min,x.max)*]<<[A(t.min)]
Creating MainGraph ...
loopOrder=[t, x, x2]
  addNode A__init seqLoops=(x) phase=x#1 fft=null
  addNode B seqLoops=(t) phase=t#1 fft=t
  addNode Aout seqLoops=(t) phase=t#1 fft=null
  addNode A seqLoops=(t) phase=t#1 fft=t
  addNode x2.delta seqLoops=() phase=main fft=null
  addNode x2.ct seqLoops=() phase=main fft=null
  addNode x2.max seqLoops=() phase=main fft=null
  addNode x2.min seqLoops=() phase=main fft=null
  addNode x2 seqLoops=() phase=main fft=null
  addNode x.delta seqLoops=() phase=main fft=null
  addNode x.ct seqLoops=() phase=main fft=null
  addNode x.max seqLoops=() phase=main fft=null
  addNode x.min seqLoops=() phase=main fft=null
  addNode x seqLoops=() phase=main fft=null
  addNode t.delta seqLoops=() phase=main fft=null
  addNode t.ct seqLoops=() phase=main fft=null
  addNode t.max seqLoops=() phase=main fft=null
  addNode t.min seqLoops=() phase=main fft=null
  addNode t seqLoops=() phase=main fft=null
  addNode B(t.min) seqLoops=(x2) phase=x2#1 fft=null
  addNode A(t.min) seqLoops=(x) phase=x#1 fft=null
  addNode Aout(t.min) seqLoops=() phase=main fft=null
  addNode A(t.min,x.max) seqLoops=() phase=main fft=null
Saving graph pullfinder
Building mainline block ...
Mainline block graph:
building block for phase main
  adding x2.ct=2 to main
  adding x2.max=1 to main
  adding x2.min=0 to main
  adding x.ct=2 to main
  adding x.max=1 to main
  adding x.min=0 to main
  adding t.delta=.05 to main
  adding t.max=30 to main
  adding t.min=0 to main
  adding x2.delta=(x2.max-x2.min)/(x2.ct-1) to main
  adding domain x2 to main
  adding x.delta=(x.max-x.min)/(x.ct-1) to main
  adding domain x to main
  adding t.ct=(t.max-t.min)/t.delta+1.5 to main
  adding domain t to main
  subphase x#1 entryEdge=null
building block for phase x#1
  adding A__init=0 to loop-x
  adding A(t.min)=A__init to loop-x
  adding loop-x to main
  subphase t#1 entryEdge=B(t.min)->B
  subphase x2#1 entryEdge=Aout(t.min)->B(t.min)
  adding query [A(t.min,x.max)*] to main
  adding when (t=t.min) Aout=when (x=x.max) A to main
  subphase t#1 entryEdge=B(t.min)->B
  subphase x2#1 entryEdge=null
building block for phase x2#1
  adding B(t.min)=when (t=t.min) Aout to loop-x2
  adding loop-x2 to main
  subphase t#1 entryEdge=null
building block for phase t#1
  adding Aout=when (x=x.max) A to loop-t
  adding PDE Block-t(x2) [B] to loop-t
  adding PDE Block-t(x) [A] to loop-t
  adding loop-t to main
Building PDE Block-t(x2) [B] ...
PDE solver LSFEA: supported
PDE solver MacCormack: supported
PDE solver Toms731: supported
Building PDE BC x2=x2.min [B] ...
Building PDE BC x2=x2.max [B] ...
Building PDE Block-t(x) [A] ...
PDE solver LSFEA: supported
PDE solver MacCormack: supported
PDE solver Toms731: supported
Building PDE BC x=x.min [A] ...
Building PDE BC x=x.max [A] ...
Sequencing phase completed with 0 errors, 0 warnings.

==== Main Calculation Block ====
main
  x2.ct=2
  x2.max=1
  x2.min=0
  x.ct=2
  x.max=1
  x.min=0
  t.delta=.05
  t.max=30
  t.min=0
  x2.delta=(x2.max-x2.min)/(x2.ct-1)
  domain x2
  x.delta=(x.max-x.min)/(x.ct-1)
  domain x
  t.ct=(t.max-t.min)/t.delta+1.5
  domain t
  loop-x
    A__init=0
    A(t.min)=A__init
  query [A(t.min,x.max)*]
  when (t=t.min) Aout=when (x=x.max) A
  loop-x2
    B(t.min)=when (t=t.min) Aout
  loop-t
    Aout=when (x=x.max) A
    PDE Block-t(x2) vmus=[t, x2, B]
      PDE BC x2=x2.min vmus=[t, B]
      PDE BC x2=x2.max vmus=[t, B]
    PDE Block-t(x) vmus=[t, x, A]
      PDE BC x=x.min vmus=[t, A]
      PDE BC x=x.max vmus=[t, A]

