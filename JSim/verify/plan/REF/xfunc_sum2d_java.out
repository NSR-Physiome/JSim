// JSim generated model JS100xfunc_sum2d
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100xfunc_sum2d model
public class JS100xfunc_sum2d extends RTModel {

    // variable declarations
    public RTRealDomain JSx;
    public RTRealNVar JSx__min;
    public RTRealNVar JSx__max;
    public RTIntNVar JSx__ct;
    public RTRealNVar JSx__delta;
    public RTRealDomain JSy;
    public RTRealNVar JSy__min;
    public RTRealNVar JSy__max;
    public RTIntNVar JSy__ct;
    public RTRealNVar JSy__delta;
    public RTRealNVar JSu;
    public RTRealNVar JSw;
     
    // F&P declarations
    public RTXFunc JSdosum;
    public RTXFuncCall JSdosum__1;
    
    // solver declarations
     
    // RT model constructor
    public JS100xfunc_sum2d(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100xfunc_sum2d", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSx__min = new RTRealNVar(this, "x.min","dimensionless",1,null);
        JSx__max = new RTRealNVar(this, "x.max","dimensionless",1,null);
        JSx__ct = new RTIntNVar(this, "x.ct","dimensionless",2,null);
        JSx__delta = new RTRealNVar(this, "x.delta","dimensionless",1,null);
        JSy__min = new RTRealNVar(this, "y.min","dimensionless",1,null);
        JSy__max = new RTRealNVar(this, "y.max","dimensionless",1,null);
        JSy__ct = new RTIntNVar(this, "y.ct","dimensionless",2,null);
        JSy__delta = new RTRealNVar(this, "y.delta","dimensionless",1,null);
        JSw = new RTRealNVar(this, "w","dimensionless",4,null);
        JSx = new RTRealDomain(this, "x","dimensionless",2,JSx__min,JSx__max,JSx__delta,JSx__ct);
        JSy = new RTRealDomain(this, "y","dimensionless",2,JSy__min,JSy__max,JSy__delta,JSy__ct);
        JSu = new RTRealNVar(this, "u","dimensionless",3,new RTRealDomain[] {JSx,JSy});
         
        // input defaults
        JSx__min.setDefault("1");
        JSx__max.setDefault("3");
        JSx__delta.setDefault("1");
        JSy__min.setDefault("1");
        JSy__max.setDefault("2");
        JSy__delta.setDefault("1");
        
        // F&P initialization
        JSdosum = new JSdosum__class(this, "dosum");
        JSdosum__1 = new RTXFuncCall(JSdosum);
        new RTXFuncArg(JSdosum__1, new RTRealDomain[] {JSy,JSx}, JSu, true);
        
        // solver instantiation
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        String xname = x.name();
        if (xname.equals("x")) return false;
        if (xname.equals("y")) return false;
        return true;
    }
    
    // JSdosum__class definition
    public static class JSdosum__class extends RTXFunc {
        public JSdosum__class(RTModel m, String n) throws Xcept { super(m, n); }
        public double realCalculate(RealNData[] jsargs) throws Xcept {
            RealNData u = jsargs[0];
            // copy maincode here
            
	    double tot = 0;
            int n = u.nsamples();
	    for (int i=0; i<n; i++) 
	        tot += u.realVal(i);
	    return tot;	
	
            
        }
    }
    
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0x__min;
        private double js0x__max;
        private double js0x__delta;
        private double js0y__min;
        private double js0y__max;
        private double js0y__delta;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0y__delta = realVal(JSy__delta);
            js0y__max = realVal(JSy__max);
            js0y__min = realVal(JSy__min);
            js0x__delta = realVal(JSx__delta);
            js0x__max = realVal(JSx__max);
            js0x__min = realVal(JSx__min);
            set(JSy__ct,(((js0y__max-js0y__min)/js0y__delta)+1.5));
            set(JSy__max,js0y__max = (js0y__min+(js0y__delta*(realVal(JSy__ct)-1))));
            setDomain(JSy);
            set(JSx__ct,(((js0x__max-js0x__min)/js0x__delta)+1.5));
            set(JSx__max,js0x__max = (js0x__min+(js0x__delta*(realVal(JSx__ct)-1))));
            setDomain(JSx);
            startPhase(3, JSx);
            for (setLHBC(JSx); isSet(JSx); moveRight(JSx)) loop__0x();
            startPhase(4, null);
            set(JSw,JSdosum__1.realVal(this));
        }
        
        // ctxt loop iteration for domain x
        public void loop__0x() throws Xcept {
            for (setLHBC(JSy); isSet(JSy); moveRight(JSy)) loop__0x__0y();
            interruptCheck();
            updatePhase(JSx);
        }
        
        // ctxt loop iteration for domain y
        public void loop__0x__0y() throws Xcept {
            set(JSu,(realVal(JSx)+realVal(JSy)));
            interruptCheck();
        }
        
        // ctxt methods for F&P
        protected double JSdosum__1_0_getRealVal() throws Xcept {
            return realVal(JSu);
        }
    }
     
}


