==== Planner Log ====
Plan options=[maxBuildTime=120, maxImplicitBlock=10, initNaN=false, abortNaN=false, traceNaN=false, traceVars=, ignoreAllOverspec=false, ignoreAllUnderspec=false, splitBlocks=false, parallelize=false]
Loading Variables
  add var: realDomain t
  add var: real t.min
  add var: real t.max
  add var: int t.ct
  add var: real t.delta
  add var: real a(t)
  add var: real b(t)
  add var: real b:t(t)
Loading Constraints
  t.min=0 :: [t.min]
  t.max=1 :: [t.max]
  t.delta=1 :: [t.delta]
  (a^2+a-6)=t :: [a, t]
  when (t=t.min) b=a :: [b(t.min), a(t.min)]
  b:t=b :: [b:t, b]
Input      phase completed with 0 errors, 0 warnings.

Toolbox phase starting ...
  add tool: domain t
Toolbox phase - cycle 1:
  check eqn: t.min=0; [t.min]
  add tool: t.min=0
  check eqn: t.max=1; [t.max]
  add tool: t.max=1
  check eqn: t.delta=1; [t.delta]
  add tool: t.delta=1
  add tool: t.ct=(t.max-t.min)/t.delta+1.5
  check eqn: (a^2+a-6)=t; [a]
  Implicit tool non-linear in [a]
  add tool: [(a^2+a-6)=t]
  check eqn: when (t=t.min) b=a; [b(t.min)]
  add tool: b(t.min)=when (t=t.min) a
  check eqn: b:t=b; [b:t, b]
  add tool: ODE b: []
  updated ODE(b) with b(t.min)=when (t=t.min) a
Toolbox phase - cycle 1:
  check eqn: b:t=b; [b:t]
  add tool: b:t=b
  updated ODE(b) with b:t=b
    b is now entirely solved
Toolbox phase - all cycles completed
Toolbox    phase completed with 0 errors, 0 warnings.

Sequencing phase starting ...
Tools to sequence:
  @t b:t=b :: [b:t]<<[b]
  @t ODE b: b:t=b :: [b, b(t.max)]<<[b(t.min), b:t]
  @t [(a^2+a-6)=t] :: [a]<<[t]
  t.delta=1 :: [t.delta]<<[]
  t.ct=(t.max-t.min)/t.delta+1.5 :: [t.ct]<<[t.max, t.min, t.delta]
  t.max=1 :: [t.max]<<[]
  t.min=0 :: [t.min]<<[]
  domain t :: [t]<<[t.min, t.max, t.ct, t.delta]
  b(t.min)=when (t=t.min) a :: [b(t.min)]<<[a(t.min)]
Events to seqence:
Relations to sequence:
Creating vuTools map ...
Adding reuse & query tools ...
  adding reuse tool: when (t=t.min) [(a^2+a-6)=t] [a(t.min)]<<[t(min)]
  adding query tool: query [t(min)]<<[t]
Creating MainGraph ...
loopOrder=[t]
  addNode b:t seqLoops=(t) phase=t#1 fft=null
  addNode b seqLoops=(t) phase=t#1 fft=t
  addNode a seqLoops=(t) phase=t#1 fft=null
  addNode t.delta seqLoops=() phase=main fft=null
  addNode t.ct seqLoops=() phase=main fft=null
  addNode t.max seqLoops=() phase=main fft=null
  addNode t.min seqLoops=() phase=main fft=null
  addNode t seqLoops=() phase=main fft=null
  addNode b(t.min) seqLoops=() phase=main fft=null
  addNode a(t.min) seqLoops=() phase=main fft=null
  addNode t(min) seqLoops=() phase=main fft=null
Saving graph pullfinder
Building mainline block ...
Mainline block graph:
building block for phase main
  adding t.delta=1 to main
  adding t.max=1 to main
  adding t.min=0 to main
  adding t.ct=(t.max-t.min)/t.delta+1.5 to main
  adding domain t to main
  adding query [t(min)] to main
  adding when (t=t.min) [(a^2+a-6)=t] to main
  adding b(t.min)=when (t=t.min) a to main
  subphase t#1 entryEdge=null
building block for phase t#1
  adding b:t=b to loop-t
  adding [(a^2+a-6)=t] to loop-t
  adding ODE Block-t [b] to loop-t
  adding loop-t to main
Building ODE Block-t [b] ...
  adding muTool b:t=b
  adding muVar b:t
  adding b:t=b to ODE Block-t [b]
Sequencing phase completed with 0 errors, 0 warnings.

==== Main Calculation Block ====
main
  t.delta=1
  t.max=1
  t.min=0
  t.ct=(t.max-t.min)/t.delta+1.5
  domain t
  query [t(min)]
  when (t=t.min) [(a^2+a-6)=t]
  b(t.min)=when (t=t.min) a
  loop-t
    b:t=b
    [(a^2+a-6)=t]
    ODE Block-t vmus=[t, b, b:t]
      b:t=b

