==== Planner Log ====
Plan options=[maxBuildTime=120, maxImplicitBlock=10, initNaN=false, abortNaN=false, traceNaN=false, traceVars=, ignoreAllOverspec=false, ignoreAllUnderspec=false, splitBlocks=false, parallelize=false]
Loading Variables
  add var: realDomain t
  add var: real t.min
  add var: real t.max
  add var: int t.ct
  add var: real t.delta
  add var: realDomain N
  add var: real N.min
  add var: real N.max
  add var: int N.ct
  add var: real N.delta
  add var: real Cp(t,N)
  add var: real Cout(t)
  add var: real Cp:t(t,N)
Loading Constraints
  t.min=0 :: [t.min]
  t.max=30 :: [t.max]
  t.delta=.01 :: [t.delta]
  N.min=1 :: [N.min]
  N.delta=1 :: [N.delta]
  N.max=2 :: [N.max]
  when (t=t.min) Cp=0 :: [Cp(t.min)]
  Cp:t=Cp :: [Cp:t, Cp]
  Cout=Cp(t.max,N.max) :: [Cout, t.max, N.max, Cp(t.max,N.max)*]
Input      phase completed with 0 errors, 0 warnings.

Toolbox phase starting ...
  add tool: domain t
  add tool: domain N
Toolbox phase - cycle 1:
  check eqn: t.min=0; [t.min]
  add tool: t.min=0
  check eqn: t.max=30; [t.max]
  add tool: t.max=30
  check eqn: t.delta=.01; [t.delta]
  add tool: t.delta=.01
  add tool: t.ct=(t.max-t.min)/t.delta+1.5
  check eqn: N.min=1; [N.min]
  add tool: N.min=1
  check eqn: N.delta=1; [N.delta]
  add tool: N.delta=1
  check eqn: N.max=2; [N.max]
  add tool: N.max=2
  add tool: N.ct=(N.max-N.min)/N.delta+1.5
  check eqn: when (t=t.min) Cp=0; [Cp(t.min)]
  add tool: Cp(t.min)=0
  check eqn: Cp:t=Cp; [Cp:t, Cp]
  check eqn: Cout=Cp(t.max,N.max); [Cout, Cp(t.max,N.max)*]
  add tool: ODE Cp: []
  updated ODE(Cp) with Cp(t.min)=0
Toolbox phase - cycle 1:
  check eqn: Cp:t=Cp; [Cp:t]
  add tool: Cp:t=Cp
  check eqn: Cout=Cp(t.max,N.max); [Cout]
  add tool: Cout=Cp(t.max,N.max)
  updated ODE(Cp) with Cp:t=Cp
    Cp is now entirely solved
Toolbox phase - all cycles completed
  add var: real Cp__init(N)
  add tool: Cp__init=0
Toolbox    phase completed with 0 errors, 0 warnings.

Sequencing phase starting ...
Tools to sequence:
  @N Cp__init=0 :: [Cp__init]<<[]
  @t@N Cp:t=Cp :: [Cp:t]<<[Cp]
  @t Cout=Cp(t.max,N.max) :: [Cout]<<[t.max, N.max, Cp(t.max,N.max)*]
  @t@N ODE Cp: Cp:t=Cp :: [Cp, Cp(t.max)]<<[Cp(t.min), Cp:t]
  N.delta=1 :: [N.delta]<<[]
  N.ct=(N.max-N.min)/N.delta+1.5 :: [N.ct]<<[N.max, N.min, N.delta]
  N.max=2 :: [N.max]<<[]
  N.min=1 :: [N.min]<<[]
  domain N :: [N]<<[N.min, N.max, N.ct, N.delta]
  t.delta=.01 :: [t.delta]<<[]
  t.ct=(t.max-t.min)/t.delta+1.5 :: [t.ct]<<[t.max, t.min, t.delta]
  t.max=30 :: [t.max]<<[]
  t.min=0 :: [t.min]<<[]
  domain t :: [t]<<[t.min, t.max, t.ct, t.delta]
  @N Cp(t.min)=Cp__init :: [Cp(t.min)]<<[Cp__init]
Events to seqence:
Relations to sequence:
Creating vuTools map ...
Adding reuse & query tools ...
  adding query tool: query [Cp(t.max,N.max)*]<<[Cp]
Creating MainGraph ...
loopOrder=[t, N]
  addNode Cp__init seqLoops=(N) phase=N#1 fft=null
  addNode Cp:t seqLoops=(t,N) phase=t#1+N#1 fft=null
  addNode Cout seqLoops=(t) phase=t#1 fft=null
  addNode Cp seqLoops=(t,N) phase=t#1+N#1 fft=t
  addNode N.delta seqLoops=() phase=main fft=null
  addNode N.ct seqLoops=() phase=main fft=null
  addNode N.max seqLoops=() phase=main fft=null
  addNode N.min seqLoops=() phase=main fft=null
  addNode N seqLoops=() phase=main fft=null
  addNode t.delta seqLoops=() phase=main fft=null
  addNode t.ct seqLoops=() phase=main fft=null
  addNode t.max seqLoops=() phase=main fft=null
  addNode t.min seqLoops=() phase=main fft=null
  addNode t seqLoops=() phase=main fft=null
  addNode Cp(t.min) seqLoops=(N) phase=N#1 fft=null
  addNode Cp(t.max,N.max) seqLoops=() phase=main fft=null
Saving graph pullfinder
Saving graph pullfinder
Building mainline block ...
Mainline block graph:
building block for phase main
  adding N.delta=1 to main
  adding N.max=2 to main
  adding N.min=1 to main
  adding t.delta=.01 to main
  adding t.max=30 to main
  adding t.min=0 to main
  adding N.ct=(N.max-N.min)/N.delta+1.5 to main
  adding domain N to main
  adding t.ct=(t.max-t.min)/t.delta+1.5 to main
  adding domain t to main
  subphase N#1 entryEdge=null
building block for phase N#1
  adding Cp__init=0 to loop-N
  adding Cp(t.min)=Cp__init to loop-N
  adding loop-N to main
  subphase t#1 entryEdge=null
building block for phase t#1
  subphase t#1+N#1 entryEdge=null
building block for phase t#1+N#1
  adding Cp:t=Cp to loop-N
  adding ODE Block-t [Cp] to loop-N
  adding loop-N to loop-t
  adding loop-t to main
  subphase t#2 entryEdge=Cp(t.max,N.max)->Cout
  adding query [Cp(t.max,N.max)*] to main
  subphase t#2 entryEdge=null
building block for phase t#2
  adding Cout=Cp(t.max,N.max) to loop-t
  adding loop-t to main
Building ODE Block-t [Cp] ...
  adding muTool Cp:t=Cp
  adding muVar Cp:t
  adding Cp:t=Cp to ODE Block-t [Cp]
Sequencing phase completed with 0 errors, 0 warnings.

==== Main Calculation Block ====
main
  N.delta=1
  N.max=2
  N.min=1
  t.delta=.01
  t.max=30
  t.min=0
  N.ct=(N.max-N.min)/N.delta+1.5
  domain N
  t.ct=(t.max-t.min)/t.delta+1.5
  domain t
  loop-N
    Cp__init=0
    Cp(t.min)=Cp__init
  loop-t
    loop-N
      Cp:t=Cp
      ODE Block-t vmus=[t, Cp, Cp:t]
        Cp:t=Cp
  query [Cp(t.max,N.max)*]
  loop-t
    Cout=Cp(t.max,N.max)

