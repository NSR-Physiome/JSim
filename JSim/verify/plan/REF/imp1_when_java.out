// JSim generated model JS100imp1_when
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100imp1_when model
public class JS100imp1_when extends RTModel {

    // variable declarations
    public RTRealDomain JSt;
    public RTRealNVar JSt__min;
    public RTRealNVar JSt__max;
    public RTIntNVar JSt__ct;
    public RTRealNVar JSt__delta;
    public RTRealNVar JSu;
     
    // F&P declarations
    
    // solver declarations
    public Fzero2Problem__u fzero2problem__u;
     
    // RT model constructor
    public JS100imp1_when(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100imp1_when", u, m);
         
        // units used in model
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
         
        // var instantiation
        JSt__min = new RTRealNVar(this, "t.min","dimensionless",1,null);
        JSt__max = new RTRealNVar(this, "t.max","dimensionless",1,null);
        JSt__ct = new RTIntNVar(this, "t.ct","dimensionless",2,null);
        JSt__delta = new RTRealNVar(this, "t.delta","dimensionless",1,null);
        JSt = new RTRealDomain(this, "t","dimensionless",2,JSt__min,JSt__max,JSt__delta,JSt__ct);
        JSu = new RTRealNVar(this, "u","dimensionless",3,new RTRealDomain[] {JSt});
         
        // input defaults
        JSt__min.setDefault("0");
        JSt__max.setDefault("1");
        JSt__delta.setDefault("1");
        
        // F&P initialization
        
        // solver instantiation
        fzero2problem__u = new Fzero2Problem__u(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return false; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        return true;
    }
    
    // Implicit block solving [u(t.min)]
    public class Fzero2Problem__u extends Fzero2Problem {
        public Fzero2Problem__u(RTModel m) throws Xcept {
            super(m, "Fzero2Problem__u",1);
        }
        public void setBounds(RTContext ctxt,double[] vmin,double[] vmax,double[] vguess) throws Xcept {
            ((XContext) ctxt).setBounds__u(vmin,vmax,vguess);
        }
        public void calcZero(RTContext ctxt,double[] val,double[] zero) throws Xcept {
            ((XContext) ctxt).calcZero__u(val,zero);
            ncallbacks++;
        }
        public void export(RTContext ctxt,double[] val) throws Xcept {
            ((XContext) ctxt).export__u(val);
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0t__min;
        private double js0t__max;
        private double js0t__delta;
        private double js1u;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0t__delta = realVal(JSt__delta);
            js0t__max = realVal(JSt__max);
            js0t__min = realVal(JSt__min);
            set(JSt__ct,(((js0t__max-js0t__min)/js0t__delta)+1.5));
            set(JSt__max,js0t__max = (js0t__min+(js0t__delta*(realVal(JSt__ct)-1))));
            setDomain(JSt);
            setLHBC(JSt);
            fzero2problem__u.solve(this);
            startPhase(3, JSt);
            for (setLHBC(JSt); isSet(JSt); moveRight(JSt)) loop__0t();
            startPhase(4, null);
        }
        
        // ctxt methods for Fzero2Problem__u
        public void setBounds__u(double[] vmin,double[] vmax,double[] vguess) throws Xcept {
        }
        public void calcZero__u(double[] vals,double[] zeroes) throws Xcept {
            js1u=vals[0];
            zeroes[0]=((NatMath.pow(js1u,2)-(js1u*5))+6);
        }
        public void export__u(double[] vals) throws Xcept {
            set(JSu,vals[0]);
        }
        // ctxt loop iteration for domain t
        public void loop__0t() throws Xcept {
            if (! atRHBC(JSt)) setNextRight(JSu,JSt);
            interruptCheck();
            updatePhase(JSt);
        }
        
        // ctxt methods for F&P
    }
     
}


