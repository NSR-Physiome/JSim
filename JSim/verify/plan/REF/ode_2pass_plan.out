==== Planner Log ====
Plan options=[maxBuildTime=120, maxImplicitBlock=10, initNaN=false, abortNaN=false, traceNaN=false, traceVars=, ignoreAllOverspec=false, ignoreAllUnderspec=false, splitBlocks=false, parallelize=false]
Loading Variables
  add var: realDomain t
  add var: real t.min
  add var: real t.max
  add var: int t.ct
  add var: real t.delta
  add var: real u(t)
  add var: real v(t)
  add var: real uf
  add var: real u:t(t)
  add var: real v:t(t)
Loading Constraints
  t.min=0 :: [t.min]
  t.max=5 :: [t.max]
  t.delta=.2 :: [t.delta]
  when (t=t.min) u=1 :: [u(t.min)]
  when (t=t.min) v=uf :: [v(t.min), uf]
  when (t=t.max) uf=u :: [uf, u(t.max)]
  u:t=(u*(-1)) :: [u:t, u]
  v:t=(v*(-1)) :: [v:t, v]
Input      phase completed with 0 errors, 0 warnings.

Toolbox phase starting ...
  add tool: domain t
Toolbox phase - cycle 1:
  check eqn: t.min=0; [t.min]
  add tool: t.min=0
  check eqn: t.max=5; [t.max]
  add tool: t.max=5
  check eqn: t.delta=.2; [t.delta]
  add tool: t.delta=.2
  add tool: t.ct=(t.max-t.min)/t.delta+1.5
  check eqn: when (t=t.min) u=1; [u(t.min)]
  add tool: u(t.min)=1
  check eqn: when (t=t.min) v=uf; [v(t.min), uf]
  check eqn: when (t=t.max) uf=u; [uf, u(t.max)]
  check eqn: u:t=(u*(-1)); [u:t, u]
  check eqn: v:t=(v*(-1)); [v:t, v]
  add tool: ODE u: []
  updated ODE(u) with u(t.min)=1
Toolbox phase - cycle 1:
  check eqn: when (t=t.min) v=uf; [v(t.min), uf]
  check eqn: when (t=t.max) uf=u; [uf, u(t.max)]
  check eqn: u:t=(u*(-1)); [u:t]
  add tool: u:t=u*(-1)
  check eqn: v:t=(v*(-1)); [v:t, v]
  updated ODE(u) with u:t=u*(-1)
    u is now entirely solved
Toolbox phase - cycle 1:
  check eqn: when (t=t.min) v=uf; [v(t.min), uf]
  check eqn: when (t=t.max) uf=u; [uf]
  add tool: uf=when (t=t.max) u
  check eqn: v:t=(v*(-1)); [v:t, v]
Toolbox phase - cycle 1:
  check eqn: when (t=t.min) v=uf; [v(t.min)]
  add tool: v(t.min)=uf
  check eqn: v:t=(v*(-1)); [v:t, v]
  add tool: ODE v: []
  updated ODE(v) with v(t.min)=uf
Toolbox phase - cycle 1:
  check eqn: v:t=(v*(-1)); [v:t]
  add tool: v:t=v*(-1)
  updated ODE(v) with v:t=v*(-1)
    v is now entirely solved
Toolbox phase - all cycles completed
  add var: real u__init
  add tool: u__init=1
Toolbox    phase completed with 0 errors, 0 warnings.

Sequencing phase starting ...
Tools to sequence:
  u__init=1 :: [u__init]<<[]
  @t v:t=v*(-1) :: [v:t]<<[v]
  @t u:t=u*(-1) :: [u:t]<<[u]
  uf=when (t=t.max) u :: [uf]<<[u(t.max)]
  @t ODE v: v:t=v*(-1) :: [v, v(t.max)]<<[v(t.min), v:t]
  @t ODE u: u:t=u*(-1) :: [u, u(t.max)]<<[u(t.min), u:t]
  t.delta=.2 :: [t.delta]<<[]
  t.ct=(t.max-t.min)/t.delta+1.5 :: [t.ct]<<[t.max, t.min, t.delta]
  t.max=5 :: [t.max]<<[]
  t.min=0 :: [t.min]<<[]
  domain t :: [t]<<[t.min, t.max, t.ct, t.delta]
  v(t.min)=uf :: [v(t.min)]<<[uf]
  u(t.min)=u__init :: [u(t.min)]<<[u__init]
Events to seqence:
Relations to sequence:
Creating vuTools map ...
Adding reuse & query tools ...
Creating MainGraph ...
loopOrder=[t]
  addNode u__init seqLoops=() phase=main fft=null
  addNode v:t seqLoops=(t) phase=t#1 fft=null
  addNode u:t seqLoops=(t) phase=t#1 fft=null
  addNode uf seqLoops=() phase=main fft=null
  addNode v seqLoops=(t) phase=t#1 fft=t
  addNode u seqLoops=(t) phase=t#1 fft=t
  addNode t.delta seqLoops=() phase=main fft=null
  addNode t.ct seqLoops=() phase=main fft=null
  addNode t.max seqLoops=() phase=main fft=null
  addNode t.min seqLoops=() phase=main fft=null
  addNode t seqLoops=() phase=main fft=null
  addNode v(t.min) seqLoops=() phase=main fft=null
  addNode u(t.min) seqLoops=() phase=main fft=null
Saving graph pullfinder
Saving graph pullfinder
Building mainline block ...
Mainline block graph:
building block for phase main
  adding u__init=1 to main
  adding t.delta=.2 to main
  adding t.max=5 to main
  adding t.min=0 to main
  adding t.ct=(t.max-t.min)/t.delta+1.5 to main
  adding domain t to main
  adding u(t.min)=u__init to main
  subphase t#1 entryEdge=null
building block for phase t#1
  adding u:t=u*(-1) to loop-t
  adding ODE Block-t [u] to loop-t
  adding loop-t to main
  subphase t#2 entryEdge=v(t.min)->v
  adding uf=when (t=t.max) u to main
  adding v(t.min)=uf to main
  subphase t#2 entryEdge=null
building block for phase t#2
  adding v:t=v*(-1) to loop-t
  adding ODE Block-t [v] to loop-t
  adding loop-t to main
Building ODE Block-t [u] ...
  adding muTool u:t=u*(-1)
  adding muVar u:t
  adding u:t=u*(-1) to ODE Block-t [u]
Building ODE Block-t [v] ...
  adding muTool v:t=v*(-1)
  adding muVar v:t
  adding v:t=v*(-1) to ODE Block-t [v]
Sequencing phase completed with 0 errors, 0 warnings.

==== Main Calculation Block ====
main
  u__init=1
  t.delta=.2
  t.max=5
  t.min=0
  t.ct=(t.max-t.min)/t.delta+1.5
  domain t
  u(t.min)=u__init
  loop-t
    u:t=u*(-1)
    ODE Block-t vmus=[t, u, u:t]
      u:t=u*(-1)
  uf=when (t=t.max) u
  v(t.min)=uf
  loop-t
    v:t=v*(-1)
    ODE Block-t vmus=[t, v, v:t]
      v:t=v*(-1)

