// JSim generated model JS100imp1_bound_mult
 
import java.lang.Math;
import JSim.util.*;
import JSim.expr.*;
import JSim.data.*;
import JSim.jruntime.*;
import JSim.aserver.*;
import JSim.nml.math.NatMath;
 
// JS100imp1_bound_mult model
public class JS100imp1_bound_mult extends RTModel {

    // variable declarations
    public RTRealNVar JSb;
    public RTRealNVar JSc;
    public RTRealNVar JSumax;
    public RTRealNVar JSu;
     
    // F&P declarations
    
    // solver declarations
    public Fzero2Problem__u fzero2problem__u;
     
    // RT model constructor
    public JS100imp1_bound_mult(UnitNList u,ASServer.Messenger m) throws Xcept {
        super("JS100imp1_bound_mult", u, m);
         
        // units used in model
        units.addFund("kg");
        units.addFund("m");
        units.addFund("sec");
        units.addFund("amp");
        units.addFund("degK");
        units.addFund("mol");
        units.addFund("candela");
        units.add("dimensionless", Unit.parse(this, "1  dimensionless"));
        units.add("radian", Unit.parse(this, "1  dimensionless"));
        units.add("kg", Unit.parse(this, "1 kg^1"));
        units.add("m", Unit.parse(this, "1 m^1"));
        units.add("sec", Unit.parse(this, "1 sec^1"));
        units.setPrefixable("sec");
        units.add("amp", Unit.parse(this, "1 amp^1"));
        units.setPrefixable("amp");
        units.add("degK", Unit.parse(this, "1 degK^1"));
        units.add("mol", Unit.parse(this, "1 mol^1"));
        units.setPrefixable("mol");
        units.add("candela", Unit.parse(this, "1 candela^1"));
        units.setPrefixable("candela");
        units.add("steradian", Unit.parse(this, "1  dimensionless"));
        units.setPrefixable("steradian");
        units.add("scalar", Unit.parse(this, "1  dimensionless"));
        units.add("percent", Unit.parse(this, ".01  dimensionless"));
        units.add("mole", Unit.parse(this, "1 mol^1"));
        units.setPrefixable("mole");
        units.add("mmol", Unit.parse(this, ".001 mol^1"));
        units.add("umol", Unit.parse(this, "1E-6 mol^1"));
        units.add("nmol", Unit.parse(this, "1E-9 mol^1"));
        units.add("pmol", Unit.parse(this, "1E-12 mol^1"));
        units.add("meter", Unit.parse(this, "1 m^1"));
        units.setPrefixable("meter");
        units.add("metre", Unit.parse(this, "1 m^1"));
        units.setPrefixable("metre");
        units.add("mm", Unit.parse(this, ".001 m^1"));
        units.add("cm", Unit.parse(this, ".01 m^1"));
        units.add("km", Unit.parse(this, "1E3 m^1"));
        units.add("micron", Unit.parse(this, "1E-6 m^1"));
        units.add("um", Unit.parse(this, "1E-6 m^1"));
        units.add("nm", Unit.parse(this, "1E-9 m^1"));
        units.add("angstrom", Unit.parse(this, "1E-10 m^1"));
        units.setPrefixable("angstrom");
        units.add("inch", Unit.parse(this, ".0254 m^1"));
        units.add("foot", Unit.parse(this, ".3048 m^1"));
        units.add("yard", Unit.parse(this, ".9144 m^1"));
        units.add("mile", Unit.parse(this, "1609.344 m^1"));
        units.add("gram", Unit.parse(this, ".001 kg^1"));
        units.setPrefixable("gram");
        units.add("g", Unit.parse(this, ".001 kg^1"));
        units.add("mg", Unit.parse(this, "1E-6 kg^1"));
        units.add("ug", Unit.parse(this, "1E-9 kg^1"));
        units.add("amu", Unit.parse(this, "1.660531E-27 kg^1"));
        units.add("dalton", Unit.parse(this, "1.660531E-27 kg^1"));
        units.setPrefixable("dalton");
        units.add("da", Unit.parse(this, "1.660531E-27 kg^1"));
        units.add("second", Unit.parse(this, "1 sec^1"));
        units.setPrefixable("second");
        units.add("s", Unit.parse(this, "1 sec^1"));
        units.add("min", Unit.parse(this, "60 sec^1"));
        units.add("hour", Unit.parse(this, "3600 sec^1"));
        units.add("hr", Unit.parse(this, "3600 sec^1"));
        units.add("ms", Unit.parse(this, ".001 sec^1"));
        units.add("msec", Unit.parse(this, ".001 sec^1"));
        units.add("usec", Unit.parse(this, "1E-6 sec^1"));
        units.add("hz", Unit.parse(this, "1 sec^(-1)"));
        units.add("hertz", Unit.parse(this, "1 sec^(-1)"));
        units.setPrefixable("hertz");
        units.add("ml", Unit.parse(this, "1E-6 m^3"));
        units.add("liter", Unit.parse(this, ".001 m^3"));
        units.setPrefixable("liter");
        units.add("litre", Unit.parse(this, ".001 m^3"));
        units.setPrefixable("litre");
        units.add("L", Unit.parse(this, ".001 m^3"));
        units.add("dL", Unit.parse(this, "1E-4 m^3"));
        units.add("mL", Unit.parse(this, "1E-6 m^3"));
        units.add("uL", Unit.parse(this, "1E-9 m^3"));
        units.add("N", Unit.parse(this, "1 kg^1*m^1*sec^(-2)"));
        units.setPrefixable("N");
        units.add("newton", Unit.parse(this, "1 kg^1*m^1*sec^(-2)"));
        units.setPrefixable("newton");
        units.add("dyn", Unit.parse(this, "1E-5 kg^1*m^1*sec^(-2)"));
        units.add("dyne", Unit.parse(this, "1E-5 kg^1*m^1*sec^(-2)"));
        units.setPrefixable("dyne");
        units.add("pa", Unit.parse(this, "1 kg^1*m^(-1)*sec^(-2)"));
        units.add("pascal", Unit.parse(this, "1 kg^1*m^(-1)*sec^(-2)"));
        units.setPrefixable("pascal");
        units.add("atm", Unit.parse(this, "101325 kg^1*m^(-1)*sec^(-2)"));
        units.add("mmHg", Unit.parse(this, "1.3332237E2 kg^1*m^(-1)*sec^(-2)"));
        units.add("torr", Unit.parse(this, "1.3332237E2 kg^1*m^(-1)*sec^(-2)"));
        units.setPrefixable("torr");
        units.add("cmH2O", Unit.parse(this, "9.828409E1 kg^1*m^(-1)*sec^(-2)"));
        units.add("bar", Unit.parse(this, "1E5 kg^1*m^(-1)*sec^(-2)"));
        units.add("erg", Unit.parse(this, "1E-7 kg^1*m^2*sec^(-2)"));
        units.setPrefixable("erg");
        units.add("joule", Unit.parse(this, "1 kg^1*m^2*sec^(-2)"));
        units.setPrefixable("joule");
        units.add("J", Unit.parse(this, "1 kg^1*m^2*sec^(-2)"));
        units.add("cal", Unit.parse(this, "4.187 kg^1*m^2*sec^(-2)"));
        units.setPrefixable("cal");
        units.add("calorie", Unit.parse(this, "4.187 kg^1*m^2*sec^(-2)"));
        units.setPrefixable("calorie");
        units.add("watt", Unit.parse(this, "1 kg^1*m^2*sec^(-3)"));
        units.setPrefixable("watt");
        units.add("poise", Unit.parse(this, ".1 kg^1*m^(-1)*sec^(-1)"));
        units.setPrefixable("poise");
        units.add("p", Unit.parse(this, ".1 kg^1*m^(-1)*sec^(-1)"));
        units.add("cp", Unit.parse(this, ".001 kg^1*m^(-1)*sec^(-1)"));
        units.add("P", Unit.parse(this, ".1 kg^1*m^(-1)*sec^(-1)"));
        units.add("cP", Unit.parse(this, ".001 kg^1*m^(-1)*sec^(-1)"));
        units.add("degR", Unit.parse(this, ".55555556 degK^1"));
        units.add("K", Unit.parse(this, "1 degK^1"));
        units.add("kelvin", Unit.parse(this, "1 degK^1"));
        units.setPrefixable("kelvin");
        units.add("A", Unit.parse(this, "1 amp^1"));
        units.setPrefixable("A");
        units.add("mA", Unit.parse(this, ".001 amp^1"));
        units.add("uA", Unit.parse(this, "1E-6 amp^1"));
        units.add("ampere", Unit.parse(this, "1 amp^1"));
        units.setPrefixable("ampere");
        units.add("coulomb", Unit.parse(this, "1 sec^1*amp^1"));
        units.setPrefixable("coulomb");
        units.add("faraday", Unit.parse(this, "96485.341 sec^1*amp^1*mol^(-1)"));
        units.setPrefixable("faraday");
        units.add("volt", Unit.parse(this, "1 kg^1*m^2*sec^(-3)*amp^(-1)"));
        units.setPrefixable("volt");
        units.add("mV", Unit.parse(this, ".001 kg^1*m^2*sec^(-3)*amp^(-1)"));
        units.add("ohm", Unit.parse(this, "1 kg^1*m^2*sec^(-3)*amp^(-2)"));
        units.setPrefixable("ohm");
        units.add("mho", Unit.parse(this, "1 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.setPrefixable("mho");
        units.add("mmho", Unit.parse(this, ".001 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.add("siemens", Unit.parse(this, "1 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.setPrefixable("siemens");
        units.add("mS", Unit.parse(this, ".001 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.add("uS", Unit.parse(this, "1E-6 kg^(-1)*m^(-2)*sec^3*amp^2"));
        units.add("farad", Unit.parse(this, "1 kg^(-1)*m^(-2)*sec^4*amp^2"));
        units.setPrefixable("farad");
        units.add("uF", Unit.parse(this, "1E-6 kg^(-1)*m^(-2)*sec^4*amp^2"));
        units.add("weber", Unit.parse(this, "1 kg^1*m^2*sec^(-2)*amp^(-1)"));
        units.setPrefixable("weber");
        units.add("tesla", Unit.parse(this, "1 kg^1*sec^(-2)*amp^(-1)"));
        units.setPrefixable("tesla");
        units.add("henry", Unit.parse(this, "1 kg^1*m^2*sec^(-2)*amp^(-2)"));
        units.setPrefixable("henry");
        units.add("gauss", Unit.parse(this, "1E-4 kg^1*sec^(-2)*amp^(-1)"));
        units.setPrefixable("gauss");
        units.add("mu0", Unit.parse(this, "1.2566371E-6 kg^1*m^1*sec^(-2)*amp^(-2)"));
        units.add("oersted", Unit.parse(this, "79.57747155 m^(-1)*amp^1"));
        units.setPrefixable("oersted");
        units.add("gilbert", Unit.parse(this, ".79577472 amp^1"));
        units.setPrefixable("gilbert");
        units.add("molar", Unit.parse(this, "1E3 m^(-3)*mol^1"));
        units.setPrefixable("molar");
        units.add("Molar", Unit.parse(this, "1E3 m^(-3)*mol^1"));
        units.setPrefixable("Molar");
        units.add("M", Unit.parse(this, "1E3 m^(-3)*mol^1"));
        units.add("mM", Unit.parse(this, "1 m^(-3)*mol^1"));
        units.add("uM", Unit.parse(this, "1E-3 m^(-3)*mol^1"));
        units.add("nM", Unit.parse(this, "1E-6 m^(-3)*mol^1"));
        units.add("pM", Unit.parse(this, "1E-9 m^(-3)*mol^1"));
        units.add("katal", Unit.parse(this, "1 sec^(-1)*mol^1"));
        units.setPrefixable("katal");
        units.add("lumen", Unit.parse(this, "1 candela^1"));
        units.setPrefixable("lumen");
        units.add("lux", Unit.parse(this, "1 m^(-2)*candela^1"));
        units.setPrefixable("lux");
        units.add("becquerel", Unit.parse(this, "1 sec^(-1)"));
        units.setPrefixable("becquerel");
        units.add("gray", Unit.parse(this, "1 m^2*sec^(-2)"));
        units.setPrefixable("gray");
        units.add("sievert", Unit.parse(this, "1 m^2*sec^(-2)"));
        units.setPrefixable("sievert");
        units.addPrefix("yotta", 1E24);
        units.addPrefix("zetta", 1E21);
        units.addPrefix("exa", 1E18);
        units.addPrefix("peta", 1E15);
        units.addPrefix("tera", 1E12);
        units.addPrefix("giga", 1E9);
        units.addPrefix("mega", 1E6);
        units.addPrefix("kilo", 1E3);
        units.addPrefix("hecto", 100);
        units.addPrefix("deka", 10);
        units.addPrefix("deca", 10);
        units.addPrefix("deci", .1);
        units.addPrefix("centi", .01);
        units.addPrefix("milli", .001);
        units.addPrefix("micro", 1E-6);
        units.addPrefix("nano", 1E-9);
        units.addPrefix("pico", 1E-12);
        units.addPrefix("femto", 1E-15);
        units.addPrefix("atto", 1E-18);
        units.addPrefix("zepto", 1E-21);
        units.addPrefix("yocto", 1E-24);
         
        // var instantiation
        JSb = new RTRealNVar(this, "b","sec",1,null);
        JSc = new RTRealNVar(this, "c","sec^2",1,null);
        JSumax = new RTRealNVar(this, "umax","min",1,null);
        JSu = new RTRealNVar(this, "u","sec",2,null);
         
        // input defaults
        JSb.setDefault("-5");
        JSc.setDefault("6");
        JSumax.setDefault("1");
        
        // F&P initialization
        
        // solver instantiation
        fzero2problem__u = new Fzero2Problem__u(this);
        
    }
    
    // simple main methods
    public boolean defaultUnitCorrect() { return true; }
    public boolean allowMPRuns() { return true; }
    public void mainline(RTContext ctxt) throws Xcept { ((XContext) ctxt).mainline(); }
    public RTContext newRunContext(int threadInx, int nproc, RTDataStore s) { return new XContext(this, threadInx, nproc, s); }
    
    // every Nth point support
    public boolean runTimeNthSupported(RTRealDomain x) {
        return true;
    }
    
    // Implicit block solving [u]
    public class Fzero2Problem__u extends Fzero2Problem {
        public Fzero2Problem__u(RTModel m) throws Xcept {
            super(m, "Fzero2Problem__u",1);
        }
        public void setBounds(RTContext ctxt,double[] vmin,double[] vmax,double[] vguess) throws Xcept {
            ((XContext) ctxt).setBounds__u(vmin,vmax,vguess);
        }
        public void calcZero(RTContext ctxt,double[] val,double[] zero) throws Xcept {
            ((XContext) ctxt).calcZero__u(val,zero);
            ncallbacks++;
        }
        public void export(RTContext ctxt,double[] val) throws Xcept {
            ((XContext) ctxt).export__u(val);
        }
    }
     
    // model-specific context
    public class XContext extends RTContext {
        // global caches
        private double js0b;
        private double js0c;
        private double js0umax;
        private double js1u;
        
        // context constructor
        public XContext(RTModel m, int threadInx, int nproc, RTDataStore s) { super(m, threadInx, nproc, s, false); }
        
        // trace NaN causes abort?
        public boolean abortNaN() { return false; }
        
        // ctxt mainline
        public void mainline() throws Xcept {
            js0umax = realVal(JSumax);
            js0c = realVal(JSc);
            js0b = realVal(JSb);
            fzero2problem__u.solve(this);
            if (!((realVal(JSu)>=0))) badRelation("u>=0");
            if (!((js0umax>=(realVal(JSu)*.016666666666666666)))) badRelation("umax>=(u*.016666666666666666)");
        }
        
        // ctxt methods for Fzero2Problem__u
        public void setBounds__u(double[] vmin,double[] vmax,double[] vguess) throws Xcept {
            vmin[0]=0;
            vmax[0]=(js0umax/.016666666666666666);
        }
        public void calcZero__u(double[] vals,double[] zeroes) throws Xcept {
            js1u=vals[0];
            zeroes[0]=((NatMath.pow(js1u,2)+(js0b*js1u))+js0c);
        }
        public void export__u(double[] vals) throws Xcept {
            set(JSu,vals[0]);
        }
        // ctxt methods for F&P
    }
     
}


