#!/bin/bash

# build binary distribution .zip file in $JSIMDIST
#   assumes jsbuild.all completed successfully
#      and that $JSIMSRC/native/$OS is up to date

# subroutine copies all files of interest in current dir
smartcp() {
  echo "  copy $1 to $2"
  find "$1" -maxdepth 1 -type f -a -not -name CVS -a -exec cp -p {} $2 \;
}  

# script mainline 
. jsbuild.path

# 
if [ ! -d "$JSIMAUXLIB" ]
then
  echo "Illegal JSIMAUXLIB=$JSIMAUXLIB"
  exit 1
fi

# quick option uses existing $JSIMDIST/JSim[Client/Server].jar
if [ "$1" = "-quick" ]
then
  QUICK=1
  shift
else
  QUICK=0
fi

OSARCH="$1"
if [ "$OSARCH" = "all" ]
then
  jsdist.bin linux
  for i in macos win32
  do
    jsdist.bin -quick $i
  done
  exit 0
fi

# OS check & dependencies
OS=`echo $OSARCH | awk -F _ '{ print $1 }'`
ARCH=`echo $OSARCH | awk -F _ '{ print $2 }'`
OSDIR="$JSIMSRC/$OS"
case $OS in
  linux )
    PRETTY="Linux $ARCH"
    OSARCHDIR="$OSDIR/$ARCH"
    ;;
  macos )
    PRETTY="Macintosh"
    OSARCHDIR="$OSDIR"
    ;;
  win32 )
    PRETTY="Windows"
    OSARCHDIR="$OSDIR"
    ;;
  * )
    echo "jsdist.bin: unsupported OS=$OS"
    exit 1
    ;;
esac
JSIMNATIVE=$JSIMSRC/native/$OSARCH

# check OSARCHDIR
if [ ! -r $OSARCHDIR ] 
then
  echo "jsdist.bin: No such directory $OSARCHDIR"
  exit 1
fi

# set (create?) distribution directory
JSIMDIST=$JSIMSRC/dist
if [ ! -e $JSIMDIST ]
then
  mkdir $JSIMDIST
fi
if [ ! -d $JSIMDIST ]
then
  echo "Cannot create directory $JSIMDIST"
  exit 1
fi

# if not quick,  make JSim jars
if [ $QUICK -ne 1 ]
then
  jsdist.mkjars $JSIMDIST
fi

#  create work directory
echo "Creating work dir for $OSARCH distribution ..."
VERS=`jsdist.vers`
JSIMWORK=$JSIMDIST/"$OSARCH"_"$VERS"
rm -Rf $JSIMWORK
mkdir $JSIMWORK

# create top-level README file
DOTVERS=`echo $VERS | sed -e "s/_/./g"`
sed -e "s/PLATFORM/$PRETTY/g" $JSIMSRC/build/README |\
  sed -e "s/2.xx/$DOTVERS/g" > $JSIMWORK/README.txt

# copy skeletal home/
cd $JSIMSRC/home
HOMELIST=`find . "!" -type d | sed -e /CVS/d | sed -e /OLD/d`
#tar cf - $HOMELIST | ( cd $JSIMWORK; tar xf - )
jsdist.copy $JSIMWORK $HOMELIST

# create dist/lib/
echo "Creating dist/lib/ ..."
cp $JSIMDIST/JSimClient.jar $JSIMWORK/lib
cp $JSIMDIST/JSimServer.jar $JSIMWORK/lib

# create dist/OSARCH/
WORKOSARCH=$JSIMWORK/$OSARCH
echo "Creating dist/$OSARCH/ ..."
mkdir $WORKOSARCH
cd $WORKOSARCH
mkdir lib bin include include/$OS

# create jsim, jsbatch, jsserver, jsfim executables
if [ "$OS" = "win32" ]
then
  SFX=".bat"
else
  SFX=""
fi
jsdist.run $OSARCH jsim > $WORKOSARCH/bin/jsim"$SFX"
jsdist.run $OSARCH jsbatch > $WORKOSARCH/bin/jsbatch"$SFX"
jsdist.run $OSARCH jsserver > $WORKOSARCH/bin/jsserver"$SFX"
jsdist.run $OSARCH jsfim > $WORKOSARCH/bin/jsfim"$SFX"
jsdist.run $OSARCH jsxwrap > $WORKOSARCH/bin/jsxwrap"$SFX"
jsdist.run $OSARCH jscompile_c > $JSIMWORK/local/jscompile_c"$SFX"
chmod +x $WORKOSARCH/bin/js* $JSIMWORK/local/jscompile_c"$SFX"

# copy OS-specific files to  bin/, lib/ and include/
smartcp "$OSDIR/bin" bin
smartcp "$OSDIR/lib" lib
if [ "$OSDIR" != "$OSARCHDIR" ]
then
  smartcp "$OSARCHDIR/bin" bin
  smartcp "$OSARCHDIR/lib" lib
fi
smartcp $JSIMNATIVE/nml lib
smartcp $JSIMNATIVE/fpack lib
smartcp $JSIMSRC/JSim/nonJava/include include
smartcp $JSIMSRC/JSim/nonJava/include/$OS include/$OS

# libSBML native libs
echo "Copying libsbml native libs ..."
if [ "$OS" = "win32" ]
then
  LIBSFX=".dll"
elif [ "$OS" = "linux" ]
then
  LIBSFX=".so"
elif [ "$OS" = "macos" ]
then
  LIBSFX="lib"
fi
cd $JSIMAUXLIB/$OSARCH
SBMLLIBS=`ls $JSIMAUXLIB/$OSARCH/*$LIBSFX* \
   $JSIMAUXLIB/$OSARCH/sbtranslate* \
   $JSIMAUXLIB/$OSARCH/sbml2matlab*`
SBMLLIBS=`ls *$LIBSFX* sbtranslate* sbml2matlab*`
SCT=`echo $SBMLLIBS | wc -w`
if [ "$SCT" -lt 2 ]
then
  echo "SBML native libs are missing: $SBMLLIBS"
  exit 1
fi
tar cf - $SBMLLIBS | (cd  $WORKOSARCH/lib; tar xf -)

cd $WORKOSARCH

# unpack JRE
if [ "$OS" = "macos" ]
then
  echo "Skipping JRE for MacOS ..."
else
  mkdir jre
  cd jre
  JREZIP="$JSIMAUXLIB"/$OSARCH/jre.zip
  echo "Unpacking JRE from $JREZIP ..."
  unzip -q $JREZIP
  if [ $? -ne 0 ]
  then
    echo "JRE unzip failed !!!"
    exit 1
  fi
  cd ..
fi

# FPACK project examples
if [ -d $JSIMSRC/fpack ]
then
  FPACKCT=`find "$JSIMNATIVE"/fpack/ -name "*jsx*" | wc -l`
  echo "Copying FPACK project files ..."
  mkdir $JSIMWORK/doc/examples/fpack
  cp $JSIMSRC/fpack/proj/*.proj $JSIMWORK/doc/examples/fpack
else
  echo "Skipping FPACK project files"
fi  

# MacOS application directory
if [ "$OS" = "macos" ]
then
  echo "Creating MacOS application directory ..."
  cp -R $OSDIR/JSim.app $JSIMWORK
  RMLIST=`find $JSIMWORK -name CVS -print`
    rm -Rf $RMLIST
    # insert version number into application information property list
    sed -e 's/2.xx/'$DOTVERS/ < $OSDIR/JSim.app/Contents/Info.plist \
      > $JSIMWORK/JSim.app/Contents/Info.plist
    SYS_STUB=/System/Library/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub
    dist_STUB=$JSIMWORK/JSim.app/Contents/MacOS/JavaApplicationStub
    echo NOT DOING ln -s $SYS_STUB $dist_STUB - using local 64bit stub
# Move resources inside application
  cd $JSIMWORK
  mv common lib local macos $JSIMWORK/JSim.app/Contents/Resources
  mkdir -p macos/bin
  cp -p JSim.app/Contents/Resources/macos/bin/* macos/bin
  cd $JSIMWORK/JSim.app/Contents/Resources
  mv lib Java
  ln -s Java lib
fi

# DOS text file conversion
if [ "$OS" = "win32" ]
then
  echo "Converting text files to DOS format ..."
  cd $JSIMWORK
  for sfx in txt mod bat sh
  do
    for f in `find . -name "*.$sfx" -print`
    do
      unix2dos -q $f
    done
  done
fi

# make distrib zip file
echo "Create distribution zip file ..."
ZIPFILE=$JSIMDIST/JSim_"$OSARCH"_"$VERS".zip
cd $JSIMWORK
rm -f $ZIPFILE
zip -rqy $ZIPFILE *

# cleanup / remove $JSIMWORK
# rm -Rf $JSIMWORK
